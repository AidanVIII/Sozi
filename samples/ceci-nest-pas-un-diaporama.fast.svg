<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="http://sozi.baierouge.fr"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="1062.9921"
   height="1062.9921"
   id="svg2"
   version="1.1"
   inkscape:version="0.48.3.1 r9886"
   sodipodi:docname="ceci-nest-pas-un-diaporama.fast.svg">
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.49497475"
     inkscape:cx="714.41566"
     inkscape:cy="431.13584"
     inkscape:document-units="px"
     inkscape:current-layer="layer1"
     showgrid="true"
     inkscape:window-width="1280"
     inkscape:window-height="964"
     inkscape:window-x="0"
     inkscape:window-y="26"
     inkscape:window-maximized="1"
     units="cm">
    <inkscape:grid
       id="grid3763"
       type="xygrid"
       empspacing="5"
       visible="true"
       enabled="true"
       snapvisiblegridlinesonly="true" />
  </sodipodi:namedview>
  <defs
     id="defs4">
    <inkscape:path-effect
       tgtlength_rdm="0.3;1"
       tgtlength="100"
       tgtscale="10"
       tgt_places_rdmness="1;1"
       nbtangents="5"
       tremble_frequency="1"
       tremble_size="5;1"
       parallel_offset="5;1"
       ends_tolerance="0.1;1"
       strokeoverlap_rdm="0.3;1"
       strokeoverlap="0.3"
       strokelength_rdm="0.3;1"
       strokelength="100"
       nbiter_approxstrokes="5"
       is_visible="true"
       id="path-effect3765"
       effect="sketch" />
    <inkscape:path-effect
       bendpath4="m 167.14286,514.73163 0,367.83084"
       bendpath3="m 167.14286,882.56247 157.07266,0"
       bendpath2="m 324.21552,514.73163 0,367.83084"
       bendpath1="m 167.14286,514.73163 157.07266,0"
       xx="true"
       yy="true"
       is_visible="true"
       id="path-effect3767"
       effect="envelope" />
    <inkscape:path-effect
       phi="5"
       teeth="10"
       is_visible="true"
       id="path-effect3769"
       effect="gears" />
    <inkscape:path-effect
       crossing_points_vector=""
       switcher_size="15"
       add_other_stroke_width="true"
       add_stroke_width="true"
       prop_to_stroke_width="true"
       interruption_width="3"
       is_visible="true"
       id="path-effect3771"
       effect="knot" />
    <inkscape:path-effect
       nr_y="5"
       nr_x="5"
       is_visible="true"
       id="path-effect3773"
       effect="construct_grid" />
    <inkscape:path-effect
       is_visible="true"
       id="path-effect3775"
       effect="spiro" />
    <inkscape:path-effect
       maxComplexity="1000"
       drawall="true"
       nbgenerations="1"
       similar_only="false"
       generator="m 167.14286,882.56247 52.35755,0 m 52.35756,0 52.35755,0"
       ref_path="m 167.14286,698.64705 157.07266,0"
       is_visible="true"
       id="path-effect3777"
       effect="vonkoch" />
    <inkscape:path-effect
       vertical="false"
       scale_y_rel="false"
       prop_scale="1"
       bendpath="m 167.14286,698.64705 157.07266,0"
       is_visible="true"
       id="path-effect3779"
       effect="bend_path" />
  </defs>
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Calque 1"
     transform="translate(0,10.631225)">
    <g
       style="font-size:33.79266739px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Iwona;-inkscape-font-specification:Iwona"
       id="text2985">
      <path
         d="m 283.09232,529.79484 1.38817,-0.83511 c 1.17002,-2.59442 0.97616,-5.59371 -0.47753,-8.01014 -3.13936,-5.21847 -8.64511,-5.75742 -14.09494,-2.47888 -5.44983,3.27855 -7.5533,8.3951 -4.41394,13.61357 1.20626,2.00513 2.98831,3.62886 5.11438,4.66052 l 1.18251,-0.71139 c -2.12607,-1.03165 -3.90812,-2.65539 -5.11438,-4.66051 -2.42798,-4.03596 0.2483,-7.67658 4.74699,-10.38292 4.49868,-2.70635 8.96889,-3.36497 11.39687,0.67099 1.48462,2.46785 1.59112,5.55471 0.27187,8.13387"
         style="font-size:30px"
         id="path3140" />
      <path
         d="m 282.07767,546.52379 0.25692,-0.1549 c 3.62259,-2.18397 4.84498,-5.61825 3.04823,-8.59854 -1.81223,-3.00597 -5.41996,-3.52828 -9.04255,-1.34431 -3.62258,2.18398 -4.84497,5.61826 -3.03274,8.62424 0.77446,1.2846 1.94451,2.29569 3.32463,2.89988 l 1.07907,-0.65055 c -1.49875,-0.74285 -2.36996,-1.54877 -3.22186,-2.96184 -1.31658,-2.18382 0.43921,-3.97799 2.95703,-5.49593 l 4.63127,7.68195 m -0.28398,-2.91146 -3.26822,-5.42103 c 2.05537,-1.23914 4.66306,-1.62023 5.77829,0.2296 1.09973,1.82414 -0.4547,3.9523 -2.51007,5.19143"
         style="font-size:30px"
         id="path3142" />
      <path
         d="m 292.47733,556.16625 1.07925,-0.65024 c 0.66093,-1.51897 0.54968,-3.2732 -0.3173,-4.71221 -1.93522,-3.21207 -5.65118,-3.91529 -9.27439,-1.73236 -3.62321,2.18294 -4.73822,5.79674 -2.80299,9.00881 0.80505,1.33622 2.23177,2.19283 3.7857,2.27231 l 1.07925,-0.65024 c -1.8369,-0.0841 -2.84131,-0.70482 -3.7857,-2.2723 -1.11469,-1.85016 0.10534,-4.30139 3.08614,-6.09728 2.9808,-1.79589 5.71805,-1.72886 6.83274,0.1213 0.95987,1.59318 1.04478,3.01304 0.3173,4.71221"
         style="font-size:30px"
         id="path3144" />
      <path
         d="m 288.95437,568.41013 0.77125,-0.46388 c -0.70512,-0.24105 -1.3795,-0.60562 -1.76607,-1.24832 -0.57211,-0.95121 0.50223,-1.84244 1.60768,-2.50733 l 8.35516,-5.02531 -1.20607,-2.00524 -8.35516,5.02531 c -1.72245,1.03599 -3.06858,2.75586 -2.1563,4.27264 0.58758,0.97691 1.63269,1.60862 2.74951,1.95213 m 13.13313,-11.39991 c 0.69412,-0.41749 0.91952,-1.32325 0.50203,-2.01737 -0.41748,-0.69412 -1.32324,-0.91952 -2.01736,-0.50203 -0.69412,0.41748 -0.91953,1.32324 -0.50204,2.01736 0.41749,0.69412 1.32325,0.91953 2.01737,0.50204"
         style="font-size:30px"
         id="path3146" />
      <path
         d="m 300.34095,589.4643 8.36959,-5.00126 c 1.87993,-1.12335 2.61484,-3.51959 1.50687,-5.37377 -0.92331,-1.54515 -2.61449,-2.38683 -4.3578,-2.84787 l 1.69967,-1.01564 -1.2003,-2.0087 -11.58866,6.92481 1.20031,2.0087 9.09065,-5.43213 c 1.3988,0.35238 2.74043,1.0185 3.46369,2.22887 0.72326,1.21037 0.22139,2.76839 -1.01473,3.50703 l -8.36959,5.00126 1.2003,2.0087"
         style="font-size:30px"
         id="path3148" />
      <path
         d="m 314.80076,586.42605 6.03221,-3.59065 -0.70585,-1.18582 -6.03222,3.59065 0.70586,1.18582"
         style="font-size:30px"
         id="path3150" />
      <path
         d="m 315.67315,602.65277 0.25809,-0.15294 c 3.63901,-2.15649 4.88736,-5.58143 3.11323,-8.57522 -1.78943,-3.01961 -5.39311,-3.56921 -9.03212,-1.41272 -3.63901,2.15649 -4.88736,5.58142 -3.09793,8.60103 0.76471,1.29043 1.92707,2.31035 3.30258,2.92496 l 1.08397,-0.64236 c -1.49309,-0.75417 -2.35817,-1.56666 -3.19936,-2.98614 -1.30001,-2.19373 0.46931,-3.97455 2.99855,-5.47339 l 4.57299,7.71678 m -0.26193,-2.91352 -3.22709,-5.44562 c 2.06468,-1.22354 4.67519,-1.58488 5.77638,0.27334 1.08589,1.83241 -0.4846,3.94874 -2.54929,5.17228"
         style="font-size:30px"
         id="path3152" />
      <path
         d="m 320.04055,615.2196 c 2.04294,-1.20136 1.82581,-3.9971 1.09603,-6.42177 -0.41962,-1.42376 -0.69319,-3.07263 0.52224,-3.78737 1.11198,-0.6539 2.50518,0.0581 3.23512,1.29943 0.80597,1.37058 1.19819,2.98448 1.11736,4.56333 l 1.08612,-0.6387 c 0.0808,-1.57885 -0.31138,-3.19275 -1.11736,-4.56333 -1.32302,-2.24983 -3.91017,-3.51266 -6.00484,-2.28088 -1.88778,1.11011 -1.53525,3.72183 -0.85564,6.00198 0.46979,1.56828 0.5821,3.41639 -0.73676,4.19195 -1.21543,0.71473 -2.69531,-0.0856 -3.47087,-1.40441 -0.94284,-1.60332 -1.46737,-3.38304 -1.49754,-5.20983 l -1.08613,0.63869 c 0.0302,1.8268 0.5547,3.60651 1.49754,5.20984 1.36864,2.3274 4.04249,3.67847 6.21473,2.40107"
         style="font-size:30px"
         id="path3154" />
      <path
         d="m 322.74695,625.38481 0.77725,-0.45374 c -0.65653,-0.17254 -1.28071,-0.46818 -1.62857,-1.06407 -0.54449,-0.9327 0.64295,-1.69538 1.7311,-2.33062 l 7.33206,-4.2803 1.45197,2.4872 1.08815,-0.63524 -1.45197,-2.4872 3.88625,-2.26871 -0.71086,-1.21769 c -2.07267,1.20998 -4.71153,1.15255 -5.81564,-0.73876 l -0.95861,0.55962 1.33098,2.27993 -7.33206,4.2803 c -1.70995,0.99823 -3.18001,2.58592 -2.3179,4.06269 0.55962,0.95861 1.56178,1.48518 2.61785,1.80659"
         style="font-size:30px"
         id="path3156" />
      <path
         d="m 340.08071,644.02841 c 3.4611,-1.98517 5.36917,-4.8088 3.56312,-7.95761 -0.76123,-1.32719 -2.0613,-2.20699 -3.49108,-2.77028 l 1.17105,-0.67168 -1.16424,-2.02982 -17.69584,10.14974 1.16423,2.02982 6.42776,-3.68674 c 0.13972,1.26865 0.50638,2.51089 1.13328,3.60387 1.86575,3.2529 5.37858,3.34772 8.89172,1.3327 m -1.31349,-2.29005 c -2.44619,1.40305 -5.45536,2.12606 -6.67929,-0.008 -0.5672,-0.98889 -0.87415,-2.12704 -0.93924,-3.26557 l 7.91108,-4.53753 c 1.22848,0.33292 2.43133,0.92263 3.07315,2.04163 1.35827,2.36812 -0.63326,4.20208 -3.3657,5.76932"
         style="font-size:30px"
         id="path3158" />
      <path
         d="m 341.43477,660.11539 7.31241,-4.13383 c 2.45488,-1.38779 3.84455,-4.17218 2.56011,-6.44425 -0.94488,-1.67141 -2.40525,-2.91356 -4.09042,-3.82185 l -0.80959,0.45768 c 1.31726,0.80612 2.4733,1.87569 3.24101,3.23371 0.91535,1.61917 -0.2768,3.53375 -2.05267,4.53768 l -0.47009,0.26574 c -0.13181,-1.26949 -0.49073,-2.514 -1.11081,-3.61086 -1.57971,-2.79438 -4.02572,-4.13411 -6.66341,-2.64298 -2.50711,1.41731 -2.85779,4.0279 -1.36666,6.66559 0.75295,1.3319 2.04751,2.21978 3.47376,2.79197 l -1.17521,0.66437 1.15157,2.03703 m 1.1205,-3.32147 c -1.22638,-0.34057 -2.42553,-0.93776 -3.06037,-2.06074 -0.98917,-1.74975 -0.56802,-3.50416 1.15562,-4.47856 1.59306,-0.90058 3.55869,-0.28869 4.45927,1.30437 0.56102,0.9924 0.86088,2.13244 0.91888,3.27136 l -3.4734,1.96357"
         style="font-size:30px"
         id="path3160" />
      <path
         d="m 351.56833,670.39541 c 2.07068,-1.1529 1.91948,-3.95298 1.24702,-6.39417 -0.38596,-1.43326 -0.6206,-3.08811 0.61132,-3.77401 1.12708,-0.62753 2.50312,0.11714 3.20361,1.37528 0.77346,1.38919 1.12755,3.01188 1.00954,4.58839 l 1.10087,-0.61294 c 0.11801,-1.5765 -0.23608,-3.1992 -1.00954,-4.58839 -1.26965,-2.28037 -3.82633,-3.6038 -5.94944,-2.42171 -1.91341,1.06533 -1.62251,3.68462 -0.99681,5.98016 0.43272,1.57891 0.50146,3.42915 -0.83531,4.17342 -1.23193,0.6859 -2.69255,-0.14902 -3.43682,-1.48579 -0.90481,-1.62509 -1.38726,-3.41667 -1.37439,-5.24367 l -1.10087,0.61294 c -0.0129,1.827 0.46958,3.61857 1.37439,5.24367 1.31342,2.359 3.9547,3.77268 6.15643,2.54682"
         style="font-size:30px"
         id="path3162" />
      <path
         d="m 359.93424,693.77828 11.88134,-6.40966 -1.11101,-2.05943 -9.32025,5.02802 c -1.38199,-0.41342 -2.6931,-1.13777 -3.36256,-2.37871 -0.66945,-1.24093 -0.0997,-2.77543 1.16764,-3.45913 l 8.58097,-4.6292 -1.111,-2.05943 -8.58097,4.6292 c -1.92742,1.03978 -2.76676,3.40146 -1.74121,5.30248 0.85462,1.58417 2.50723,2.49925 4.22864,3.03634 l -1.7426,0.94008 1.11101,2.05944"
         style="font-size:30px"
         id="path3164" />
      <path
         d="m 367.26108,707.63873 8.62777,-4.54137 c 1.93793,-1.02006 2.80133,-3.37305 1.79524,-5.28443 -0.83841,-1.59282 -2.4816,-2.52471 -4.19743,-3.07935 l 1.7521,-0.92225 -1.08993,-2.07066 -11.94614,6.28806 1.08993,2.07066 9.37108,-4.93263 c 1.37769,0.4275 2.68135,1.16519 3.3381,2.4129 0.65675,1.2477 0.0714,2.77631 -1.20288,3.44703 l -8.62777,4.54138 1.08993,2.07066"
         style="font-size:30px"
         id="path3166" />
      <path
         d="m 378.83878,730.41184 18.78033,-9.39675 -1.04707,-2.09267 -7.16335,3.58419 c -0.0674,-1.27454 -0.36296,-2.5356 -0.92676,-3.66242 -1.67799,-3.35362 -5.17976,-3.6478 -8.80168,-1.83557 -3.56826,1.78538 -5.63363,4.49608 -4.00933,7.74239 0.68462,1.36828 1.93261,2.3205 3.3281,2.96409 l -1.20731,0.60408 1.04707,2.09266 m 1.28706,-3.26054 c -1.20759,-0.40216 -2.375,-1.05923 -2.95223,-2.21288 -1.22158,-2.44144 0.8709,-4.15933 3.68794,-5.56885 2.52193,-1.26185 5.56731,-1.81277 6.66807,0.38721 0.51011,1.0195 0.75193,2.17324 0.75225,3.31364 l -8.15603,4.08088"
         style="font-size:30px"
         id="path3168" />
      <path
         d="m 384.2814,739.1909 0.80953,-0.39328 c -0.68082,-0.30295 -1.32002,-0.72619 -1.64774,-1.40079 -0.48504,-0.99842 0.66447,-1.79033 1.82479,-2.35402 l 8.76989,-4.26047 -1.02251,-2.10478 -8.76989,4.26047 c -1.80794,0.87832 -3.30204,2.47133 -2.5286,4.0634 0.49815,1.0254 1.48278,1.74776 2.56453,2.18947 m 14.09711,-10.18374 c 0.72857,-0.35395 1.03382,-1.23601 0.67988,-1.96458 -0.35395,-0.72858 -1.23601,-1.03383 -1.96458,-0.67988 -0.72857,0.35394 -1.03383,1.236 -0.67988,1.96457 0.35395,0.72858 1.236,1.03383 1.96458,0.67989"
         style="font-size:30px"
         id="path3170" />
      <path
         d="m 389.13158,751.91598 7.60413,-3.56892 c 2.55282,-1.19814 4.14909,-3.86945 3.04018,-6.23216 -0.81575,-1.73808 -2.17799,-3.08713 -3.78964,-4.12027 l -0.84189,0.39513 c 1.25252,0.90344 2.32435,2.05738 2.98715,3.46958 0.79026,1.68377 -0.54328,3.50269 -2.39,4.36943 l -0.48883,0.22943 c -0.0354,-1.27583 -0.29919,-2.54391 -0.83453,-3.68453 -1.36383,-2.90586 -3.70151,-4.42675 -6.44442,-3.13939 -2.60713,1.22363 -3.15425,3.80021 -1.86689,6.54312 0.65005,1.38504 1.87375,2.36829 3.25264,3.04671 l -1.2221,0.57358 0.9942,2.11829 m 1.36851,-3.2272 c -1.19711,-0.43235 -2.34766,-1.11853 -2.89574,-2.2863 -0.85399,-1.81956 -0.30136,-3.53709 1.49104,-4.37834 1.65661,-0.77751 3.57033,-0.0187 4.34784,1.63791 0.48436,1.03199 0.69714,2.19144 0.66883,3.33149 l -3.61197,1.69524"
         style="font-size:30px"
         id="path3172" />
      <path
         d="m 401.95511,764.00029 c 3.64581,-1.62115 5.8324,-4.23506 4.35751,-7.55192 -0.62164,-1.39802 -1.82501,-2.40604 -3.18976,-3.11247 l 1.23354,-0.54851 -0.95075,-2.13815 -18.64025,8.2886 0.95075,2.13814 6.7708,-3.01071 c 0.009,1.27629 0.24719,2.54949 0.75913,3.7008 1.52364,3.42652 5.00839,3.87975 8.70903,2.23422 m -1.07264,-2.41227 c -2.57674,1.14578 -5.64403,1.55754 -6.64354,-0.69025 -0.46318,-1.04166 -0.65225,-2.20521 -0.60067,-3.34444 l 8.33329,-3.70549 c 1.18803,0.45669 2.32434,1.16621 2.84847,2.34493 1.10921,2.4945 -1.05928,4.11539 -3.93755,5.39525"
         style="font-size:30px"
         id="path3174" />
      <path
         d="m 407.79036,777.91882 c 4.23882,-1.76081 5.72803,-4.58844 4.28946,-8.05153 -1.45008,-3.49079 -4.50446,-4.43101 -8.74328,-2.6702 -4.23882,1.76081 -5.72803,4.58844 -4.27795,8.07923 1.43857,3.46309 4.49295,4.40331 8.73177,2.6425 m -1.01276,-2.43802 c -3.46308,1.43858 -5.77283,1.19608 -6.55541,-0.68784 -0.79409,-1.91162 0.66402,-3.71929 4.1271,-5.15786 3.46309,-1.43857 5.77284,-1.19607 6.56693,0.71555 0.78258,1.88392 -0.67553,3.69158 -4.13862,5.13015"
         style="font-size:30px"
         id="path3176" />
      <path
         d="m 416.5761,787.02748 1.7349,-0.67061 c -0.007,-0.35107 -0.0529,-0.71931 -0.17189,-1.02711 -0.60571,-1.56701 -2.18376,-2.40437 -3.77638,-2.94663 l 2.09867,-0.81123 -0.84368,-2.18261 -12.59201,4.86736 0.84367,2.18261 9.31809,-3.60184 c 1.30387,0.46089 2.55436,1.19973 3.05192,2.48691 0.20551,0.53166 0.3099,1.13457 0.33671,1.70315"
         style="font-size:30px"
         id="path3178" />
      <path
         d="m 410.151,803.68692 7.92757,-2.77733 c 2.6614,-0.93239 4.52099,-3.42757 3.65803,-5.89078 -0.63481,-1.81202 -1.85284,-3.29256 -3.3511,-4.48421 l -0.8777,0.3075 c 1.15418,1.02609 2.10314,2.28303 2.61893,3.75529 0.61498,1.75539 -0.89658,3.42931 -2.82185,4.1038 l -0.50963,0.17855 c 0.0945,-1.27282 -0.039,-2.56115 -0.45559,-3.75029 -1.06134,-3.02946 -3.23228,-4.78014 -6.09186,-3.77831 -2.71802,0.95222 -3.52427,3.45983 -2.52245,6.31942 0.50588,1.44395 1.62327,2.54651 2.92604,3.36161 l -1.27408,0.44636 0.77369,2.20839 m 1.68952,-3.07135 c -1.14695,-0.55181 -2.22178,-1.35141 -2.6483,-2.56886 -0.66457,-1.89695 0.0598,-3.54939 1.92845,-4.20405 1.72708,-0.60506 3.55374,0.34438 4.1588,2.07146 0.37692,1.07588 0.47072,2.25096 0.32665,3.38222 l -3.7656,1.31923"
         style="font-size:30px"
         id="path3180" />
      <path
         d="m 416.17041,823.98057 9.38541,-2.64134 c 2.02147,-0.5689 3.56533,-2.28117 3.03707,-4.15825 -0.45512,-1.61718 -1.71521,-2.88316 -3.31629,-3.36752 1.1406,-0.81965 1.78838,-2.06158 1.41453,-3.38997 -0.42261,-1.50167 -1.80357,-2.42197 -3.23502,-3.07874 l 1.90596,-0.5364 -0.63392,-2.2525 -12.99518,3.65724 0.63392,2.25249 10.22287,-2.87702 c 1.09028,0.44113 2.17156,1.07179 2.48852,2.19804 0.33321,1.184 -0.75863,2.17692 -2.05814,2.54264 l -9.38541,2.64134 0.63392,2.2525 9.38541,-2.64134 c 0.34653,-0.0975 0.65607,-0.2158 0.98635,-0.37108 1.09027,0.44113 2.02267,1.20719 2.33963,2.33343 0.33322,1.18401 -0.75863,2.17692 -2.05814,2.54265 l -9.38541,2.64133 0.63392,2.2525"
         style="font-size:30px"
         id="path3182" />
      <path
         d="m 419.05506,838.9259 8.26693,-1.48923 c 2.77533,-0.49996 5.00597,-2.66981 4.54325,-5.23846 -0.3404,-1.88958 -1.30906,-3.54406 -2.60011,-4.95756 l -0.91527,0.16488 c 0.97746,1.19565 1.71579,2.58679 1.99236,4.12208 0.32976,1.83053 -1.4274,3.24446 -3.43509,3.60613 l -0.53144,0.0957 c 0.29449,-1.24188 0.36635,-2.53511 0.14297,-3.77515 -0.5691,-3.15914 -2.43599,-5.23099 -5.41799,-4.6938 -2.83438,0.51059 -4.02688,2.85922 -3.4897,5.84122 0.27126,1.50576 1.20031,2.7711 2.35785,3.78189 l -1.32862,0.23934 0.41486,2.30293 m 2.1538,-2.76566 c -1.04531,-0.72618 -1.98022,-1.68563 -2.20892,-2.95519 -0.35635,-1.97816 0.62014,-3.49532 2.56877,-3.84635 1.80101,-0.32444 3.45461,0.90182 3.77905,2.70283 0.20211,1.12194 0.10897,2.29707 -0.21211,3.39133 l -3.92679,0.70738"
         style="font-size:30px"
         id="path3184" />
    </g>
    <rect
       ry="0"
       rx="0"
       y="-7.1704459"
       x="574.76184"
       height="65"
       width="70"
       id="rect2993"
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999991, 1.99999991, 1, 1.99999991;stroke-dashoffset:0"
       transform="matrix(0.503761,0.86384307,-0.86384307,0.503761,0,0)" />
    <rect
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:4.00000006, 2.00000003, 1.00000003, 2.00000003;stroke-dashoffset:0"
       id="rect3765"
       width="70"
       height="65"
       x="641.15967"
       y="-6.2654901"
       rx="0"
       ry="0"
       transform="matrix(0.49851537,0.86688086,-0.86688086,0.49851537,0,0)" />
    <rect
       ry="0"
       rx="0"
       y="5.6747155"
       x="706.10358"
       height="65"
       width="60"
       id="rect3767"
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999994, 1.99999999, 0.99999998, 1.99999999;stroke-dashoffset:0"
       transform="matrix(0.50891928,0.86081425,-0.86081425,0.50891928,0,0)" />
    <rect
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999997, 2, 1, 2;stroke-dashoffset:0"
       id="rect3769"
       width="50"
       height="65"
       x="758.71515"
       y="-22.586481"
       rx="0"
       ry="0"
       transform="matrix(0.47623607,0.87931747,-0.87931747,0.47623607,0,0)" />
    <rect
       ry="0"
       rx="0"
       y="-128.2869"
       x="795.65741"
       height="62.057087"
       width="152.75591"
       id="rect3771"
       style="fill:none;stroke:#008080;stroke-width:0.91965157;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.6786068, 1.83930334, 0.91965167, 1.83930334;stroke-dashoffset:0"
       transform="matrix(0.35715668,0.93404449,-0.93404449,0.35715668,0,0)" />
    <g
       transform="matrix(0.82918963,-0.55896741,0.55896741,0.82918963,0,0)"
       inkscape:transform-center-x="4.4962412"
       inkscape:transform-center-y="-4.4554741"
       style="font-size:45px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Iwona;-inkscape-font-specification:Iwona"
       id="text2989">
      <path
         d="m 237.7414,850.25476 0,-2.43 c -2.43,-3.50999 -6.43501,-5.58 -10.665,-5.58 -9.13499,0 -14.085,6.66001 -14.085,16.2 0,9.53999 4.95001,16.2 14.085,16.2 3.50999,0 6.975,-1.035 9.945,-2.97 l 0,-2.07 c -2.97,1.935 -6.43501,2.97 -9.945,2.97 -7.065,0 -9.675,-6.255 -9.675,-14.13 0,-7.87499 2.61,-14.13 9.675,-14.13 4.31999,0 8.37,2.25001 10.665,5.94"
         style=""
         id="path3131" />
      <path
         d="m 258.48218,864.51976 0,-0.45 c 0,-6.34499 -3.46501,-10.575 -8.685,-10.575 -5.265,0 -8.73,4.23001 -8.73,10.575 0,6.345 3.465,10.575 8.73,10.575 2.25,0 4.455,-0.72 6.3,-2.025 l 0,-1.89 c -2.115,1.35 -3.825,1.845 -6.3,1.845 -3.825,0 -4.77,-3.645 -4.77,-8.055 l 13.455,0 m -3.96,-1.89 -9.495,0 c 0,-3.59999 1.53,-7.245 4.77,-7.245 3.195,0 4.725,3.64501 4.725,7.245"
         style=""
         id="path3133" />
      <path
         d="m 278.92062,858.62476 0,-1.89 c -1.44,-2.02499 -3.78001,-3.24 -6.3,-3.24 -5.625,0 -9.405,4.23001 -9.405,10.575 0,6.345 3.78,10.575 9.405,10.575 2.33999,0 4.545,-1.17 5.85,-3.105 l 0,-1.89 c -1.53,2.295 -3.10501,3.105 -5.85,3.105 -3.24,0 -5.445,-3.465 -5.445,-8.685 0,-5.21999 2.205,-8.685 5.445,-8.685 2.78999,0 4.68,0.99001 6.3,3.24"
         style=""
         id="path3135" />
      <path
         d="m 291.91155,872.61976 0,-1.35 c -0.855,0.72 -1.845,1.305 -2.97,1.305 -1.66499,0 -1.98,-2.07 -1.98,-4.005 l 0,-14.625 -3.51,0 0,14.625 c 0,3.015 1.17001,6.075 3.825,6.075 1.71,0 3.33,-0.855 4.635,-2.025 m -4.5,-25.695 c 0,-1.215 -0.99,-2.205 -2.205,-2.205 -1.215,0 -2.205,0.99 -2.205,2.205 0,1.215 0.99,2.205 2.205,2.205 1.215,0 2.205,-0.99 2.205,-2.205"
         style=""
         id="path3137" />
    </g>
    <rect
       transform="matrix(0.82734714,-0.56169094,0.56169094,0.82734714,0,0)"
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999978, 1.9999999, 0.99999996, 1.9999999;stroke-dashoffset:0"
       id="rect3773"
       width="194.01286"
       height="113.17416"
       x="175.06706"
       y="809.41803"
       rx="0"
       ry="0" />
    <rect
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999997, 1.99999998, 1, 1.99999998;stroke-dashoffset:0"
       id="rect3787"
       width="1060.0001"
       height="1020"
       x="-6.1035153e-05"
       y="12.360841"
       rx="0"
       ry="0" />
    <rect
       style="fill:none;stroke:#008080;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:4.00000001, 2, 1, 2;stroke-dashoffset:0"
       id="rect4308"
       width="460"
       height="155"
       x="527.84229"
       y="-26.204351"
       rx="0"
       ry="0"
       transform="matrix(0.48292513,0.87566164,-0.87566164,0.48292513,0,0)" />
    <g
       transform="matrix(2.3185398,0,0,2.3185398,-683.9555,-1044.6717)"
       id="layer1-8"
       inkscape:label="Calque 1">
      <path
         inkscape:connector-curvature="0"
         id="path3007"
         d="m 664.99729,654.7941 c -0.97165,-3.16732 -3.59682,-16.13813 -5.08854,-25.14219 -2.99137,-18.05589 -4.38349,-32.97732 -5.10094,-54.67451 -0.28238,-8.53959 -2.51004,-11.24649 -1.8298,-11.24649 2.82778,0 19.15374,7.91109 25.29911,11.99238 12.37658,8.21958 18.92606,18.74124 19.57856,31.45273 0.2441,4.75551 0.13785,5.72066 -1.02871,9.34391 -2.68567,8.34152 -7.54548,18.74304 -17.97061,29.1591 -3.61501,3.61186 -9.34922,9.59398 -10.78264,10.78265 -2.2368,1.85487 -2.83986,-0.89642 -3.07643,-1.66758 z"
         style="fill:#ffcc00;fill-opacity:1;stroke:#ffcc00;stroke-width:0.99921262;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
         sodipodi:nodetypes="csssssssscc" />
      <path
         sodipodi:nodetypes="ssssssss"
         inkscape:connector-curvature="0"
         id="path3792"
         d="m 392.34969,654.33945 c -21.01871,-49.20118 -27.20832,-97.82124 -15.39989,-120.96768 6.89705,-13.51934 20.88367,-19.67638 38.80994,-17.08451 8.17657,1.18221 23.92626,4.34053 25.37483,5.7121 0.38519,0.36471 -3.38434,3.52038 -5.32117,6.57609 -4.77582,7.53471 -13.59934,25.79204 -17.81905,36.87057 -11.0807,29.09149 -18.25056,66.19899 -20.59074,101.76543 -0.20638,3.13669 -0.45967,-2.11765 -5.05392,-12.872 z"
         style="fill:#ff6600;fill-opacity:1;stroke:#ff6600;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" />
      <path
         inkscape:connector-curvature="0"
         id="path3800"
         d="m 659.6783,501.37697 c -2.32457,0.18254 -4.63554,0.7783 -6.73004,1.81127 -1.19619,0.62935 -2.55003,1.56007 -2.64453,3.03612 -0.0533,2.06356 1.38811,3.95547 3.28485,4.67629 2.24586,0.88314 4.80077,0.66421 7.04242,-0.11235 3.30401,-1.2278 5.79168,-4.03779 7.27879,-7.16473 0.17924,-0.50913 0.93604,-1.39354 -0.0862,-1.2817 -2.66099,-0.42607 -5.33029,-0.91746 -8.03145,-0.96818 l -0.11381,0.003 z"
         style="fill:#ddafe9;fill-opacity:1;stroke:#ddafe9;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
      <path
         sodipodi:nodetypes="csssssccc"
         inkscape:connector-curvature="0"
         id="path3794"
         d="m 578.80989,789.72063 c -23.32273,-8.15737 -33.49713,-20.50991 -31.22416,-32.62588 1.49377,-7.96247 12.51465,-20.8437 29.78472,-34.67555 9.8613,-7.89806 35.84172,-26.23573 40.58446,-29.12029 1.14694,-0.69758 0.1926,2.99527 -0.37919,10.86886 -2.19579,30.23646 -6.65443,51.981 -15.23634,71.45272 -3.72069,8.44198 -8.50455,18.89224 -9.62408,18.76319 -0.35877,-0.0413 -6.18317,-1.67097 -9.88755,-2.96662 z"
         style="fill:#00ccff;fill-opacity:1;stroke:#00ccff;stroke-opacity:1" />
      <path
         sodipodi:nodetypes="zcsscsz"
         inkscape:connector-curvature="0"
         id="path2985"
         d="m 411.31698,699.86309 c -49.8102,-78.02369 -78.30419,-243.65316 58.48655,-165.26508 1.43718,0.61504 -2.0856,0.67762 -2.72898,0.30382 -135.87891,-78.94554 -100.53198,90.20404 -56.68196,158.17157 28.57143,44.28572 168.57142,262.85714 -94.28572,162.85714 -1.50165,-0.5424 -0.69994,-8.16718 0.90478,-7.547 239.71544,92.64396 144.11553,-70.49676 94.30533,-148.52045 z"
         style="fill:#000000;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
      <path
         sodipodi:nodetypes="scssscsss"
         inkscape:connector-curvature="0"
         id="path2989"
         d="m 699.18299,605.89916 c -3.85252,-54.40181 -114.73182,-53.82168 -156.29061,-54.25384 -1.32856,-0.022 -0.36044,1.50984 0.18681,1.50222 48.39981,-0.67368 152.45649,0.0865 156.59911,52.55961 4.28572,54.28589 -160.71429,118.79483 -152.14286,157.36626 8.57143,38.57142 111.42857,42.85714 151.42857,42.85714 3.57143,0.35714 4.41833,-4.40812 -0.55003,-4.74693 -58.31047,-3.97642 -206.02141,-8.74237 -128.51312,-71.45528 44.36713,-35.89799 132.98622,-71.52329 129.28213,-123.82918 z"
         style="fill:#000000;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
      <path
         sodipodi:nodetypes="cccc"
         inkscape:connector-curvature="0"
         id="path2991"
         d="m 733.91622,734.95854 c -73.61365,8.33242 -88.58771,-155.09604 -76.90831,-207.20046 -19.51736,87.16418 20.40332,220.49231 77.34839,211.95055 4.16688,-0.75761 3.09545,-5.5077 -0.44008,-4.75009 z"
         style="fill:#000000;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
      <path
         sodipodi:nodetypes="zsccscsz"
         inkscape:connector-curvature="0"
         id="path3763"
         d="m 665.67537,508.00792 c 4.13445,-4.23376 5.65909,-16.14927 5.62971,-15.91986 -0.68185,5.32365 -2.02371,10.79795 -5.42022,15.06936 -2.26421,2.88157 -5.8962,3.59134 -7.48624,3.23957 -4.66074,-0.50154 -4.91608,-4.18437 -5.65193,-8.23608 -0.10462,-0.57606 -0.55251,-2.23088 -2.40042,-0.71228 -2.28916,2.55542 -2.32441,6.5932 -0.85636,8.03346 5.2342,5.13508 12.05102,2.75959 16.18546,-1.47417 z"
         style="fill:#000000;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
      <path
         d="m 493.65967,486.07849 c 117.77719,-29.78972 182.70067,302.04509 48.13304,341.8111 -193.81862,57.27524 -172.17339,-310.43722 -48.13304,-341.8111 z m 13.68655,-7.29079 c -115.06127,1.20709 -170.54197,344.38926 -2.66791,357.14286 182.47821,13.8631 117.72918,-358.34995 2.66791,-357.14286 z"
         style="fill:#000000;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
         id="path3846"
         inkscape:connector-curvature="0" />
    </g>
    <path
       style="fill:none;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 260,532.99207 c 60,100 160,260 160,330"
       id="path3153"
       inkscape:connector-curvature="0"
       transform="translate(0,-10.631225)"
       sodipodi:nodetypes="cc" />
    <g
       transform="matrix(-0.40176277,-0.91574378,0.91574378,-0.40176277,0,0)"
       inkscape:transform-center-x="1.425589"
       inkscape:transform-center-y="2.2692019"
       style="font-size:45px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Iwona;-inkscape-font-specification:Iwona"
       id="text3183">
      <path
         d="m -759.30965,565.75518 0,-0.45 c 0,-6.345 -3.465,-10.575 -8.685,-10.575 -5.26499,0 -8.73,4.23 -8.73,10.575 0,6.34499 3.46501,10.575 8.73,10.575 2.25,0 4.45501,-0.72001 6.3,-2.025 l 0,-1.89 c -2.11499,1.34999 -3.825,1.845 -6.3,1.845 -3.82499,0 -4.77,-3.64501 -4.77,-8.055 l 13.455,0 m -3.96,-1.89 -9.495,0 c 0,-3.6 1.53001,-7.245 4.77,-7.245 3.195,0 4.725,3.645 4.725,7.245"
         style=""
         id="path3124" />
      <path
         d="m -739.77121,569.67018 c 0,-3.555 -3.78,-5.40001 -7.47,-6.3 -2.16,-0.54 -4.5,-1.44001 -4.5,-3.555 0,-1.935 1.98,-3.195 4.14,-3.195 2.385,0 4.77,0.72 6.75,2.025 l 0,-1.89 c -1.98,-1.305 -4.365,-2.025 -6.75,-2.025 -3.91499,0 -7.515,2.385 -7.515,6.03 0,3.28499 3.645,4.815 7.11,5.67 2.385,0.585 4.86,1.845 4.86,4.14 0,2.11499 -2.16,3.42 -4.455,3.42 -2.79,0 -5.49,-0.67501 -7.875,-2.025 l 0,1.89 c 2.385,1.34999 5.085,2.025 7.875,2.025 4.05,0 7.83,-2.43001 7.83,-6.21"
         style=""
         id="path3126" />
      <path
         d="m -724.57527,573.85518 0,-1.35 c -0.72,0.72 -1.575,1.305 -2.61,1.305 -1.62,0 -1.71,-2.11501 -1.71,-4.005 l 0,-12.735 4.32,0 0,-1.89 -4.32,0 0,-6.75 -2.115,0 c 0,3.59999 -2.07,6.975 -5.355,6.975 l 0,1.665 3.96,0 0,12.735 c 0,2.96999 0.945,6.075 3.51,6.075 1.665,0 3.105,-0.90001 4.32,-2.025"
         style=""
         id="path3128" />
    </g>
    <rect
       ry="0"
       rx="0"
       y="527.99518"
       x="-844.39709"
       height="109.72966"
       width="188.108"
       id="rect4875"
       style="fill:none;stroke:#008080;stroke-width:0.99999994;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999977, 1.99999989, 0.99999997, 1.99999989;stroke-dashoffset:0"
       transform="matrix(-0.38507619,-0.92288479,0.92288479,-0.38507619,0,0)" />
  </g>
  <ns1:frame
     id="frame1"
     ns1:refid="rect2993"
     ns1:title="This"
     ns1:sequence="1"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="1000"
     ns1:transition-profile="accelerate-decelerate" />
  <ns1:frame
     id="frame2"
     ns1:refid="rect3765"
     ns1:title="is"
     ns1:sequence="2"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="0"
     ns1:transition-profile="linear" />
  <ns1:frame
     id="frame3"
     ns1:refid="rect3767"
     ns1:title="not"
     ns1:sequence="3"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="0"
     ns1:transition-profile="linear" />
  <ns1:frame
     id="frame4"
     ns1:refid="rect3769"
     ns1:title="a"
     ns1:sequence="4"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="0"
     ns1:transition-profile="linear" />
  <ns1:frame
     id="frame5"
     ns1:refid="rect3771"
     ns1:title="slideshow"
     ns1:sequence="5"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="2000"
     ns1:transition-duration-ms="0"
     ns1:transition-profile="linear" />
  <ns1:frame
     id="frame7"
     ns1:refid="rect3773"
     ns1:title="This"
     ns1:sequence="7"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="1000"
     ns1:transition-profile="accelerate-decelerate" />
  <ns1:frame
     id="frame9"
     ns1:refid="rect3787"
     ns1:title="Sozi"
     ns1:sequence="9"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="5000"
     ns1:transition-duration-ms="1000"
     ns1:transition-profile="accelerate-decelerate" />
  <ns1:frame
     id="frame6"
     ns1:refid="rect4308"
     ns1:title="This is not a slideshow"
     ns1:sequence="6"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1000"
     ns1:transition-duration-ms="1000"
     ns1:transition-profile="accelerate-decelerate" />
  <ns1:frame
     id="frame8"
     ns1:refid="rect4875"
     ns1:title="is"
     ns1:sequence="8"
     ns1:hide="true"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1500"
     ns1:transition-duration-ms="1000"
     ns1:transition-profile="accelerate-decelerate" />
  <script
     ns1:version="12.03-18171759"
     id="sozi-script">
function module(path, body) {
	var names = path.split(&quot;.&quot;),
	    i,
	    current = this;
	for (i = 0; i &lt; names.length; i += 1) {
		if (typeof current[names[i]] === &quot;undefined&quot;) {
			current[names[i]] = {};
		}
		current = current[names[i]];
	}
	body(current);
}

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

/*global module:true sozi:true */

module(&quot;sozi.events&quot;, function (exports) {
    var listeners = {};

    /*
     * Adds a listener for a given event type.
     *
     * The event type is provided as a string by the key parameter.
     * The function to be executed is provided by the handler parameter.
     */
    exports.listen = function (key, handler) {
        var listenersForKey = listeners[key];
        if (!listenersForKey) {
            listenersForKey = listeners[key] = [];
        }
        listenersForKey.push(handler);
    };
    
    /*
     * Fire an event of the given type.
     *
     * All event handlers added for the given event type are
     * executed.
     * Additional arguments provided to this function are passed
     * to the event handlers.
     */
    exports.fire = function (key) {
        var listenersForKey = listeners[key],
            len,
            i,
            args = Array.prototype.slice.call(arguments, 1);
        if (listenersForKey) {
            len = listenersForKey.length;
            for (i = 0; i &lt; len; i += 1) {
                listenersForKey[i].apply(null, args);
            }
        }
    };
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.framenumber&quot;, function (exports) {
    var window = this,
        document = window.document,
        group, text, circle, textNode,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    
    function adjust() {
        var textBBox = text.getBBox(),
            d = Math.max(textBBox.width, textBBox.height) * 0.75,
            t = d * 1.25;
        circle.setAttribute(&quot;r&quot;, d);
        group.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + t + &quot;,&quot; + t + &quot;)&quot;);
    }
    
    function onDisplayReady() {
        group = document.createElementNS(SVG_NS, &quot;g&quot;);
        text = document.createElementNS(SVG_NS, &quot;text&quot;);
        circle = document.createElementNS(SVG_NS, &quot;circle&quot;);
        
        group.setAttribute(&quot;id&quot;, &quot;sozi-framenumber&quot;);

        circle.setAttribute(&quot;cx&quot;, 0);
        circle.setAttribute(&quot;cy&quot;, 0);
        group.appendChild(circle);
        
        textNode = document.createTextNode(sozi.location.getFrameIndex() + 1);
        text.setAttribute(&quot;text-anchor&quot;, &quot;middle&quot;);
        text.setAttribute(&quot;dominant-baseline&quot;, &quot;central&quot;);
        text.setAttribute(&quot;x&quot;, 0);
        text.setAttribute(&quot;y&quot;, 0);
        text.appendChild(textNode);
        group.appendChild(text);
        
        document.documentElement.appendChild(group);
        
        adjust();
    }

    function onFrameChange(index) {
        textNode.nodeValue = index + 1;
    }
    
	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.framelist&quot;, function (exports) {
	var window = this,
        document = window.document,
        svgRoot,
        tocGroup,
        linksBox,
        tocHeight = 0,
        MARGIN = 5,
        translateXHidden,
        translateXVisible,
        translateXStart,
        translateXEnd,
        translateX,
        animator,
        ANIMATION_TIME_MS = 300,
        ANIMATION_PROFILE = &quot;decelerate&quot;,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

	function onMouseOut(evt) {
        var rel = evt.relatedTarget;
        while (rel !== tocGroup &amp;&amp; rel !== svgRoot) {
            rel = rel.parentNode;
        }
        if (rel === svgRoot) {
            exports.hide();
            sozi.player.restart();
            evt.stopPropagation();
        }
    }

	function onClickArrowUp(evt) {
        var ty = linksBox.getCTM().f;
        if (ty &lt;= -window.innerHeight / 2) {
            ty += window.innerHeight / 2;
        } else if (ty &lt; 0) {
            ty = 0;
        }
        linksBox.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
	}

	function onClickArrowDown(evt) {
        var ty = linksBox.getCTM().f;
        if (ty + tocHeight &gt;= window.innerHeight * 3 / 2) {
            ty -= window.innerHeight / 2;
        } else if (ty + tocHeight &gt; window.innerHeight + 2 * MARGIN) {
            ty = window.innerHeight - tocHeight - 4 * MARGIN;
        }
        linksBox.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
    }	

    function onAnimationStep(progress) {
        var profileProgress = sozi.animation.profiles[ANIMATION_PROFILE](progress),
            remaining = 1 - profileProgress;
        translateX = translateXEnd * profileProgress + translateXStart * remaining;
        tocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,0)&quot;);
    }
    
    function onAnimationDone() {
        // Empty
    }
    
    /*
     * Create a function that responds to clicks on frame list entries.
     */
    function makeClickHandler(index) {
        return function (evt) {
            sozi.player.previewFrame(index);
            evt.stopPropagation();
        };
    }
    
    /*
     * The default event handler, to prevent event propagation
     * through the frame list.
     */
    function defaultEventHandler(evt) {
	    evt.stopPropagation();
    }
    
    /*
     * Adds a table of contents to the document.
     *
     * The table of contents is a rectangular region with the list of frame titles.
     * Clicking on a title moves the presentation to the corresponding frame.
     *
     * The table of contents is hidden by default.
     */
    function onDisplayReady() {
        var tocBackground = document.createElementNS(SVG_NS, &quot;rect&quot;),
            tocUp = document.createElementNS(SVG_NS, &quot;path&quot;),
            tocDown = document.createElementNS(SVG_NS, &quot;path&quot;),
            tocWidth = 0,
            textWidth,
            frameCount = sozi.document.frames.length,
            frameIndex = sozi.location.getFrameIndex(),
            i,
            text;

		svgRoot = document.documentElement;

        tocGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        tocGroup.setAttribute(&quot;id&quot;, &quot;sozi-toc&quot;);
        svgRoot.appendChild(tocGroup);

        linksBox = document.createElementNS(SVG_NS, &quot;g&quot;);
        tocGroup.appendChild(linksBox);
    
        tocBackground.setAttribute(&quot;id&quot;, &quot;sozi-toc-background&quot;);
        tocBackground.setAttribute(&quot;x&quot;, MARGIN);
        tocBackground.setAttribute(&quot;y&quot;, MARGIN);
        tocBackground.setAttribute(&quot;rx&quot;, MARGIN);
        tocBackground.setAttribute(&quot;ry&quot;, MARGIN);
        tocBackground.addEventListener(&quot;click&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mouseout&quot;, onMouseOut, false);
        linksBox.appendChild(tocBackground);

        for (i = 0; i &lt; frameCount; i += 1) {
            text = document.createElementNS(SVG_NS, &quot;text&quot;);
            text.appendChild(document.createTextNode(sozi.document.frames[i].title));
            linksBox.appendChild(text);

            if (i === frameIndex) {
                text.setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
            }
                     
            textWidth = text.getBBox().width;
            tocHeight += text.getBBox().height;
            if (textWidth &gt; tocWidth) {
                tocWidth = textWidth;
            }

            text.setAttribute(&quot;x&quot;, 2 * MARGIN);
            text.setAttribute(&quot;y&quot;, tocHeight + MARGIN);
            text.addEventListener(&quot;click&quot;, makeClickHandler(i), false);
            text.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        }

        tocUp.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocUp.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (5 * MARGIN) + 
                           &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                           &quot; l-&quot; + (2 * MARGIN) + &quot;,-&quot; + (3 * MARGIN) +
                           &quot; z&quot;);
        tocUp.addEventListener(&quot;click&quot;, onClickArrowUp, false);
        tocUp.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocGroup.appendChild(tocUp);
      
        tocDown.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocDown.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (7 * MARGIN) + 
                             &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                             &quot; l-&quot; + (2 * MARGIN) + &quot;,&quot; + (3 * MARGIN) +
                             &quot; z&quot;);
        tocDown.addEventListener(&quot;click&quot;, onClickArrowDown, false);
        tocDown.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);      
        tocGroup.appendChild(tocDown);

        tocBackground.setAttribute(&quot;width&quot;, tocWidth + 7 * MARGIN);
        tocBackground.setAttribute(&quot;height&quot;, tocHeight + 2 * MARGIN);
        
        translateXHidden = -tocWidth - 9 * MARGIN;
        translateXVisible = 0;
        translateX = translateXEnd = translateXHidden;
        
        tocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateXHidden + &quot;,0)&quot;);
        animator = new sozi.animation.Animator(onAnimationStep, onAnimationDone);
    }

	/*
	 * Highlight the current frame title in the frame list.
	 *
	 * This handler is called on each frame change,
	 * even when the frame list is hidden.
	 */
    function onFrameChange(index) {
        var current = document.getElementsByClassName(&quot;sozi-toc-current&quot;),
            textElements = linksBox.getElementsByTagName(&quot;text&quot;),
            i;
        for (i = 0; i &lt; current.length; i += 1) {
            current[i].removeAttribute(&quot;class&quot;);
        }
        textElements[index].setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
    }
    
    /*
     * Makes the table of contents visible.
     */
    exports.show = function () {
        translateXStart = translateX;
        translateXEnd = translateXVisible;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Makes the table of contents invisible.
     */
    exports.hide = function () {
        translateXStart = translateX;
        translateXEnd = translateXHidden;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Returns true if the table of contents is visible, false otherwise.
     */
    exports.isVisible = function () {
        return translateXEnd === translateXVisible;
    };

	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;cleanup&quot;, exports.hide);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

/*global module:true sozi:true */

module(&quot;sozi.animation&quot;, function (exports) {
    var window = this,
        TIME_STEP_MS = 40,
        animators = [],
        timer,
        requestAnimationFrame = window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame;

    /*
     * This function is called periodically and triggers the
     * animation steps in all animators managed by this module.
     *
     * If all animators are removed from the list of animators
     * managed by this module, then the periodic calling is disabled.
     *
     * This function can be called either through requestAnimationFrame()
     * if the browser supports it, or through setInterval().
     */
    function loop(timestamp) {
        var i;
        if (animators.length &gt; 0) {
            // If there is at least one animator,
            // and if the browser provides animation frames,
            // schedule this function to be called again in the next frame.
            if (requestAnimationFrame) {
                requestAnimationFrame(loop);
            }

            // Step all animators
            for (i = 0; i &lt; animators.length; i += 1) {
                animators[i].step(timestamp);
            }
        }
        else {
            // If all animators have been removed,
            // and if this function is called periodically
            // through setInterval, disable the periodic calling.
            if (!requestAnimationFrame) {
                window.clearInterval(timer);
            }
        }
    }
    
    /*
     * Start the animation loop.
     *
     * This function delegates the periodic update of all animators
     * to the loop() function, either through requestAnimationFrame()
     * if the browser supports it, or through setInterval().
     */
    function start() {
        if (requestAnimationFrame) {
            requestAnimationFrame(loop);
        }
        else {
            timer = window.setInterval(function () {
                loop(Date.now());
            }, TIME_STEP_MS);
        }
    }
    
    /*
     * Add a new animator object to the list of animators managed
     * by this module.
     *
     * If the animator list was empty before calling this function,
     * then the animation loop is started.
     */
    function addAnimator(animator) {
        animators.push(animator);
        if (animators.length === 1) {
            start();
        }
    }
    
    /*
     * Remove the given animator from the list of animators
     * managed by this module.
     */
    function removeAnimator(animator) {
        animators.splice(animators.indexOf(animator), 1);
    }
    
    /*
     * Construct a new animator.
     *
     * Parameters:
     * - onStep: the function to call on each animation step
     * - onDone: the function to call when the animation time is elapsed
     *
     * The onStep() function is expected to have the following parameters:
     *  - progress: a number between 0 and 1 (included) corresponding to
     *    the elapsed fraction of the total duration
     *  - data: an optional object passed to the application-specific animation code
     *
     * The new animator is initialized in the &quot;stopped&quot; state.
     */
    exports.Animator = function (onStep, onDone) {
        this.onStep = onStep;
        this.onDone = onDone;

        this.durationMs = 0;
        this.data = {};
        this.initialTime = 0;
        this.started = false;
    };

    /*
     * Start the current animator.
     *
     * Parameters:
     *  - durationMs: the animation duration, in milliseconds
     *  - data: an object to pass to the onStep function
     *
     * The current animator is added to the list of animators managed
     * by this module and is put in the &quot;started&quot; state.
     * It will be removed from the list automatically when the given duration
     * has elapsed.
     *
     * The onStep() function is called once before starting the animation.
     */
    exports.Animator.prototype.start = function (durationMs, data) {
        this.durationMs = durationMs;
        this.data = data;
        this.initialTime = Date.now();
        this.onStep(0, this.data);

        if (!this.started) {
            this.started = true;
            addAnimator(this);
        }
    };

    /*
     * Stop the current animator.
     *
     * The current animator is removed from the list of animators managed
     * by this module and is put in the &quot;stopped&quot; state.
     */
    exports.Animator.prototype.stop = function () {
        if (this.started) {
            removeAnimator(this);
            this.started = false;
        }
    };

    /*
     * Perform one animation step.
     *
     * This function is called automatically by the loop() function.
     * It calls the onStep() function of this animator.
     * If the animation duration has elapsed, the onDone() function of
     * the animator is called.
     */
    exports.Animator.prototype.step = function (timestamp) {
        var elapsedTime = timestamp - this.initialTime;
        if (elapsedTime &gt;= this.durationMs) {
            this.stop();
            this.onStep(1, this.data);
            this.onDone();
        } else {
            this.onStep(elapsedTime / this.durationMs, this.data);
        }
    };

    /*
     * The acceleration profiles.
     *
     * Each profile is a function that operates in the interval [0, 1]
     * and produces a result in the same interval.
     *
     * These functions are meant to be called in onStep() functions
     * to transform the progress indicator according to the desired
     * acceleration effect.
     */
    exports.profiles = {
        &quot;linear&quot;: function (x) {
            return x;
        },

        &quot;accelerate&quot;: function (x) {
            return Math.pow(x, 3);
        },

        &quot;strong-accelerate&quot;: function (x) {
            return Math.pow(x, 5);
        },

        &quot;decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 3);
        },

        &quot;strong-decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 5);
        },

        &quot;accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 3) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 5) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 2)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 3)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        }
    };
});


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.display&quot;, function (exports) {
    var window = this,
        document = window.document,
        initialBBox,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

    exports.layers = {};

    /*
     * Initializes the current Display.
     *
     * This method prepares the DOM representation of the current SVG document.
     * All the image is embedded into a global &quot;g&quot; element on which transformations will be applied.
     * A clipping rectangle is added.
     *
     * This method must be called when the document is ready to be manipulated.
     */
    function onDocumentReady() {
        var l, svgClippedGroup, svgClipPath, idLayer,
            svgRoot = document.documentElement; // TODO check SVG tag
            
        initialBBox = svgRoot.getBBox();
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        
        // Initialize display geometry for all layers
        for (l = 0; l &lt; sozi.document.idLayerList.length; l += 1) {
            idLayer = sozi.document.idLayerList[l];
            exports.layers[idLayer] = {
                geometry: {
                    cx: 0,
                    cy: 0,
                    width: 1,
                    height: 1,
                    rotate: 0,
                    clip: true
                },
                svgClipRect: document.createElementNS(SVG_NS, &quot;rect&quot;),
                svgLayer: document.getElementById(idLayer)
            };

            // Add a clipping path
            svgClipPath = document.createElementNS(SVG_NS, &quot;clipPath&quot;);
            svgClipPath.setAttribute(&quot;id&quot;, &quot;sozi-clip-path-&quot; + idLayer);
            svgClipPath.appendChild(exports.layers[idLayer].svgClipRect);
            svgRoot.appendChild(svgClipPath);

            // Create a group that will support the clipping operation
            // and move the layer group into that new group
            svgClippedGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            svgClippedGroup.setAttribute(&quot;clip-path&quot;, &quot;url(#sozi-clip-path-&quot; + idLayer + &quot;)&quot;);
            
            // Adding the layer group to the clipped group must preserve layer ordering
            svgRoot.insertBefore(svgClippedGroup, exports.layers[idLayer].svgLayer);
            svgClippedGroup.appendChild(exports.layers[idLayer].svgLayer);
        }

        sozi.events.fire(&quot;displayready&quot;);
    }

    /*
     * Resizes the SVG document to fit the browser window.
     */
    function resize() {
        var svgRoot = document.documentElement;
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        exports.update();
    }

    /*
     * Returns an object with the geometrical properties of the current display.
     *
     * Attributes of the returned object :
     *    - x, y: the location of the top-left corner, in pixels
     *    - width, height: the size of the visible area, in pixels
     *    - scale: the scale factor to apply to the SVG document so that is fits the visible area
     */
    function getFrameGeometry(idLayer) {
        var g = exports.layers[idLayer].geometry,
            result = {};
        result.scale = Math.min(window.innerWidth / g.width, window.innerHeight / g.height);
        result.width = g.width * result.scale;
        result.height = g.height * result.scale;
        result.x = (window.innerWidth - result.width) / 2;
        result.y = (window.innerHeight - result.height) / 2;
        return result;
    }

    /*
     * Returns the geometrical properties of the frame that can be
     * created from a given element.
     *
     * If the element is a rectangle, the properties of the frames are based
     * on the geometrical properties of the rectangle.
     * Otherwise, the properties of the frame are based on the bounding box
     * of the given element.
     *
     * Parameters:
     *    - svgElement: an element from the SVG DOM
     *
     * Returns:
     *    - The default size, translation and rotation for the given element 
     */
    exports.getElementGeometry = function (svgElement) {
        var x, y, w, h, b, c,
            matrix = svgElement.getCTM(),
            scale = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);

        if (svgElement.nodeName === &quot;rect&quot;) {
            x = svgElement.x.baseVal.value;
            y = svgElement.y.baseVal.value;
            w = svgElement.width.baseVal.value;
            h = svgElement.height.baseVal.value;
        } else {
            b = svgElement.getBBox();
            x = b.x;
            y = b.y;
            w = b.width;
            h = b.height;
        }

        c = document.documentElement.createSVGPoint();
        c.x = x + w / 2;
        c.y = y + h / 2;
        c = c.matrixTransform(matrix);

        return {
            cx: c.x,
            cy: c.y,
            width: w * scale,
            height: h * scale,
            rotate: Math.atan2(matrix.b, matrix.a) * 180 / Math.PI
        };
    };

    /*
     * Returns the geometrical properties of the SVG document
     *
     * Returns:
     *    - The default size, translation and rotation for the document's bounding box
     */
    exports.getDocumentGeometry = function () {
        var idLayer,
            result = { layers: {} },
            value = {
                geometry: {
                    cx: initialBBox.x + initialBBox.width / 2,
                    cy: initialBBox.y + initialBBox.height / 2,
                    width: initialBBox.width,
                    height: initialBBox.height,
                    rotate: 0,
                    clip: false
                }
            };
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                result.layers[idLayer] = value;
            }
        }
        return result;
    };

    /*
     * Apply geometrical transformations to the image according to the current
     * geometrical attributes of this Display.
     *
     * This method is called automatically when the window is resized.
     */
    exports.update = function () {
        var idLayer, fg, lg, cr,
            translateX, translateY;

        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                lg = exports.layers[idLayer].geometry;
                fg = getFrameGeometry(idLayer);
                
                translateX = -lg.cx + lg.width / 2  + fg.x / fg.scale;
                translateY = -lg.cy + lg.height / 2 + fg.y / fg.scale;

                // Compute and apply the geometrical transformation to the layer group
                exports.layers[idLayer].svgLayer.setAttribute(&quot;transform&quot;,
                    &quot;scale(&quot; + fg.scale + &quot;)&quot; +
                    &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot; +
                    &quot;rotate(&quot; + (-lg.rotate) + ',' + lg.cx + &quot;,&quot; + lg.cy + &quot;)&quot;
                );

                // Adjust the location and size of the clipping rectangle and the frame rectangle
                cr = exports.layers[idLayer].svgClipRect;
                cr.setAttribute(&quot;x&quot;, lg.clip ? fg.x : 0);
                cr.setAttribute(&quot;y&quot;, lg.clip ? fg.y : 0);
                cr.setAttribute(&quot;width&quot;, lg.clip ? fg.width : window.innerWidth);
                cr.setAttribute(&quot;height&quot;, lg.clip ? fg.height : window.innerHeight);
            }
        }
    };

    /*
     * Transform the SVG document to show the given frame.
     *
     * Parameters:
     *    - frame: the frame to show
     */
    exports.showFrame = function (frame) {
        var idLayer, lg, fg, attr;
        for (idLayer in frame.layers) {
            if (frame.layers.hasOwnProperty(idLayer)) {
                fg = frame.layers[idLayer].geometry;
                lg = exports.layers[idLayer].geometry;
                for (attr in fg) {
                    if (fg.hasOwnProperty(attr)) {
                        lg[attr] = fg[attr];
                    }
                }
            }
        }
        exports.update();
    };

    /*
     * Apply an additional translation to the SVG document based on onscreen coordinates.
     *
     * Parameters:
     *    - deltaX: the horizontal displacement, in pixels
     *    - deltaY: the vertical displacement, in pixels
     */
    exports.drag = function (deltaX, deltaY) {
        var idLayer, lg, fg,
            angleRad;
        
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                lg = exports.layers[idLayer].geometry;
                fg = getFrameGeometry(idLayer);
                angleRad = lg.rotate * Math.PI / 180;
                lg.cx -= (deltaX * Math.cos(angleRad) - deltaY * Math.sin(angleRad)) / fg.scale;
                lg.cy -= (deltaX * Math.sin(angleRad) + deltaY * Math.cos(angleRad)) / fg.scale;
                lg.clip = false;
            }
        }
        exports.update();
    };

    /*
     * Zooms the display with the given factor.
     *
     * The zoom is centered around (x, y) with respect to the center of the display area.
     */
    exports.zoom = function (factor, x, y) {
        var idLayer,
            deltaX = (1 - factor) * (x - window.innerWidth / 2),
            deltaY = (1 - factor) * (y - window.innerHeight / 2);
            
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                exports.layers[idLayer].geometry.width /= factor;
                exports.layers[idLayer].geometry.height /= factor;
            }
        }
        
        exports.drag(deltaX, deltaY);
    };

    /*
     * Rotate the display with the given angle.
     *
     * The rotation is centered around the center of the display area.
     */
    exports.rotate = function (angle) {
        var idLayer;
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                exports.layers[idLayer].geometry.rotate += angle;
                exports.layers[idLayer].geometry.rotate %= 360;
            }
        }
        exports.update();
    };
    
    sozi.events.listen(&quot;documentready&quot;, onDocumentReady);
    window.addEventListener(&quot;resize&quot;, resize, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 * @depend animation.js
 * @depend display.js
 */

/*global module:true sozi:true */

module(&quot;sozi.player&quot;, function (exports) {
    var display = sozi.display,
        window = this,
        animator,
        nextFrameTimeout,
        DEFAULT_DURATION_MS = 500,
        DEFAULT_ZOOM_PERCENT = -10,
        DEFAULT_PROFILE = &quot;linear&quot;,
        sourceFrameIndex = 0,
        currentFrameIndex = 0,
        playing = false,
        waiting = false;

    /*
     * Event handler: animation step.
     *
     * This method is called periodically by animator after the animation
     * has been started, and until the animation time is elapsed.
     *
     * Parameter data provides the following information:
     *    - initialState and finalState contain the geometrical properties of the display
     *      at the start and end of the animation.
     *    - profile is a reference to the speed profile function to use.
     *    - zoomWidth and zoomHeight are the parameters of the zooming polynomial if the current
     *      animation has a non-zero zooming effect.
     *
     * Parameter progress is a float number between 0 (start of the animation)
     * and 1 (end of the animation).
     */
    function onAnimationStep(progress, data) {
        var profileProgress, profileRemaining,
            idLayer, lg, attr, ps;

        for (idLayer in data) {
            if (data.hasOwnProperty(idLayer)) {
                lg = display.layers[idLayer].geometry;
                
                profileProgress = data[idLayer].profile(progress);
                profileRemaining = 1 - profileProgress;
                
                for (attr in data[idLayer].initialState) {
                    if (data[idLayer].initialState.hasOwnProperty(attr)) {
                        if (typeof data[idLayer].initialState[attr] === &quot;number&quot; &amp;&amp; typeof data[idLayer].finalState[attr] === &quot;number&quot;) {
                            lg[attr] = data[idLayer].finalState[attr] * profileProgress + data[idLayer].initialState[attr] * profileRemaining;
                        }
                    }
                }

                if (data[idLayer].zoomWidth &amp;&amp; data[idLayer].zoomWidth.k !== 0) {
                    ps = progress - data[idLayer].zoomWidth.ts;
                    lg.width = data[idLayer].zoomWidth.k * ps * ps + data[idLayer].zoomWidth.ss;
                }

                if (data[idLayer].zoomHeight &amp;&amp; data[idLayer].zoomHeight.k !== 0) {
                    ps = progress - data[idLayer].zoomHeight.ts;
                    lg.height = data[idLayer].zoomHeight.k * ps * ps + data[idLayer].zoomHeight.ss;
                }

                lg.clip = data[idLayer].finalState.clip;
            }
        }
        
        display.update();
    }

    /*
     * Starts waiting before moving to the next frame.
     *
     * It the current frame has a timeout set, this method
     * will register a timer to move to the next frame automatically
     * after the specified time.
     *
     * If the current frame is the last, the presentation will
     * move to the first frame.
     */
    function waitTimeout() {
        var index;
        if (sozi.document.frames[currentFrameIndex].timeoutEnable) {
            waiting = true;
            index = (currentFrameIndex + 1) % sozi.document.frames.length;
            nextFrameTimeout = window.setTimeout(function () {
                    exports.moveToFrame(index);
                },
                sozi.document.frames[currentFrameIndex].timeoutMs
            );
        }
    }

    /*
     * Event handler: animation done.
     *
     * This method is called by animator when the current animation is finished.
     *
     * If the animation was a transition in the normal course of the presentation,
     * then we call the waitTimeout method to process the timeout property of the current frame.
     */
    function onAnimationDone() {
        sourceFrameIndex = currentFrameIndex;
        if (playing) {
            waitTimeout();
        }
    }

    /*
     * Starts the presentation from the given frame index (0-based).
     *
     * This method sets the &quot;playing&quot; flag, shows the desired frame
     * and calls waitTimeout.
     */
    exports.startFromIndex = function (index) {
        playing = true;
        waiting = false;
        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.showFrame(sozi.document.frames[index]);
        waitTimeout();
    };

    exports.restart = function () {
        exports.startFromIndex(currentFrameIndex);
    };

    /*
     * Stops the presentation.
     *
     * This method clears the &quot;playing&quot;.
     * If the presentation was in &quot;waiting&quot; mode due to a timeout
     * in the current frame, then it stops waiting.
     * The current animation is stopped in its current state.
     */
    exports.stop = function () {
        animator.stop();
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        playing = false;
        sourceFrameIndex = currentFrameIndex;
    };

    function getZoomData(zoomPercent, s0, s1) {
        var result = {
                ss: ((zoomPercent &lt; 0) ? Math.max(s0, s1) : Math.min(s0, s1)) * (100 - zoomPercent) / 100,
                ts: 0.5,
                k: 0
            },
            a, b, c, d, u, v;

        if (zoomPercent !== 0) {
            a = s0 - s1;
            b = s0 - result.ss;
            c = s1 - result.ss;

            if (a !== 0) {
                d = Math.sqrt(b * c);

                u = (b - d) / a;
                v = (b + d) / a;

                result.ts = (u &gt; 0 &amp;&amp; u &lt;= 1) ? u : v;
            }

            result.k = b / result.ts / result.ts;
        }

        return result;
    }

    /*
     * Jump to a frame with the given index (0-based).
     *
     * This method does not animate the transition from the current
     * state of the display to the desired frame.
     *
     * The presentation is stopped: if a timeout has been set for the
     * target frame, it will be ignored.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.jumpToFrame = function (index) {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);

        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.showFrame(sozi.document.frames[index]);

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Returns an associative array where keys are layer names
     * and values are objects in the form { initialState: finalState: profile: zoomWidth: zoomHeight:}
     */
    function getAnimationData(initialState, finalState, zoomPercent, profile) {
        var g, idLayer, zp,
            data = {};
        
        for (idLayer in initialState.layers) {
            if (initialState.layers.hasOwnProperty(idLayer)) {
                data[idLayer] = {
                    initialState: {},
                    finalState: {}
                };
                
                data[idLayer].profile = profile || finalState.layers[idLayer].transitionProfile;

                // Copy all properties of given final state
                for (g in initialState.layers[idLayer].geometry) {
                    if (initialState.layers[idLayer].geometry.hasOwnProperty(g)) {
                        data[idLayer].initialState[g] = initialState.layers[idLayer].geometry[g];
                        // If the current layer is referenced in final state, copy the final properties
                        // else, copy initial state to final state for the current layer. 
                        if (finalState.layers.hasOwnProperty(idLayer)) {
                            data[idLayer].finalState[g] = finalState.layers[idLayer].geometry[g];
                        }
                        else {
                            data[idLayer].finalState[g] = initialState.layers[idLayer].geometry[g];
                        }
                    }
                }

                // Keep the smallest angle difference between initial state and final state
                data[idLayer].initialState.rotate = (data[idLayer].initialState.rotate - 180) % 360 + 180;
                data[idLayer].finalState.rotate = (data[idLayer].finalState.rotate - 180) % 360 + 180;
        
                if (data[idLayer].finalState.rotate - data[idLayer].initialState.rotate &gt; 180) {
                    data[idLayer].finalState.rotate -= 360;
                }
                else if (data[idLayer].finalState.rotate - data[idLayer].initialState.rotate &lt; -180) {
                    data[idLayer].initialState.rotate -= 360;
                }

                zp = zoomPercent || finalState.layers[idLayer].transitionZoomPercent;
                
                if (zp &amp;&amp; finalState.layers.hasOwnProperty(idLayer)) {
                    data[idLayer].zoomWidth = getZoomData(zp,
                        initialState.layers[idLayer].geometry.width,
                        finalState.layers[idLayer].geometry.width);
                    data[idLayer].zoomHeight = getZoomData(zp,
                        initialState.layers[idLayer].geometry.height,
                        finalState.layers[idLayer].geometry.height);
                }
            }
        }
        
        return data;
    }
    
    exports.previewFrame = function (index) {
        currentFrameIndex = index;
        animator.start(DEFAULT_DURATION_MS, 
            getAnimationData(display, sozi.document.frames[index],
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]));
        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to a frame with the given index (0-based).
     *
     * This method animates the transition from the current
     * state of the display to the desired frame.
     *
     * If the given frame index corresponds to the next frame in the list,
     * the transition properties of the next frame are used.
     * Otherwise, default transition properties are used.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.moveToFrame = function (index) {
        var durationMs, zoomPercent, profile;

        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }

        if (index === (currentFrameIndex + 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[index].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
        }
        else {
            durationMs = DEFAULT_DURATION_MS;
            zoomPercent = DEFAULT_ZOOM_PERCENT;
            profile = sozi.animation.profiles[DEFAULT_PROFILE];
        }

        sozi.events.fire(&quot;cleanup&quot;);

        playing = true;
        currentFrameIndex = index;

        animator.start(durationMs, getAnimationData(display, sozi.document.frames[index], zoomPercent, profile));

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to the first frame of the presentation.
     */
    exports.moveToFirst = function () {
        exports.moveToFrame(0);
    };

    /*
     * Jumps to the previous frame
     */
    exports.jumpToPrevious = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &lt;= currentFrameIndex) {
            index -= 1;
        }
        if (index &gt;= 0) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the previous frame.
     */
    exports.moveToPrevious = function () {
        var index = currentFrameIndex,
            frame;

        for (index -= 1; index &gt;= 0; index -= 1) {
            frame = sozi.document.frames[index];
            if (!frame.timeoutEnable || frame.timeoutMs !== 0) {
                exports.moveToFrame(index);
                break;
            }
        }
    };

    /*
     * Jumps to the next frame
     */
    exports.jumpToNext = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &gt;= currentFrameIndex) {
            index += 1;
        }
        if (index &lt; sozi.document.frames.length) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the next frame.
     */
    exports.moveToNext = function () {
        if (currentFrameIndex &lt; sozi.document.frames.length - 1 || sozi.document.frames[currentFrameIndex].timeoutEnable) {
            exports.moveToFrame((currentFrameIndex + 1) % sozi.document.frames.length);
        }
    };

    /*
     * Moves to the last frame of the presentation.
     */
    exports.moveToLast = function () {
        exports.moveToFrame(sozi.document.frames.length - 1);
    };

    /*
     * Restores the current frame.
     *
     * This method restores the display to fit the current frame,
     * e.g. after the display has been zoomed or dragged.
     */
    exports.moveToCurrent = function () {
        exports.moveToFrame(currentFrameIndex);
    };

    /*
     * Shows all the document in the browser window.
     */
    exports.showAll = function () {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);
        animator.start(DEFAULT_DURATION_MS, 
            getAnimationData(display, display.getDocumentGeometry(),
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]
            )
        );
    };

    /*
     * Event handler: display ready.
     */
    function onDisplayReady() {
        exports.startFromIndex(sozi.location.getFrameIndex());
    }    

    animator = new sozi.animation.Animator(onAnimationStep, onAnimationDone);

    sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend player.js
 * @depend display.js
 */

/*global module:true sozi:true */

module(&quot;sozi.actions&quot;, function (exports) {
    var player = sozi.player,
        display = sozi.display,
        window = this,
        document = window.document,
        DRAG_BUTTON = 0, // Left button
        TOC_BUTTON = 1, // Middle button
        SCALE_FACTOR = 1.05,
        ROTATE_STEP = 5,
        dragButtonIsDown = false,
        dragged = false,
        dragClientX = 0,
        dragClientY = 0;
    
    /*
     * Zooms the display in the given direction.
     *
     * Only the sign of direction is used:
     *    - zoom in when direction &gt; 0
     *    - zoom out when direction &lt;= 0
     *
     * The scaling is centered around point (x, y).
     */
    function zoom(direction, x, y) {
        player.stop();
        display.zoom(direction &gt; 0 ? SCALE_FACTOR : 1 / SCALE_FACTOR, x, y);
    }
    
    /*
     * Rotate the display in the given direction.
     *
     * Only the sign of direction is used:
     *    - rotate anticlockwise when direction &gt; 0
     *    - rotate clockwise when direction &lt;= 0
     */
    function rotate(direction) {
        player.stop();
        display.rotate(direction &gt; 0 ? ROTATE_STEP : -ROTATE_STEP);
    }
    
    /*
     * Show/hide the frame list.
     *
     * The presentation stops when the frame list is showed,
     * and restarts when the frame list is hidden.
     */
    function toggleFrameList() {
        if (sozi.framelist.isVisible()) {
            sozi.framelist.hide();
            player.restart();
        } else {
            player.stop();
            sozi.framelist.show();
        }
    }

    /*
     * Event handler: mouse down.
     *
     * When the left button is pressed, we register the current coordinates
     * in case the mouse will be dragged. Flag &quot;dragButtonIsDown&quot; is set until
     * the button is released (onMouseUp). This flag is used by onMouseMove.
     *
     * When the middle button is pressed, the table of contents is shown or hidden.
     */
    function onMouseDown(evt) {
        if (evt.button === DRAG_BUTTON) {
            dragButtonIsDown = true;
            dragged = false;
            dragClientX = evt.clientX;
            dragClientY = evt.clientY;
        } else if (evt.button === TOC_BUTTON) {
            toggleFrameList();
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse move.
     *
     * If the left mouse button is down, then the mouse move is a drag action.
     * This method computes the displacement since the button was pressed or
     * since the last move, and updates the reference coordinates for the next move.
     */
    function onMouseMove(evt) {
        if (dragButtonIsDown) {
            player.stop();
            dragged = true;
            sozi.events.fire(&quot;cleanup&quot;);
            display.drag(evt.clientX - dragClientX, evt.clientY - dragClientY);
            dragClientX = evt.clientX;
            dragClientY = evt.clientY;
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse up.
     *
     * Releasing the left button resets the &quot;dragButtonIsDown&quot; flag.
     */
    function onMouseUp(evt) {
        if (evt.button === DRAG_BUTTON) {
            dragButtonIsDown = false;
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: context menu (i.e. right click).
     *
     * Right click goes one frame back.
     *
     * There is no &quot;click&quot; for the right mouse button and the menu can't
     * be prevented in &quot;onMouseDown&quot;.
     */
    function onContextMenu(evt) {
        player.moveToPrevious();
        evt.stopPropagation();
        evt.preventDefault();
    }

    /*
     * Event handler: mouse click.
     *
     * Left-click moves the presentation to the next frame.
     *
     * No &quot;click&quot; event is generated for the middle button in Firefox.
     * See &quot;onMouseDown&quot; for middle click handling.
     *
     * Dragging the mouse produces a &quot;click&quot; event when the button is released.
     * If flag &quot;dragged&quot; was set by &quot;onMouseMove&quot;, then the click event is the result
     * of a drag action.
     */
    function onClick(evt) {
        if (!dragged &amp;&amp; evt.button !== TOC_BUTTON) {
            player.moveToNext();
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse wheel.
     *
     * Rolling the mouse wheel stops the presentation and zooms the current display.
     */
    function onWheel(evt) {
        var delta = 0;
        if (!evt) {
            evt = window.event;
        }
        if (evt.wheelDelta) { // IE and Opera
            delta = evt.wheelDelta; 
            if (window.opera) { // Opera
                delta = -delta;
            }
        } else if (evt.detail) { // Mozilla
            delta = -evt.detail;
        }

        if (delta !== 0) {
            if (evt.shiftKey) {
                rotate(delta);
            } else {
                zoom(delta, evt.clientX, evt.clientY);
            }
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /*
     * Event handler: key press.
     *
     * Keyboard handling is split into two methods: onKeyPress and onKeyDown
     * in order to get the same behavior in Mozilla and Webkit.
     *
     * This method handles character keys &quot;+&quot;, &quot;-&quot;, &quot;=&quot;, &quot;F&quot; and &quot;T&quot;.
     */
    function onKeyPress(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.charCode) {
        case 43: // +
            zoom(1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 45: // -
            zoom(-1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 61: // =
            player.moveToCurrent();
            break;
        case 70: // F
        case 102: // f
            player.showAll();
            break;
        case 84: // T
        case 116: // t
            toggleFrameList();
            break;
        case 82: // R
            rotate(-1);
            break;
        case 114: // r
            rotate(1);
            break;
        }

        evt.stopPropagation();
    }

    /*
     * Event handler: key down.
     *
     * Keyboard handling is split into two methods: onKeyPress and onKeyDown
     * in order to get the same behavior in Mozilla and Webkit.
     *
     * This method handles navigation keys (arrows, page up/down, home, end)
     * and the space and enter keys.
     */
    function onKeyDown(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.keyCode) {
        case 36: // Home
            player.moveToFirst();
            break;
        case 35: // End
            player.moveToLast();
            break;
        case 38: // Arrow up
            player.jumpToPrevious();
            break;
        case 33: // Page up
        case 37: // Arrow left
            player.moveToPrevious();
            break;
        case 40: // Arrow down
            player.jumpToNext();
            break;
        case 34: // Page down
        case 39: // Arrow right
        case 13: // Enter
        case 32: // Space
            player.moveToNext();
            break;
        }
        evt.stopPropagation();
    }

    function onLoad() {
        var svgRoot = document.documentElement;

        // TODO also use shift-click as an alternative for middle-click
        svgRoot.addEventListener(&quot;click&quot;, onClick, false);
        svgRoot.addEventListener(&quot;mousedown&quot;, onMouseDown, false);
        svgRoot.addEventListener(&quot;mouseup&quot;, onMouseUp, false);
        svgRoot.addEventListener(&quot;mousemove&quot;, onMouseMove, false);
        svgRoot.addEventListener(&quot;keypress&quot;, onKeyPress, false);
        svgRoot.addEventListener(&quot;keydown&quot;, onKeyDown, false);
        svgRoot.addEventListener(&quot;contextmenu&quot;, onContextMenu, false);
        svgRoot.addEventListener(&quot;DOMMouseScroll&quot;, onWheel, false); // Mozilla
        window.onmousewheel = onWheel;
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2012 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
* 
* See http://sozi.baierouge.fr/wiki/en:license for details.
*
* @depend module.js
* @depend events.js
*/

/*global module:true sozi:true */

module(&quot;sozi.document&quot;, function (exports) {
    var window = this,
        document = window.document,
        SOZI_NS = &quot;http://sozi.baierouge.fr&quot;,
        DEFAULTS = {
            &quot;title&quot;: &quot;Untitled&quot;,
            &quot;sequence&quot;: &quot;0&quot;,
            &quot;hide&quot;: &quot;true&quot;,
            &quot;clip&quot;: &quot;true&quot;,
            &quot;timeout-enable&quot;: &quot;false&quot;,
            &quot;timeout-ms&quot;: &quot;5000&quot;,
            &quot;transition-duration-ms&quot;: &quot;1000&quot;,
            &quot;transition-zoom-percent&quot;: &quot;0&quot;,
            &quot;transition-profile&quot;: &quot;linear&quot;
        };

    exports.frames = [];
    exports.idLayerList = [];
    
    /*
    * Returns the value of an attribute of a given Sozi SVG element.
    *
    * If the attribute is not set, then a default value is returned.
    * See DEFAULTS.
    */
    function readAttribute(soziElement, attr) {
        var value = soziElement.getAttributeNS(SOZI_NS, attr);
        return value === &quot;&quot; ? DEFAULTS[attr] : value;
    }

    function readLayerProperties(frame, idLayer, soziElement) {
        var layer = frame.layers[idLayer] = frame.layers[idLayer] || {
                idLayer: idLayer, // FIXME never used
                geometry: {
                    clip: DEFAULTS.clip
                }
            },
            clip = layer.geometry.clip,
            svgElement;
        
        if (typeof layer.hide === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;hide&quot;)) {
            layer.hide = readAttribute(soziElement, &quot;hide&quot;) === &quot;true&quot;;
        }

        if (typeof layer.transitionZoomPercent === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-zoom-percent&quot;)) {
            layer.transitionZoomPercent = parseInt(readAttribute(soziElement, &quot;transition-zoom-percent&quot;), 10);
        }

        if (typeof layer.transitionProfile === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-profile&quot;)) {
            layer.transitionProfile = sozi.animation.profiles[readAttribute(soziElement, &quot;transition-profile&quot;) || &quot;linear&quot;];
        }
        
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;refid&quot;)) {
            // The previous value of the &quot;clip&quot; attribute will be preserved
            // when setting the new geometry object.
            svgElement = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;refid&quot;));
            if (svgElement) {
                if (layer.hide) {
                    svgElement.style.visibility = &quot;hidden&quot;;
                }
                layer.geometry = sozi.display.getElementGeometry(svgElement);
                layer.geometry.clip = clip;
            }
        }
            
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;clip&quot;)) {
            layer.geometry.clip = readAttribute(soziElement, &quot;clip&quot;) === &quot;true&quot;;
        }
    }
    
    /*
    * Builds the list of frames from the current document.
    *
    * This method collects all elements with tag &quot;sozi:frame&quot; and
    * retrieves their geometrical and animation attributes.
    * SVG elements that should be hidden during the presentation are hidden.
    *
    * The resulting list is available in frames, sorted by frame indices.
    */
    function readFrames() {
        var soziFrameList, soziLayerList,
            svgWrapper, svgElementList,
            svgRoot = document.documentElement,
            SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

        // Collect all group ids of &lt;layer&gt; elements
        soziLayerList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
        soziLayerList.forEach(function (soziLayer) {
            var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
            if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) === -1 &amp;&amp; document.getElementById(idLayer)) {
                exports.idLayerList.push(idLayer);
            }
        });

        // If at least one &lt;frame&gt; element has a refid attribute,
        // reorganize the document, grouping objects that do not belong
        // to a group referenced in &lt;layer&gt; elements
        soziFrameList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;frame&quot;));
        if (soziFrameList.some(function (soziFrame) {
                return soziFrame.hasAttributeNS(SOZI_NS, &quot;refid&quot;);
            }))
        {
            // Create the first wrapper group
            svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);

            // For each child of the root SVG element
            svgElementList = Array.prototype.slice.call(svgRoot.childNodes);
            svgElementList.forEach(function (svgElement, index) {
                if (!svgElement.getAttribute) {
                    // Remove text elements
                    svgRoot.removeChild(svgElement);
                }
                else if (exports.idLayerList.indexOf(svgElement.getAttribute(&quot;id&quot;)) === -1) {
                    // If the current element is not a referenced layer,
                    // move it to the current wrapper element
                    // FIXME move graphic elements only
                    svgRoot.removeChild(svgElement);
                    svgWrapper.appendChild(svgElement);
                }
                else if (svgWrapper.firstChild) {
                    // If the current element is a referenced layer,
                    // and if there were other non-referenced elements before it,
                    // insert the wrapper group before the current element
                    svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + index);
                    exports.idLayerList.push(&quot;sozi-wrapper-&quot; + index);
                    svgRoot.insertBefore(svgWrapper, svgElement);
                    
                    // Prepare a new wrapper element                
                    svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
                }
            });

            // Append last wrapper if needed
            if (svgWrapper.firstChild) {
                svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + svgElementList.length);
                exports.idLayerList.push(&quot;sozi-wrapper-&quot; + svgElementList.length);
                svgRoot.appendChild(svgWrapper);
            }            
        }

        // Analyze &lt;frame&gt; elements
        soziFrameList.forEach(function (soziFrame) {
            var idLayer,
                newFrame = {
                    id: soziFrame.getAttribute(&quot;id&quot;),
                    title: readAttribute(soziFrame, &quot;title&quot;),
                    sequence: parseInt(readAttribute(soziFrame, &quot;sequence&quot;), 10),
                    timeoutEnable: readAttribute(soziFrame, &quot;timeout-enable&quot;) === &quot;true&quot;,
                    timeoutMs: parseInt(readAttribute(soziFrame, &quot;timeout-ms&quot;), 10),
                    transitionDurationMs: parseInt(readAttribute(soziFrame, &quot;transition-duration-ms&quot;), 10),
                    layers: {}
                };

            // The &lt;frame&gt; element defines default properties for all layers
            exports.idLayerList.forEach(function (idLayer) {
                readLayerProperties(newFrame, idLayer, soziFrame);
            });

            // Collect and analyze &lt;layer&gt; elements in the current &lt;frame&gt; element
            soziLayerList = Array.prototype.slice.call(soziFrame.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
            soziLayerList.forEach(function (soziLayer) {
                var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
                if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) !== -1) {
                    readLayerProperties(newFrame, idLayer, soziLayer);
                }
            });
            
            // If the &lt;frame&gt; element has at least one valid layer,
            // add it to the frame list
            for (idLayer in newFrame.layers) {
                if (newFrame.layers.hasOwnProperty(idLayer)) {
                    exports.frames.push(newFrame);
                    break;
                }
            }
        });
        
        exports.frames.sort(
            function (a, b) {
                return a.sequence - b.sequence;
            }
        );
    }

    /*
    * Event handler: document load.
    *
    * This function reads the frames from the document.
    */
    function onLoad() {
        document.documentElement.removeAttribute(&quot;viewBox&quot;);
        readFrames();
        sozi.events.fire(&quot;documentready&quot;);
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.location&quot;, function (exports) {
    var window = this,
        changedFromWithin = false;
    
    /*
     * Returns the frame index given in the URL hash.
     *
     * In the URL, the frame index starts a 1.
     * This method converts it into a 0-based index.
     *
     * If the URL hash is not a positive integer, then 0 is returned.
     * It the URL hash is an integer greater than the last frame index, then
     * the last frame index is returned.
     */
    exports.getFrameIndex = function () {
        var index = window.location.hash ?
            parseInt(window.location.hash.slice(1), 10) - 1 : 0;
        if (isNaN(index) || index &lt; 0) {
            return 0;
        } else if (index &gt;= sozi.document.frames.length) {
            return sozi.document.frames.length - 1;
        } else {
            return index;
        }
    };

    /*
     * Event handler: hash change.
     *
     * This function is called when the URL hash is changed.
     * If the hash was changed manually in the address bar, and if it corresponds to
     * a valid frame number, then the presentation moves to that frame.
     *
     * The hashchange event can be triggered externally, by the user modifying the URL,
     * or internally, by the script modifying window.location.hash.
     */
    function onHashChange() {
        var index = exports.getFrameIndex();
        if (!changedFromWithin) {
            sozi.player.moveToFrame(index);
        }
        changedFromWithin = false;
    }
    
    /*
     * Event handler: frame change.
     *
     * This function is called when the presentation has reached a
     * new frame.
     * The URL hash is changed based on the provided frame index.
     */
    function onFrameChange(index) {
        changedFromWithin = true;
        window.location.hash = &quot;#&quot; + (index + 1);
    }

	/*
	 * Event handler: document load.
	 *
	 * This function registers the &quot;framechange&quot; handler.
	 */
    function onLoad() {
        sozi.events.listen(&quot;framechange&quot;, onFrameChange);        
    }
    
    window.addEventListener(&quot;hashchange&quot;, onHashChange, false);        
    window.addEventListener(&quot;load&quot;, onLoad, false);        
});

/*
    @depend framenumber.js
    @depend framelist.js
    @depend actions.js
    @depend player.js
    @depend display.js
    @depend document.js
    @depend location.js
*/

</script>
  <style
     ns1:version="12.03-18171759"
     id="sozi-style">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

#sozi-toc text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}

#sozi-toc text:hover {
   fill: #0cf;
   cursor: pointer;
}

#sozi-toc text.sozi-toc-current {
   fill: #fa4;
}

#sozi-toc-background {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 10;
   fill: #222;
   fill-opacity: 0.9;
}

.sozi-toc-arrow {
   fill: #eff;
   fill-opacity: 0.75;
   stroke: none;
}

.sozi-toc-arrow:hover {
   fill: #0cf;
}

#sozi-framenumber circle {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 4;
   fill: #222;
   fill-opacity: 0.9;
}

#sozi-framenumber text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}

</style>
  <script
     ns1:version="12.03-18171759"
     id="sozi-extras-addvideo-script">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

this.addEventListener(&quot;load&quot;, function () {
	var	svgNs = &quot;http://www.w3.org/2000/svg&quot;,
	    soziNs = &quot;http://sozi.baierouge.fr&quot;,
		xhtmlNs = &quot;http://www.w3.org/1999/xhtml&quot;,
		window = this,
		document = window.document,
		mediaSources = [],
		mediaList, i, j, k, rect, foreignObject,
		html, htmlMedia, htmlSource;
	
    function clickHandler(evt) {
        evt.stopPropagation();
    }
    
    function registerFrameChangeHandler(htmlMedia, startFrame, stopFrame) {
        sozi.events.listen(&quot;framechange&quot;, function(index) {
            var frameId = sozi.document.frames[index].id;
		    if (frameId === startFrame) {
		        htmlMedia.play();
			}
            else if (frameId === stopFrame) {
                htmlMedia.pause();
            }
		});
    }
    
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;video&quot;));
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;audio&quot;));

	mediaList = [];
	for (k = 0; k &lt; mediaSources.length; k += 1) {
	    for (i = 0; i &lt; mediaSources[k].length; i += 1) {
		    rect = mediaSources[k][i].parentNode;
	
		    // Create HTML media source element
		    htmlSource = document.createElementNS(xhtmlNs, &quot;source&quot;);
		    htmlSource.setAttribute(&quot;type&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;type&quot;));
		    htmlSource.setAttribute(&quot;src&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;src&quot;));

		    for (j = 0; j &lt; mediaList.length; j += 1) {
			    if (mediaList[j].rect === rect) {
				    break;
			    }
		    }
	
		    if (j === mediaList.length) {
		        rect.setAttribute(&quot;visibility&quot;, &quot;hidden&quot;);
		        
			    // Create HTML media element
			    htmlMedia = document.createElementNS(xhtmlNs, mediaSources[k][i].tagName);
			    // htmlMedia.setAttribute(&quot;poster&quot;, &quot;__dummy__.png&quot;);
			    htmlMedia.setAttribute(&quot;controls&quot;, &quot;controls&quot;);
			    if (mediaSources[k][i].tagName === &quot;video&quot;) {
			        htmlMedia.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			        htmlMedia.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    }
		        htmlMedia.addEventListener(&quot;click&quot;, clickHandler, false);
		        htmlMedia.addEventListener(&quot;contextmenu&quot;, clickHandler, false);
		        
			    // Create HTML root element
			    html = document.createElementNS(xhtmlNs, &quot;html&quot;);
			    html.appendChild(htmlMedia);
		
			    // Create SVG foreign object
			    foreignObject = document.createElementNS(svgNs, &quot;foreignObject&quot;);
			    foreignObject.setAttribute(&quot;x&quot;, rect.getAttribute(&quot;x&quot;));
			    foreignObject.setAttribute(&quot;y&quot;, rect.getAttribute(&quot;y&quot;));
			    foreignObject.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			    foreignObject.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    foreignObject.appendChild(html);
				
			    rect.parentNode.insertBefore(foreignObject, rect.nextSibling);
			
			    if (mediaSources[k][i].hasAttributeNS(soziNs, &quot;start-frame&quot;)) {
			        registerFrameChangeHandler(htmlMedia,
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;start-frame&quot;),
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;stop-frame&quot;)
			         );
			    }
			
			    mediaList.push({
				    rect: mediaSources[k][i].parentNode,
				    htmlMedia: htmlMedia
			    });
		    }
	    }
	    
		// Append HTML source element to current HTML media element
		mediaList[j].htmlMedia.appendChild(htmlSource);
	}				
}, false);

</script>
</svg>
