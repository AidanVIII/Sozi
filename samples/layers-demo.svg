<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="http://sozi.baierouge.fr"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="2125.9841"
   height="1062.9921"
   id="svg2"
   version="1.1"
   inkscape:version="0.48.3.1 r9886"
   sodipodi:docname="layers-demo.svg">
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.98994949"
     inkscape:cx="434.3364"
     inkscape:cy="715.19648"
     inkscape:document-units="px"
     inkscape:current-layer="layer3"
     showgrid="true"
     units="mm"
     inkscape:window-width="1280"
     inkscape:window-height="964"
     inkscape:window-x="0"
     inkscape:window-y="26"
     inkscape:window-maximized="1"
     inkscape:snap-grids="true">
    <inkscape:grid
       type="xygrid"
       id="grid2985"
       empspacing="5"
       visible="true"
       enabled="true"
       snapvisiblegridlinesonly="true"
       units="mm"
       spacingx="1mm"
       spacingy="1mm" />
  </sodipodi:namedview>
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:groupmode="layer"
     id="layer3"
     inkscape:label="Fond"
     style="display:none">
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3037"
       width="690.94489"
       height="637.79529"
       x="70.866142"
       y="35.43301" />
  </g>
  <g
     inkscape:label="Ciel"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(0,10.629915)"
     style="display:inline">
    <rect
       style="fill:#87cdde;stroke:none"
       id="ciel"
       width="141.73228"
       height="106.29921"
       x="159.44882"
       y="42.519665"
       inkscape:label="#rect2987" />
    <path
       sodipodi:type="arc"
       style="fill:#ffff00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="path2989"
       sodipodi:cx="274.60629"
       sodipodi:cy="69.094467"
       sodipodi:rx="8.8582678"
       sodipodi:ry="8.8582678"
       d="m 283.46456,69.094467 c 0,4.892286 -3.96598,8.858268 -8.85827,8.858268 -4.89228,0 -8.85827,-3.965982 -8.85827,-8.858268 0,-4.892286 3.96599,-8.858268 8.85827,-8.858268 4.89229,0 8.85827,3.965982 8.85827,8.858268 z"
       transform="matrix(0.79999999,0,0,0.79999999,42.519693,19.133854)" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="Nuages"
     style="display:inline">
    <path
       style="fill:#ffffff;stroke:none"
       d="m 343.70079,205.51175 c 0,0 0,-7.08661 10.62992,-7.08661 7.08661,0 10.62992,7.08661 10.62992,7.08661 0,0 3.54331,-3.5433 10.62992,-3.5433 7.08661,0 10.47294,6.64499 10.47294,6.64499 0,0 7.2436,0.44162 7.2436,3.98493 0,7.08661 -10.62993,7.08661 -10.62993,7.08661 0,0 -7.08661,7.08662 -17.71653,7.08662 -21.25984,0 -24.80315,-7.08662 -24.80315,-7.08662 0,0 -7.08661,0 -7.08661,-7.08661 0,-7.08662 10.62992,-7.08662 10.62992,-7.08662 z"
       id="path2997"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="cscscscscsc" />
    <path
       sodipodi:nodetypes="cscscscscsc"
       inkscape:connector-curvature="0"
       id="path3003"
       d="m 187.79527,209.05507 c 0,0 3.54331,-3.5433 7.08662,-3.54331 7.08661,-1e-5 7.08661,3.5433 7.08661,3.5433 0,0 1e-5,-3.5433 7.08662,-3.5433 7.08661,0 7.08661,7.08662 7.08661,7.08662 0,0 5.12792,3.91738 3.54331,7.08661 -3.54331,7.08661 -14.17323,3.54331 -14.17323,3.54331 0,0 0,3.5433 -10.62992,3.5433 -10.62992,0 -10.62992,-7.08661 -10.62992,-7.08661 0,0 -10.62993,0 -7.08662,-7.08661 3.54331,-7.08662 10.62992,-3.54331 10.62992,-3.54331 z"
       style="fill:#ffffff;stroke:none" />
    <rect
       transform="translate(0,10.629915)"
       y="166.53539"
       x="159.44882"
       height="106.29921"
       width="141.73228"
       id="nuages-depart"
       style="fill:none;stroke:#ff6600"
       inkscape:label="#rect3039" />
    <rect
       transform="translate(0,10.629915)"
       style="fill:none;stroke:#ff6600"
       id="nuages-arrivee"
       width="141.73228"
       height="106.29921"
       x="304.7244"
       y="166.53539"
       inkscape:label="#rect3041" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer4"
     inkscape:label="Arbres"
     style="display:inline">
    <path
       style="fill:#5fd35f;stroke:none"
       d="m 159.44882,372.04718 c 0,0 3.54331,-10.62992 14.17323,-10.62992 6.36043,0 10.62992,3.54331 10.62992,3.54331 0,0 3.54331,-10.62992 14.17323,-10.62992 10.62992,0 14.17323,14.17323 14.17323,14.17323 0,0 10.62992,-3.54331 17.71653,0 7.08661,3.5433 10.62992,17.71653 10.62992,17.71653 0,0 3.54331,-10.62992 21.25984,-10.62992 3.54331,-14.17323 10.62992,-21.25986 24.80315,-21.25985 14.17323,10e-6 21.25985,10.62993 21.25985,10.62993 0,0 10.62992,-14.17323 28.34645,-14.17323 10.62992,0 17.71654,3.54331 17.71654,3.54331 0,0 3.54331,-7.08662 17.71653,-7.08662 14.17323,0 17.71654,14.17323 17.71654,14.17323 0,0 7.08661,-3.5433 17.71653,-3.5433 10.62993,0 17.71654,14.17322 17.71654,14.17322 0,0 7.8128,-3.5433 14.17323,-3.5433 14.17323,0 21.25984,17.71653 21.25984,17.71653 0,0 21.25984,0 21.25984,21.25984 l 14.17323,0 c 0,0 3.54331,-17.71653 21.25984,-17.71653 0,-10.62992 14.17323,-14.17323 21.25985,-10.62992 0,0 0,-17.71654 17.71653,-17.71654 10.62992,0 14.17323,7.08662 14.17323,7.08662 0,0 3.54331,-17.71654 21.25984,-17.71654 0,0 0,42.16252 0,56.69291 l -432.28346,0 z"
       id="path3059"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="csczczccscscsczcscccccsccccc" />
    <rect
       style="fill:none;stroke:#ff6600;display:inline"
       id="arbres-depart"
       width="141.73228"
       height="106.29921"
       x="159.44882"
       y="301.18103"
       inkscape:label="#rect3049" />
    <rect
       style="fill:none;stroke:#ff6600;display:inline"
       id="arbres-arrivee"
       width="141.73228"
       height="106.29921"
       x="450"
       y="301.18103"
       inkscape:label="#rect3053" />
    <path
       sodipodi:nodetypes="csczcccccscscsczcscccccsccccc"
       inkscape:connector-curvature="0"
       id="path4352"
       d="m 510.23622,389.76372 c 0,0 -0.64527,-9.60897 -11.95116,-9.60897 -3.77313,0 -6.30588,2.10196 -6.30588,2.10196 0,0 -2.10196,-6.30588 -8.40785,-6.30588 -6.30588,0 -8.76818,10.26958 -8.76818,10.26958 -3.54331,0 -10.62992,3.54331 -10.62992,10.62992 -7.08662,0 -7.08662,10.62992 -7.08662,10.62992 0,0 -28.34645,0 -35.43307,0 0,-10.62992 -20.92884,-18.91765 -25.58388,-18.91765 -2.10196,-8.40785 -6.30588,-12.61179 -14.71373,-12.61178 -8.40785,10e-6 -12.61178,6.30589 -12.61178,6.30589 0,0 -6.30588,-8.40785 -16.81569,-8.40785 -6.30588,0 -10.50981,2.10197 -10.50981,2.10197 0,0 -2.10196,-4.20393 -10.5098,-4.20393 -8.40785,0 -10.50982,8.40785 -10.50982,8.40785 0,0 -4.20392,-2.10196 -10.5098,-2.10196 -6.30589,0 -10.50981,8.40784 -10.50981,8.40784 0,0 -4.63472,-2.10196 -8.40785,-2.10196 -8.40785,0 -12.61177,10.50981 -12.61177,10.50981 0,0 -12.61177,0 -12.61177,12.61177 l -49.54624,0 c 0,0 -2.10196,-10.50981 -12.61177,-10.50981 0,-6.30588 -8.40785,-8.40784 -12.61178,-6.30588 0,0 0,-10.50981 -10.5098,-10.50981 -6.30589,0 -8.40785,4.20392 -8.40785,4.20392 0,0 -2.10196,-10.50981 -12.61177,-10.50981 0,0 0,25.01167 0,33.63139 l 361.41732,0 c 0,-17.71653 -10.62992,-17.71653 -10.62992,-17.71653 z"
       style="fill:#2da52d;fill-opacity:1;stroke:none" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer5"
     inkscape:label="Maisons"
     style="display:inline">
    <rect
       y="425.19681"
       x="159.44882"
       height="106.29921"
       width="141.73228"
       id="maisons-depart"
       style="fill:none;stroke:#ff6600;display:inline"
       inkscape:label="#rect3061" />
    <rect
       style="fill:none;stroke:#ff6600;display:inline"
       id="maisons-arrivee"
       width="141.73228"
       height="106.29921"
       x="595.27557"
       y="425.19678"
       inkscape:label="#rect3069" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3071"
       width="35.433071"
       height="53.149605"
       x="212.59842"
       y="478.34641" />
    <rect
       y="496.06293"
       x="251.5748"
       height="35.433064"
       width="53.149582"
       id="rect3073"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3075"
       width="60.23621"
       height="42.519672"
       x="354.33072"
       y="488.97632" />
    <rect
       y="478.34641"
       x="425.19684"
       height="53.149597"
       width="53.149612"
       id="rect3077"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3079"
       width="35.433064"
       height="53.149597"
       x="481.88977"
       y="478.34641" />
    <rect
       y="496.06293"
       x="549.21259"
       height="35.433071"
       width="35.433083"
       id="rect3081"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3083"
       width="53.149628"
       height="38.976376"
       x="602.36218"
       y="492.51962" />
    <rect
       y="474.8031"
       x="673.22833"
       height="56.692917"
       width="53.149628"
       id="rect3085"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <path
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 212.59843,478.3464 17.71653,-21.25985 17.71654,21.25985 z"
       id="path3087"
       inkscape:connector-curvature="0" />
    <path
       inkscape:connector-curvature="0"
       id="path3857"
       d="m 251.57481,496.06294 14.17322,-17.71654 24.80315,0 14.17323,17.71653 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="ccccc" />
    <path
       sodipodi:nodetypes="ccccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 354.33072,488.97632 14.17322,-17.71654 31.88976,0 14.17323,17.71654 z"
       id="path3859"
       inkscape:connector-curvature="0" />
    <path
       inkscape:connector-curvature="0"
       id="path3861"
       d="m 425.19686,478.3464 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="ccccc" />
    <path
       sodipodi:nodetypes="cccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 481.88977,478.3464 17.71653,-24.80315 17.71653,24.80315 z"
       id="path3863"
       inkscape:connector-curvature="0" />
    <path
       inkscape:connector-curvature="0"
       id="path3865"
       d="m 549.2126,496.06293 17.71653,-24.80315 17.71653,24.80315 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="cccc" />
    <path
       inkscape:connector-curvature="0"
       id="path3869"
       d="m 673.22835,474.80309 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="ccccc" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3871"
       width="3.543303"
       height="17.716536"
       x="219.68504"
       y="513.77948" />
    <rect
       y="513.77948"
       x="283.46457"
       height="17.716536"
       width="3.5433049"
       id="rect3873"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3875"
       width="3.5433178"
       height="17.716536"
       x="382.67715"
       y="513.77948" />
    <rect
       y="513.77948"
       x="435.82678"
       height="17.716536"
       width="3.5432966"
       id="rect3877"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3879"
       width="3.5433135"
       height="17.716536"
       x="499.60629"
       y="513.77948" />
    <rect
       y="513.77948"
       x="556.29919"
       height="17.716536"
       width="3.5433254"
       id="rect3881"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3883"
       width="3.5432947"
       height="17.716536"
       x="637.79529"
       y="513.77948" />
    <rect
       y="513.77948"
       x="683.85828"
       height="17.716536"
       width="3.5432985"
       id="rect3885"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <g
       id="g4376">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect3891"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4374"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(42.519681,24.803149)"
       id="g4392">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4394"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4396"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4433"
       transform="translate(145.27559,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4435"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4437"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(180.70866,24.803149)"
       id="g4439">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4441"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4443"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4445"
       transform="translate(216.14173,-9.6118356e-7)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4447"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4449"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(240.94488,-9.6118356e-7)"
       id="g4451">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4453"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4455"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4457"
       transform="translate(240.94488,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4459"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4461"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(269.29133,-9.6118356e-7)"
       id="g4463">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4465"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4467"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4469"
       transform="translate(350.7874,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4471"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4473"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(393.30708,24.803149)"
       id="g4475">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4477"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4479"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4481"
       transform="translate(464.17322,3.5433061)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4483"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4485"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(488.97637,3.5433061)"
       id="g4487">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4489"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4491"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4493"
       transform="translate(488.97637,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4495"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4497"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       id="g4499"
       transform="matrix(1,0,0,0.68739202,393.30708,163.48782)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4501"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4503"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="matrix(1,0,0,0.68739202,418.11023,163.48782)"
       id="g4505">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4507"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4509"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       transform="matrix(1,0,0,0.68739202,148.81889,159.94451)"
       id="g4511">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4513"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4515"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4517"
       transform="matrix(1,0,0,0.68739202,177.16535,159.94451)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4519"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4521"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <rect
       y="513.77948"
       x="258.66141"
       height="10.629921"
       width="3.5433071"
       id="rect4547"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.50000000000000000;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4568"
       width="3.5433071"
       height="10.629921"
       x="269.29135"
       y="513.77948" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4570"
       width="3.5433071"
       height="10.629921"
       x="240.94489"
       y="513.77948" />
    <rect
       y="513.77948"
       x="230.31496"
       height="10.629921"
       width="3.5433071"
       id="rect4572"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4574"
       width="3.5433071"
       height="10.629921"
       x="240.94489"
       y="488.97632" />
    <rect
       y="488.97632"
       x="230.31496"
       height="10.629921"
       width="3.5433071"
       id="rect4576"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       y="488.97632"
       x="223.22835"
       height="10.629921"
       width="3.5433071"
       id="rect4580"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <g
       transform="translate(14.173224,-9.6118356e-7)"
       id="g4380">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4382"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4384"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4386"
       transform="translate(14.173224,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4388"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4390"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4578"
       width="3.5433071"
       height="10.629921"
       x="216.14174"
       y="488.97632" />
    <rect
       y="513.77948"
       x="361.41733"
       height="10.629921"
       width="3.5433071"
       id="rect4582"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4584"
       width="3.5433071"
       height="10.629921"
       x="407.48032"
       y="513.77948" />
    <rect
       y="488.97632"
       x="432.28348"
       height="10.629921"
       width="3.5433071"
       id="rect4586"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4588"
       width="3.5433071"
       height="10.629921"
       x="442.91339"
       y="488.97632" />
    <rect
       y="488.97632"
       x="457.08661"
       height="10.629921"
       width="3.5433071"
       id="rect4590"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4592"
       width="3.5433071"
       height="10.629921"
       x="467.71652"
       y="488.97632" />
    <rect
       y="513.77948"
       x="467.71652"
       height="10.629921"
       width="3.5433071"
       id="rect4594"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4596"
       width="3.5433071"
       height="10.629921"
       x="457.08661"
       y="513.77948" />
    <rect
       y="488.97632"
       x="496.06299"
       height="10.629921"
       width="3.5433071"
       id="rect4598"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4600"
       width="3.5433071"
       height="10.629921"
       x="577.55908"
       y="513.77948" />
    <rect
       y="513.77948"
       x="609.44879"
       height="10.629921"
       width="3.5433071"
       id="rect4602"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4604"
       width="3.5433071"
       height="10.629921"
       x="620.07874"
       y="513.77948" />
    <rect
       y="492.51962"
       x="680.31494"
       height="10.629921"
       width="3.5433071"
       id="rect4606"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4608"
       width="3.5433071"
       height="10.629921"
       x="715.74805"
       y="492.51962" />
    <rect
       y="513.77948"
       x="715.74805"
       height="10.629921"
       width="3.5433071"
       id="rect4610"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4612"
       width="3.5433071"
       height="10.629921"
       x="708.66144"
       y="492.51962" />
    <rect
       y="513.77948"
       x="705.1181"
       height="10.629921"
       width="3.5433071"
       id="rect4614"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4616"
       width="3.5433071"
       height="10.629921"
       x="690.94489"
       y="492.51962" />
    <rect
       y="488.97632"
       x="354.33072"
       height="3.5433071"
       width="60.236221"
       id="rect4618"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4620"
       width="53.149609"
       height="3.5433071"
       x="425.19684"
       y="478.34641" />
    <rect
       y="478.34641"
       x="481.88977"
       height="3.5433071"
       width="35.433064"
       id="rect4622"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4624"
       width="35.433064"
       height="3.5433071"
       x="549.21259"
       y="496.06293" />
    <g
       id="g4523"
       transform="translate(343.70078,4.4848057e-6)">
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4525"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         id="path4527"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         inkscape:connector-curvature="0"
         id="path4529"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    </g>
    <rect
       y="492.51962"
       x="602.36218"
       height="3.5433071"
       width="53.149628"
       id="rect4626"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4628"
       width="53.149628"
       height="3.5433071"
       x="673.22833"
       y="474.8031" />
    <g
       transform="translate(464.25653,-17.716538)"
       id="g4531">
      <path
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         id="path4533"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4535"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
      <path
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         id="path4537"
         inkscape:connector-curvature="0" />
    </g>
    <g
       id="g4539"
       transform="translate(489.05968,-17.716538)">
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4541"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         id="path4543"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         inkscape:connector-curvature="0"
         id="path4545"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    </g>
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4630"
       width="53.149612"
       height="3.5433071"
       x="251.5748"
       y="496.06293" />
    <g
       id="g4398"
       transform="translate(46.146299,-9.6118356e-7)">
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="rect4400"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         id="path4402"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         inkscape:connector-curvature="0"
         id="path4405"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    </g>
    <g
       transform="translate(63.862834,-2.6018088e-6)"
       id="g4425">
      <path
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         id="path4427"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4429"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
      <path
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         id="path4431"
         inkscape:connector-curvature="0" />
    </g>
    <rect
       y="478.34641"
       x="212.59842"
       height="3.5433071"
       width="35.433079"
       id="rect4632"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4634"
       width="3.5432985"
       height="17.716536"
       x="687.40161"
       y="513.77948" />
    <rect
       y="513.77948"
       x="641.33856"
       height="17.716536"
       width="3.5432985"
       id="rect4636"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4638"
       width="3.5432985"
       height="17.716536"
       x="559.84253"
       y="513.77948" />
    <rect
       y="513.77948"
       x="503.14963"
       height="17.716536"
       width="3.5432985"
       id="rect4640"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4642"
       width="3.5432985"
       height="17.716536"
       x="439.37009"
       y="513.77948" />
    <rect
       y="513.77948"
       x="386.22046"
       height="17.716536"
       width="3.5432985"
       id="rect4644"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4646"
       width="3.5432985"
       height="17.716536"
       x="287.00787"
       y="513.77948" />
    <rect
       y="513.77948"
       x="223.22835"
       height="17.716536"
       width="3.5432985"
       id="rect4648"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <path
       sodipodi:nodetypes="cccccc"
       inkscape:connector-curvature="0"
       id="rect4650"
       d="m 527.95276,524.40936 3.5433,-3.54328 3.54331,3.54328 0,7.08661 -7.08661,0 z"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <path
       sodipodi:nodetypes="ccc"
       style="fill:none;stroke:#ff3c00;stroke-opacity:1"
       d="m 527.95276,524.40939 3.5433,-3.54331 3.54331,3.54331"
       id="path4652"
       inkscape:connector-curvature="0" />
    <path
       sodipodi:nodetypes="ccccc"
       inkscape:connector-curvature="0"
       id="path4655"
       d="m 529.72442,531.496 0,-3.5433 c 0,-3.54331 3.5433,-3.54331 3.5433,0 l 0,3.5433 z"
       style="fill:#000000;stroke:none" />
    <rect
       y="474.8031"
       x="644.8819"
       height="14.173228"
       width="7.0866141"
       id="rect4657"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <path
       sodipodi:nodetypes="ccccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 602.36221,492.51963 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       id="path3867"
       inkscape:connector-curvature="0" />
    <rect
       y="474.8031"
       x="644.8819"
       height="1.5790213"
       width="7.0866141"
       id="rect4659"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer6"
     inkscape:label="Voiture">
    <rect
       style="display:inline;fill:none;stroke:#ff6600"
       id="voiture-depart"
       width="141.73228"
       height="106.29921"
       x="159.44882"
       y="549.21252"
       inkscape:label="#rect3939" />
    <rect
       y="549.21252"
       x="88.58268"
       height="106.29921"
       width="141.73228"
       id="voiture-arrivee"
       style="fill:none;stroke:#ff6600;display:inline"
       inkscape:label="#rect3952" />
    <g
       transform="matrix(0.6800487,0,0,0.6800487,56.684284,209.73184)"
       id="g4362">
      <path
         style="fill:#ff39d6;fill-opacity:1;stroke:none"
         d="m 177.16535,648.42514 c 3.18898,3.54331 19.13387,3.54329 28.7008,3.5433 3.18897,0 3.18897,-1.87297 3.18897,-3.5433 0,-3.54331 -9.56693,-14.17323 -22.32283,-14.17323 -6.80648,0 -14.37984,8.82556 -9.56694,14.17323 z"
         id="path4354"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="sssss" />
      <path
         sodipodi:nodetypes="sssss"
         inkscape:connector-curvature="0"
         id="path3948"
         d="m 179.76357,647.16621 c 2.8354,3.15045 17.01244,3.15044 25.51865,3.15044 2.8354,0 3.68361,-0.81709 3.68361,-2.30223 0,-3.15045 -9.57764,-13.8518 -22.12461,-13.71787 -6.05148,0.0646 -11.35693,8.1149 -7.07765,12.86966 z"
         style="fill:#ff80e5;stroke:none" />
      <path
         transform="translate(-24.803146,0)"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         sodipodi:ry="3.5433071"
         sodipodi:rx="3.5433071"
         sodipodi:cy="651.96844"
         sodipodi:cx="209.05511"
         id="path3942"
         style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none"
         sodipodi:type="arc" />
      <path
         transform="translate(-7.0866072,0)"
         sodipodi:type="arc"
         style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="path3944"
         sodipodi:cx="209.05511"
         sodipodi:cy="651.96844"
         sodipodi:rx="3.5433071"
         sodipodi:ry="3.5433071"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z" />
      <path
         sodipodi:nodetypes="zssz"
         inkscape:connector-curvature="0"
         id="path3950"
         d="m 195.19756,636.97447 c -2.64102,0 -4.86864,3.45106 -3.48017,5.69765 1.24189,2.00941 9.76685,2.51449 11.95575,1.13642 2.23498,-1.40708 -5.83456,-6.83407 -8.47558,-6.83407 z"
         style="fill:#916f6f;stroke:none" />
      <path
         style="fill:#7b5d5d;fill-opacity:1;stroke:none"
         d="m 195.51211,637.24233 c -2.40094,0 -4.42605,3.06641 -3.1638,5.06259 1.12899,1.78545 8.87899,2.23423 10.86891,1.00976 2.03181,-1.25025 -5.30417,-6.07235 -7.70511,-6.07235 z"
         id="path4356"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="zssz" />
      <path
         sodipodi:type="arc"
         style="fill:#444444;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="path4358"
         sodipodi:cx="209.05511"
         sodipodi:cy="651.96844"
         sodipodi:rx="3.5433071"
         sodipodi:ry="3.5433071"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         transform="matrix(0.52123015,0,0,0.52123015,75.286139,312.14283)" />
      <path
         transform="matrix(0.52123015,0,0,0.52123015,93.002678,312.14283)"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         sodipodi:ry="3.5433071"
         sodipodi:rx="3.5433071"
         sodipodi:cy="651.96844"
         sodipodi:cx="209.05511"
         id="path4360"
         style="fill:#444444;fill-opacity:1;fill-rule:nonzero;stroke:none"
         sodipodi:type="arc" />
    </g>
  </g>
  <ns1:frame
     ns1:transition-duration-ms="1000"
     ns1:timeout-ms="1000"
     ns1:timeout-enable="true"
     ns1:title="Départ"
     ns1:sequence="1"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0"
     ns1:hide="true"
     ns1:clip="true"
     id="frame1">
    <ns1:layer
       ns1:hide="false"
       ns1:refid="ciel"
       ns1:group="layer1" />
    <ns1:layer
       ns1:refid="nuages-depart"
       ns1:group="layer2" />
    <ns1:layer
       ns1:refid="arbres-depart"
       ns1:group="layer4" />
    <ns1:layer
       ns1:refid="maisons-depart"
       ns1:group="layer5" />
    <ns1:layer
       ns1:refid="voiture-depart"
       ns1:group="layer6" />
  </ns1:frame>
  <ns1:frame
     ns1:transition-duration-ms="7000"
     ns1:timeout-ms="1000"
     ns1:timeout-enable="true"
     ns1:title="Arrivée"
     ns1:sequence="2"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0"
     ns1:hide="true"
     ns1:clip="true"
     id="frame2">
    <ns1:layer
       ns1:hide="false"
       ns1:refid="ciel"
       ns1:group="layer1" />
    <ns1:layer
       ns1:refid="nuages-arrivee"
       ns1:group="layer2" />
    <ns1:layer
       ns1:refid="arbres-arrivee"
       ns1:group="layer4" />
    <ns1:layer
       ns1:refid="maisons-arrivee"
       ns1:group="layer5" />
    <ns1:layer
       ns1:refid="voiture-arrivee"
       ns1:group="layer6" />
  </ns1:frame>
  <script
     ns1:version="12.03-18171759"
     id="sozi-script">
function module(path, body) {
	var names = path.split(&quot;.&quot;),
	    i,
	    current = this;
	for (i = 0; i &lt; names.length; i += 1) {
		if (typeof current[names[i]] === &quot;undefined&quot;) {
			current[names[i]] = {};
		}
		current = current[names[i]];
	}
	body(current);
}

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

/*global module:true sozi:true */

module(&quot;sozi.events&quot;, function (exports) {
    var listeners = {};

    /*
     * Adds a listener for a given event type.
     *
     * The event type is provided as a string by the key parameter.
     * The function to be executed is provided by the handler parameter.
     */
    exports.listen = function (key, handler) {
        var listenersForKey = listeners[key];
        if (!listenersForKey) {
            listenersForKey = listeners[key] = [];
        }
        listenersForKey.push(handler);
    };
    
    /*
     * Fire an event of the given type.
     *
     * All event handlers added for the given event type are
     * executed.
     * Additional arguments provided to this function are passed
     * to the event handlers.
     */
    exports.fire = function (key) {
        var listenersForKey = listeners[key],
            len,
            i,
            args = Array.prototype.slice.call(arguments, 1);
        if (listenersForKey) {
            len = listenersForKey.length;
            for (i = 0; i &lt; len; i += 1) {
                listenersForKey[i].apply(null, args);
            }
        }
    };
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.framenumber&quot;, function (exports) {
    var window = this,
        document = window.document,
        group, text, circle, textNode,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    
    function adjust() {
        var textBBox = text.getBBox(),
            d = Math.max(textBBox.width, textBBox.height) * 0.75,
            t = d * 1.25;
        circle.setAttribute(&quot;r&quot;, d);
        group.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + t + &quot;,&quot; + t + &quot;)&quot;);
    }
    
    function onDisplayReady() {
        group = document.createElementNS(SVG_NS, &quot;g&quot;);
        text = document.createElementNS(SVG_NS, &quot;text&quot;);
        circle = document.createElementNS(SVG_NS, &quot;circle&quot;);
        
        group.setAttribute(&quot;id&quot;, &quot;sozi-framenumber&quot;);

        circle.setAttribute(&quot;cx&quot;, 0);
        circle.setAttribute(&quot;cy&quot;, 0);
        group.appendChild(circle);
        
        textNode = document.createTextNode(sozi.location.getFrameIndex() + 1);
        text.setAttribute(&quot;text-anchor&quot;, &quot;middle&quot;);
        text.setAttribute(&quot;dominant-baseline&quot;, &quot;central&quot;);
        text.setAttribute(&quot;x&quot;, 0);
        text.setAttribute(&quot;y&quot;, 0);
        text.appendChild(textNode);
        group.appendChild(text);
        
        document.documentElement.appendChild(group);
        
        adjust();
    }

    function onFrameChange(index) {
        textNode.nodeValue = index + 1;
    }
    
	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.framelist&quot;, function (exports) {
	var window = this,
        document = window.document,
        svgRoot,
        tocGroup,
        linksBox,
        tocHeight = 0,
        MARGIN = 5,
        translateXHidden,
        translateXVisible,
        translateXStart,
        translateXEnd,
        translateX,
        animator,
        ANIMATION_TIME_MS = 300,
        ANIMATION_PROFILE = &quot;decelerate&quot;,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

	function onMouseOut(evt) {
        var rel = evt.relatedTarget;
        while (rel !== tocGroup &amp;&amp; rel !== svgRoot) {
            rel = rel.parentNode;
        }
        if (rel === svgRoot) {
            exports.hide();
            sozi.player.restart();
            evt.stopPropagation();
        }
    }

	function onClickArrowUp(evt) {
        var ty = linksBox.getCTM().f;
        if (ty &lt;= -window.innerHeight / 2) {
            ty += window.innerHeight / 2;
        } else if (ty &lt; 0) {
            ty = 0;
        }
        linksBox.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
	}

	function onClickArrowDown(evt) {
        var ty = linksBox.getCTM().f;
        if (ty + tocHeight &gt;= window.innerHeight * 3 / 2) {
            ty -= window.innerHeight / 2;
        } else if (ty + tocHeight &gt; window.innerHeight + 2 * MARGIN) {
            ty = window.innerHeight - tocHeight - 4 * MARGIN;
        }
        linksBox.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
    }	

    function onAnimationStep(progress) {
        var profileProgress = sozi.animation.profiles[ANIMATION_PROFILE](progress),
            remaining = 1 - profileProgress;
        translateX = translateXEnd * profileProgress + translateXStart * remaining;
        tocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,0)&quot;);
    }
    
    function onAnimationDone() {
        // Empty
    }
    
    /*
     * Create a function that responds to clicks on frame list entries.
     */
    function makeClickHandler(index) {
        return function (evt) {
            sozi.player.previewFrame(index);
            evt.stopPropagation();
        };
    }
    
    /*
     * The default event handler, to prevent event propagation
     * through the frame list.
     */
    function defaultEventHandler(evt) {
	    evt.stopPropagation();
    }
    
    /*
     * Adds a table of contents to the document.
     *
     * The table of contents is a rectangular region with the list of frame titles.
     * Clicking on a title moves the presentation to the corresponding frame.
     *
     * The table of contents is hidden by default.
     */
    function onDisplayReady() {
        var tocBackground = document.createElementNS(SVG_NS, &quot;rect&quot;),
            tocUp = document.createElementNS(SVG_NS, &quot;path&quot;),
            tocDown = document.createElementNS(SVG_NS, &quot;path&quot;),
            tocWidth = 0,
            textWidth,
            frameCount = sozi.document.frames.length,
            frameIndex = sozi.location.getFrameIndex(),
            i,
            text;

		svgRoot = document.documentElement;

        tocGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        tocGroup.setAttribute(&quot;id&quot;, &quot;sozi-toc&quot;);
        svgRoot.appendChild(tocGroup);

        linksBox = document.createElementNS(SVG_NS, &quot;g&quot;);
        tocGroup.appendChild(linksBox);
    
        tocBackground.setAttribute(&quot;id&quot;, &quot;sozi-toc-background&quot;);
        tocBackground.setAttribute(&quot;x&quot;, MARGIN);
        tocBackground.setAttribute(&quot;y&quot;, MARGIN);
        tocBackground.setAttribute(&quot;rx&quot;, MARGIN);
        tocBackground.setAttribute(&quot;ry&quot;, MARGIN);
        tocBackground.addEventListener(&quot;click&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mouseout&quot;, onMouseOut, false);
        linksBox.appendChild(tocBackground);

        for (i = 0; i &lt; frameCount; i += 1) {
            text = document.createElementNS(SVG_NS, &quot;text&quot;);
            text.appendChild(document.createTextNode(sozi.document.frames[i].title));
            linksBox.appendChild(text);

            if (i === frameIndex) {
                text.setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
            }
                     
            textWidth = text.getBBox().width;
            tocHeight += text.getBBox().height;
            if (textWidth &gt; tocWidth) {
                tocWidth = textWidth;
            }

            text.setAttribute(&quot;x&quot;, 2 * MARGIN);
            text.setAttribute(&quot;y&quot;, tocHeight + MARGIN);
            text.addEventListener(&quot;click&quot;, makeClickHandler(i), false);
            text.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        }

        tocUp.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocUp.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (5 * MARGIN) + 
                           &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                           &quot; l-&quot; + (2 * MARGIN) + &quot;,-&quot; + (3 * MARGIN) +
                           &quot; z&quot;);
        tocUp.addEventListener(&quot;click&quot;, onClickArrowUp, false);
        tocUp.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocGroup.appendChild(tocUp);
      
        tocDown.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocDown.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (7 * MARGIN) + 
                             &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                             &quot; l-&quot; + (2 * MARGIN) + &quot;,&quot; + (3 * MARGIN) +
                             &quot; z&quot;);
        tocDown.addEventListener(&quot;click&quot;, onClickArrowDown, false);
        tocDown.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);      
        tocGroup.appendChild(tocDown);

        tocBackground.setAttribute(&quot;width&quot;, tocWidth + 7 * MARGIN);
        tocBackground.setAttribute(&quot;height&quot;, tocHeight + 2 * MARGIN);
        
        translateXHidden = -tocWidth - 9 * MARGIN;
        translateXVisible = 0;
        translateX = translateXEnd = translateXHidden;
        
        tocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateXHidden + &quot;,0)&quot;);
        animator = new sozi.animation.Animator(onAnimationStep, onAnimationDone);
    }

	/*
	 * Highlight the current frame title in the frame list.
	 *
	 * This handler is called on each frame change,
	 * even when the frame list is hidden.
	 */
    function onFrameChange(index) {
        var current = document.getElementsByClassName(&quot;sozi-toc-current&quot;),
            textElements = linksBox.getElementsByTagName(&quot;text&quot;),
            i;
        for (i = 0; i &lt; current.length; i += 1) {
            current[i].removeAttribute(&quot;class&quot;);
        }
        textElements[index].setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
    }
    
    /*
     * Makes the table of contents visible.
     */
    exports.show = function () {
        translateXStart = translateX;
        translateXEnd = translateXVisible;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Makes the table of contents invisible.
     */
    exports.hide = function () {
        translateXStart = translateX;
        translateXEnd = translateXHidden;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Returns true if the table of contents is visible, false otherwise.
     */
    exports.isVisible = function () {
        return translateXEnd === translateXVisible;
    };

	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;cleanup&quot;, exports.hide);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

/*global module:true sozi:true */

module(&quot;sozi.animation&quot;, function (exports) {
    var window = this,
        TIME_STEP_MS = 40,
        animators = [],
        timer,
        requestAnimationFrame = window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame;

    /*
     * This function is called periodically and triggers the
     * animation steps in all animators managed by this module.
     *
     * If all animators are removed from the list of animators
     * managed by this module, then the periodic calling is disabled.
     *
     * This function can be called either through requestAnimationFrame()
     * if the browser supports it, or through setInterval().
     */
    function loop(timestamp) {
        var i;
        if (animators.length &gt; 0) {
            // If there is at least one animator,
            // and if the browser provides animation frames,
            // schedule this function to be called again in the next frame.
            if (requestAnimationFrame) {
                requestAnimationFrame(loop);
            }

            // Step all animators
            for (i = 0; i &lt; animators.length; i += 1) {
                animators[i].step(timestamp);
            }
        }
        else {
            // If all animators have been removed,
            // and if this function is called periodically
            // through setInterval, disable the periodic calling.
            if (!requestAnimationFrame) {
                window.clearInterval(timer);
            }
        }
    }
    
    /*
     * Start the animation loop.
     *
     * This function delegates the periodic update of all animators
     * to the loop() function, either through requestAnimationFrame()
     * if the browser supports it, or through setInterval().
     */
    function start() {
        if (requestAnimationFrame) {
            requestAnimationFrame(loop);
        }
        else {
            timer = window.setInterval(function () {
                loop(Date.now());
            }, TIME_STEP_MS);
        }
    }
    
    /*
     * Add a new animator object to the list of animators managed
     * by this module.
     *
     * If the animator list was empty before calling this function,
     * then the animation loop is started.
     */
    function addAnimator(animator) {
        animators.push(animator);
        if (animators.length === 1) {
            start();
        }
    }
    
    /*
     * Remove the given animator from the list of animators
     * managed by this module.
     */
    function removeAnimator(animator) {
        animators.splice(animators.indexOf(animator), 1);
    }
    
    /*
     * Construct a new animator.
     *
     * Parameters:
     * - onStep: the function to call on each animation step
     * - onDone: the function to call when the animation time is elapsed
     *
     * The onStep() function is expected to have the following parameters:
     *  - progress: a number between 0 and 1 (included) corresponding to
     *    the elapsed fraction of the total duration
     *  - data: an optional object passed to the application-specific animation code
     *
     * The new animator is initialized in the &quot;stopped&quot; state.
     */
    exports.Animator = function (onStep, onDone) {
        this.onStep = onStep;
        this.onDone = onDone;

        this.durationMs = 0;
        this.data = {};
        this.initialTime = 0;
        this.started = false;
    };

    /*
     * Start the current animator.
     *
     * Parameters:
     *  - durationMs: the animation duration, in milliseconds
     *  - data: an object to pass to the onStep function
     *
     * The current animator is added to the list of animators managed
     * by this module and is put in the &quot;started&quot; state.
     * It will be removed from the list automatically when the given duration
     * has elapsed.
     *
     * The onStep() function is called once before starting the animation.
     */
    exports.Animator.prototype.start = function (durationMs, data) {
        this.durationMs = durationMs;
        this.data = data;
        this.initialTime = Date.now();
        this.onStep(0, this.data);

        if (!this.started) {
            this.started = true;
            addAnimator(this);
        }
    };

    /*
     * Stop the current animator.
     *
     * The current animator is removed from the list of animators managed
     * by this module and is put in the &quot;stopped&quot; state.
     */
    exports.Animator.prototype.stop = function () {
        if (this.started) {
            removeAnimator(this);
            this.started = false;
        }
    };

    /*
     * Perform one animation step.
     *
     * This function is called automatically by the loop() function.
     * It calls the onStep() function of this animator.
     * If the animation duration has elapsed, the onDone() function of
     * the animator is called.
     */
    exports.Animator.prototype.step = function (timestamp) {
        var elapsedTime = timestamp - this.initialTime;
        if (elapsedTime &gt;= this.durationMs) {
            this.stop();
            this.onStep(1, this.data);
            this.onDone();
        } else {
            this.onStep(elapsedTime / this.durationMs, this.data);
        }
    };

    /*
     * The acceleration profiles.
     *
     * Each profile is a function that operates in the interval [0, 1]
     * and produces a result in the same interval.
     *
     * These functions are meant to be called in onStep() functions
     * to transform the progress indicator according to the desired
     * acceleration effect.
     */
    exports.profiles = {
        &quot;linear&quot;: function (x) {
            return x;
        },

        &quot;accelerate&quot;: function (x) {
            return Math.pow(x, 3);
        },

        &quot;strong-accelerate&quot;: function (x) {
            return Math.pow(x, 5);
        },

        &quot;decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 3);
        },

        &quot;strong-decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 5);
        },

        &quot;accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 3) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 5) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 2)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 3)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        }
    };
});


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.display&quot;, function (exports) {
    var window = this,
        document = window.document,
        initialBBox,
        SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

    exports.layers = {};

    /*
     * Initializes the current Display.
     *
     * This method prepares the DOM representation of the current SVG document.
     * All the image is embedded into a global &quot;g&quot; element on which transformations will be applied.
     * A clipping rectangle is added.
     *
     * This method must be called when the document is ready to be manipulated.
     */
    function onDocumentReady() {
        var l, svgClippedGroup, svgClipPath, idLayer,
            svgRoot = document.documentElement; // TODO check SVG tag
            
        initialBBox = svgRoot.getBBox();
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        
        // Initialize display geometry for all layers
        for (l = 0; l &lt; sozi.document.idLayerList.length; l += 1) {
            idLayer = sozi.document.idLayerList[l];
            exports.layers[idLayer] = {
                geometry: {
                    cx: 0,
                    cy: 0,
                    width: 1,
                    height: 1,
                    rotate: 0,
                    clip: true
                },
                svgClipRect: document.createElementNS(SVG_NS, &quot;rect&quot;),
                svgLayer: document.getElementById(idLayer)
            };

            // Add a clipping path
            svgClipPath = document.createElementNS(SVG_NS, &quot;clipPath&quot;);
            svgClipPath.setAttribute(&quot;id&quot;, &quot;sozi-clip-path-&quot; + idLayer);
            svgClipPath.appendChild(exports.layers[idLayer].svgClipRect);
            svgRoot.appendChild(svgClipPath);

            // Create a group that will support the clipping operation
            // and move the layer group into that new group
            svgClippedGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            svgClippedGroup.setAttribute(&quot;clip-path&quot;, &quot;url(#sozi-clip-path-&quot; + idLayer + &quot;)&quot;);
            
            // Adding the layer group to the clipped group must preserve layer ordering
            svgRoot.insertBefore(svgClippedGroup, exports.layers[idLayer].svgLayer);
            svgClippedGroup.appendChild(exports.layers[idLayer].svgLayer);
        }

        sozi.events.fire(&quot;displayready&quot;);
    }

    /*
     * Resizes the SVG document to fit the browser window.
     */
    function resize() {
        var svgRoot = document.documentElement;
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        exports.update();
    }

    /*
     * Returns an object with the geometrical properties of the current display.
     *
     * Attributes of the returned object :
     *    - x, y: the location of the top-left corner, in pixels
     *    - width, height: the size of the visible area, in pixels
     *    - scale: the scale factor to apply to the SVG document so that is fits the visible area
     */
    function getFrameGeometry(idLayer) {
        var g = exports.layers[idLayer].geometry,
            result = {};
        result.scale = Math.min(window.innerWidth / g.width, window.innerHeight / g.height);
        result.width = g.width * result.scale;
        result.height = g.height * result.scale;
        result.x = (window.innerWidth - result.width) / 2;
        result.y = (window.innerHeight - result.height) / 2;
        return result;
    }

    /*
     * Returns the geometrical properties of the frame that can be
     * created from a given element.
     *
     * If the element is a rectangle, the properties of the frames are based
     * on the geometrical properties of the rectangle.
     * Otherwise, the properties of the frame are based on the bounding box
     * of the given element.
     *
     * Parameters:
     *    - svgElement: an element from the SVG DOM
     *
     * Returns:
     *    - The default size, translation and rotation for the given element 
     */
    exports.getElementGeometry = function (svgElement) {
        var x, y, w, h, b, c,
            matrix = svgElement.getCTM(),
            scale = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);

        if (svgElement.nodeName === &quot;rect&quot;) {
            x = svgElement.x.baseVal.value;
            y = svgElement.y.baseVal.value;
            w = svgElement.width.baseVal.value;
            h = svgElement.height.baseVal.value;
        } else {
            b = svgElement.getBBox();
            x = b.x;
            y = b.y;
            w = b.width;
            h = b.height;
        }

        c = document.documentElement.createSVGPoint();
        c.x = x + w / 2;
        c.y = y + h / 2;
        c = c.matrixTransform(matrix);

        return {
            cx: c.x,
            cy: c.y,
            width: w * scale,
            height: h * scale,
            rotate: Math.atan2(matrix.b, matrix.a) * 180 / Math.PI
        };
    };

    /*
     * Returns the geometrical properties of the SVG document
     *
     * Returns:
     *    - The default size, translation and rotation for the document's bounding box
     */
    exports.getDocumentGeometry = function () {
        var idLayer,
            result = { layers: {} },
            value = {
                geometry: {
                    cx: initialBBox.x + initialBBox.width / 2,
                    cy: initialBBox.y + initialBBox.height / 2,
                    width: initialBBox.width,
                    height: initialBBox.height,
                    rotate: 0,
                    clip: false
                }
            };
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                result.layers[idLayer] = value;
            }
        }
        return result;
    };

    /*
     * Apply geometrical transformations to the image according to the current
     * geometrical attributes of this Display.
     *
     * This method is called automatically when the window is resized.
     */
    exports.update = function () {
        var idLayer, fg, lg, cr,
            translateX, translateY;

        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                lg = exports.layers[idLayer].geometry;
                fg = getFrameGeometry(idLayer);
                
                translateX = -lg.cx + lg.width / 2  + fg.x / fg.scale;
                translateY = -lg.cy + lg.height / 2 + fg.y / fg.scale;

                // Compute and apply the geometrical transformation to the layer group
                exports.layers[idLayer].svgLayer.setAttribute(&quot;transform&quot;,
                    &quot;scale(&quot; + fg.scale + &quot;)&quot; +
                    &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot; +
                    &quot;rotate(&quot; + (-lg.rotate) + ',' + lg.cx + &quot;,&quot; + lg.cy + &quot;)&quot;
                );

                // Adjust the location and size of the clipping rectangle and the frame rectangle
                cr = exports.layers[idLayer].svgClipRect;
                cr.setAttribute(&quot;x&quot;, lg.clip ? fg.x : 0);
                cr.setAttribute(&quot;y&quot;, lg.clip ? fg.y : 0);
                cr.setAttribute(&quot;width&quot;, lg.clip ? fg.width : window.innerWidth);
                cr.setAttribute(&quot;height&quot;, lg.clip ? fg.height : window.innerHeight);
            }
        }
    };

    /*
     * Transform the SVG document to show the given frame.
     *
     * Parameters:
     *    - frame: the frame to show
     */
    exports.showFrame = function (frame) {
        var idLayer, lg, fg, attr;
        for (idLayer in frame.layers) {
            if (frame.layers.hasOwnProperty(idLayer)) {
                fg = frame.layers[idLayer].geometry;
                lg = exports.layers[idLayer].geometry;
                for (attr in fg) {
                    if (fg.hasOwnProperty(attr)) {
                        lg[attr] = fg[attr];
                    }
                }
            }
        }
        exports.update();
    };

    /*
     * Apply an additional translation to the SVG document based on onscreen coordinates.
     *
     * Parameters:
     *    - deltaX: the horizontal displacement, in pixels
     *    - deltaY: the vertical displacement, in pixels
     */
    exports.drag = function (deltaX, deltaY) {
        var idLayer, lg, fg,
            angleRad;
        
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                lg = exports.layers[idLayer].geometry;
                fg = getFrameGeometry(idLayer);
                angleRad = lg.rotate * Math.PI / 180;
                lg.cx -= (deltaX * Math.cos(angleRad) - deltaY * Math.sin(angleRad)) / fg.scale;
                lg.cy -= (deltaX * Math.sin(angleRad) + deltaY * Math.cos(angleRad)) / fg.scale;
                lg.clip = false;
            }
        }
        exports.update();
    };

    /*
     * Zooms the display with the given factor.
     *
     * The zoom is centered around (x, y) with respect to the center of the display area.
     */
    exports.zoom = function (factor, x, y) {
        var idLayer,
            deltaX = (1 - factor) * (x - window.innerWidth / 2),
            deltaY = (1 - factor) * (y - window.innerHeight / 2);
            
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                exports.layers[idLayer].geometry.width /= factor;
                exports.layers[idLayer].geometry.height /= factor;
            }
        }
        
        exports.drag(deltaX, deltaY);
    };

    /*
     * Rotate the display with the given angle.
     *
     * The rotation is centered around the center of the display area.
     */
    exports.rotate = function (angle) {
        var idLayer;
        for (idLayer in exports.layers) {
            if (exports.layers.hasOwnProperty(idLayer)) {
                exports.layers[idLayer].geometry.rotate += angle;
                exports.layers[idLayer].geometry.rotate %= 360;
            }
        }
        exports.update();
    };
    
    sozi.events.listen(&quot;documentready&quot;, onDocumentReady);
    window.addEventListener(&quot;resize&quot;, resize, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 * @depend animation.js
 * @depend display.js
 */

/*global module:true sozi:true */

module(&quot;sozi.player&quot;, function (exports) {
    var display = sozi.display,
        window = this,
        animator,
        nextFrameTimeout,
        DEFAULT_DURATION_MS = 500,
        DEFAULT_ZOOM_PERCENT = -10,
        DEFAULT_PROFILE = &quot;linear&quot;,
        sourceFrameIndex = 0,
        currentFrameIndex = 0,
        playing = false,
        waiting = false;

    /*
     * Event handler: animation step.
     *
     * This method is called periodically by animator after the animation
     * has been started, and until the animation time is elapsed.
     *
     * Parameter data provides the following information:
     *    - initialState and finalState contain the geometrical properties of the display
     *      at the start and end of the animation.
     *    - profile is a reference to the speed profile function to use.
     *    - zoomWidth and zoomHeight are the parameters of the zooming polynomial if the current
     *      animation has a non-zero zooming effect.
     *
     * Parameter progress is a float number between 0 (start of the animation)
     * and 1 (end of the animation).
     */
    function onAnimationStep(progress, data) {
        var profileProgress, profileRemaining,
            idLayer, lg, attr, ps;

        for (idLayer in data) {
            if (data.hasOwnProperty(idLayer)) {
                lg = display.layers[idLayer].geometry;
                
                profileProgress = data[idLayer].profile(progress);
                profileRemaining = 1 - profileProgress;
                
                for (attr in data[idLayer].initialState) {
                    if (data[idLayer].initialState.hasOwnProperty(attr)) {
                        if (typeof data[idLayer].initialState[attr] === &quot;number&quot; &amp;&amp; typeof data[idLayer].finalState[attr] === &quot;number&quot;) {
                            lg[attr] = data[idLayer].finalState[attr] * profileProgress + data[idLayer].initialState[attr] * profileRemaining;
                        }
                    }
                }

                if (data[idLayer].zoomWidth &amp;&amp; data[idLayer].zoomWidth.k !== 0) {
                    ps = progress - data[idLayer].zoomWidth.ts;
                    lg.width = data[idLayer].zoomWidth.k * ps * ps + data[idLayer].zoomWidth.ss;
                }

                if (data[idLayer].zoomHeight &amp;&amp; data[idLayer].zoomHeight.k !== 0) {
                    ps = progress - data[idLayer].zoomHeight.ts;
                    lg.height = data[idLayer].zoomHeight.k * ps * ps + data[idLayer].zoomHeight.ss;
                }

                lg.clip = data[idLayer].finalState.clip;
            }
        }
        
        display.update();
    }

    /*
     * Starts waiting before moving to the next frame.
     *
     * It the current frame has a timeout set, this method
     * will register a timer to move to the next frame automatically
     * after the specified time.
     *
     * If the current frame is the last, the presentation will
     * move to the first frame.
     */
    function waitTimeout() {
        var index;
        if (sozi.document.frames[currentFrameIndex].timeoutEnable) {
            waiting = true;
            index = (currentFrameIndex + 1) % sozi.document.frames.length;
            nextFrameTimeout = window.setTimeout(function () {
                    exports.moveToFrame(index);
                },
                sozi.document.frames[currentFrameIndex].timeoutMs
            );
        }
    }

    /*
     * Event handler: animation done.
     *
     * This method is called by animator when the current animation is finished.
     *
     * If the animation was a transition in the normal course of the presentation,
     * then we call the waitTimeout method to process the timeout property of the current frame.
     */
    function onAnimationDone() {
        sourceFrameIndex = currentFrameIndex;
        if (playing) {
            waitTimeout();
        }
    }

    /*
     * Starts the presentation from the given frame index (0-based).
     *
     * This method sets the &quot;playing&quot; flag, shows the desired frame
     * and calls waitTimeout.
     */
    exports.startFromIndex = function (index) {
        playing = true;
        waiting = false;
        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.showFrame(sozi.document.frames[index]);
        waitTimeout();
    };

    exports.restart = function () {
        exports.startFromIndex(currentFrameIndex);
    };

    /*
     * Stops the presentation.
     *
     * This method clears the &quot;playing&quot;.
     * If the presentation was in &quot;waiting&quot; mode due to a timeout
     * in the current frame, then it stops waiting.
     * The current animation is stopped in its current state.
     */
    exports.stop = function () {
        animator.stop();
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        playing = false;
        sourceFrameIndex = currentFrameIndex;
    };

    function getZoomData(zoomPercent, s0, s1) {
        var result = {
                ss: ((zoomPercent &lt; 0) ? Math.max(s0, s1) : Math.min(s0, s1)) * (100 - zoomPercent) / 100,
                ts: 0.5,
                k: 0
            },
            a, b, c, d, u, v;

        if (zoomPercent !== 0) {
            a = s0 - s1;
            b = s0 - result.ss;
            c = s1 - result.ss;

            if (a !== 0) {
                d = Math.sqrt(b * c);

                u = (b - d) / a;
                v = (b + d) / a;

                result.ts = (u &gt; 0 &amp;&amp; u &lt;= 1) ? u : v;
            }

            result.k = b / result.ts / result.ts;
        }

        return result;
    }

    /*
     * Jump to a frame with the given index (0-based).
     *
     * This method does not animate the transition from the current
     * state of the display to the desired frame.
     *
     * The presentation is stopped: if a timeout has been set for the
     * target frame, it will be ignored.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.jumpToFrame = function (index) {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);

        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.showFrame(sozi.document.frames[index]);

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Returns an associative array where keys are layer names
     * and values are objects in the form { initialState: finalState: profile: zoomWidth: zoomHeight:}
     */
    function getAnimationData(initialState, finalState, zoomPercent, profile) {
        var g, idLayer, zp,
            data = {};
        
        for (idLayer in initialState.layers) {
            if (initialState.layers.hasOwnProperty(idLayer)) {
                data[idLayer] = {
                    initialState: {},
                    finalState: {}
                };
                
                data[idLayer].profile = profile || finalState.layers[idLayer].transitionProfile;

                // Copy all properties of given final state
                for (g in initialState.layers[idLayer].geometry) {
                    if (initialState.layers[idLayer].geometry.hasOwnProperty(g)) {
                        data[idLayer].initialState[g] = initialState.layers[idLayer].geometry[g];
                        // If the current layer is referenced in final state, copy the final properties
                        // else, copy initial state to final state for the current layer. 
                        if (finalState.layers.hasOwnProperty(idLayer)) {
                            data[idLayer].finalState[g] = finalState.layers[idLayer].geometry[g];
                        }
                        else {
                            data[idLayer].finalState[g] = initialState.layers[idLayer].geometry[g];
                        }
                    }
                }

                // Keep the smallest angle difference between initial state and final state
                data[idLayer].initialState.rotate = (data[idLayer].initialState.rotate - 180) % 360 + 180;
                data[idLayer].finalState.rotate = (data[idLayer].finalState.rotate - 180) % 360 + 180;
        
                if (data[idLayer].finalState.rotate - data[idLayer].initialState.rotate &gt; 180) {
                    data[idLayer].finalState.rotate -= 360;
                }
                else if (data[idLayer].finalState.rotate - data[idLayer].initialState.rotate &lt; -180) {
                    data[idLayer].initialState.rotate -= 360;
                }

                zp = zoomPercent || finalState.layers[idLayer].transitionZoomPercent;
                
                if (zp &amp;&amp; finalState.layers.hasOwnProperty(idLayer)) {
                    data[idLayer].zoomWidth = getZoomData(zp,
                        initialState.layers[idLayer].geometry.width,
                        finalState.layers[idLayer].geometry.width);
                    data[idLayer].zoomHeight = getZoomData(zp,
                        initialState.layers[idLayer].geometry.height,
                        finalState.layers[idLayer].geometry.height);
                }
            }
        }
        
        return data;
    }
    
    exports.previewFrame = function (index) {
        currentFrameIndex = index;
        animator.start(DEFAULT_DURATION_MS, 
            getAnimationData(display, sozi.document.frames[index],
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]));
        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to a frame with the given index (0-based).
     *
     * This method animates the transition from the current
     * state of the display to the desired frame.
     *
     * If the given frame index corresponds to the next frame in the list,
     * the transition properties of the next frame are used.
     * Otherwise, default transition properties are used.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.moveToFrame = function (index) {
        var durationMs, zoomPercent, profile;

        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }

        if (index === (currentFrameIndex + 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[index].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
        }
        else {
            durationMs = DEFAULT_DURATION_MS;
            zoomPercent = DEFAULT_ZOOM_PERCENT;
            profile = sozi.animation.profiles[DEFAULT_PROFILE];
        }

        sozi.events.fire(&quot;cleanup&quot;);

        playing = true;
        currentFrameIndex = index;

        animator.start(durationMs, getAnimationData(display, sozi.document.frames[index], zoomPercent, profile));

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to the first frame of the presentation.
     */
    exports.moveToFirst = function () {
        exports.moveToFrame(0);
    };

    /*
     * Jumps to the previous frame
     */
    exports.jumpToPrevious = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &lt;= currentFrameIndex) {
            index -= 1;
        }
        if (index &gt;= 0) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the previous frame.
     */
    exports.moveToPrevious = function () {
        var index = currentFrameIndex,
            frame;

        for (index -= 1; index &gt;= 0; index -= 1) {
            frame = sozi.document.frames[index];
            if (!frame.timeoutEnable || frame.timeoutMs !== 0) {
                exports.moveToFrame(index);
                break;
            }
        }
    };

    /*
     * Jumps to the next frame
     */
    exports.jumpToNext = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &gt;= currentFrameIndex) {
            index += 1;
        }
        if (index &lt; sozi.document.frames.length) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the next frame.
     */
    exports.moveToNext = function () {
        if (currentFrameIndex &lt; sozi.document.frames.length - 1 || sozi.document.frames[currentFrameIndex].timeoutEnable) {
            exports.moveToFrame((currentFrameIndex + 1) % sozi.document.frames.length);
        }
    };

    /*
     * Moves to the last frame of the presentation.
     */
    exports.moveToLast = function () {
        exports.moveToFrame(sozi.document.frames.length - 1);
    };

    /*
     * Restores the current frame.
     *
     * This method restores the display to fit the current frame,
     * e.g. after the display has been zoomed or dragged.
     */
    exports.moveToCurrent = function () {
        exports.moveToFrame(currentFrameIndex);
    };

    /*
     * Shows all the document in the browser window.
     */
    exports.showAll = function () {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);
        animator.start(DEFAULT_DURATION_MS, 
            getAnimationData(display, display.getDocumentGeometry(),
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]
            )
        );
    };

    /*
     * Event handler: display ready.
     */
    function onDisplayReady() {
        exports.startFromIndex(sozi.location.getFrameIndex());
    }    

    animator = new sozi.animation.Animator(onAnimationStep, onAnimationDone);

    sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend player.js
 * @depend display.js
 */

/*global module:true sozi:true */

module(&quot;sozi.actions&quot;, function (exports) {
    var player = sozi.player,
        display = sozi.display,
        window = this,
        document = window.document,
        DRAG_BUTTON = 0, // Left button
        TOC_BUTTON = 1, // Middle button
        SCALE_FACTOR = 1.05,
        ROTATE_STEP = 5,
        dragButtonIsDown = false,
        dragged = false,
        dragClientX = 0,
        dragClientY = 0;
    
    /*
     * Zooms the display in the given direction.
     *
     * Only the sign of direction is used:
     *    - zoom in when direction &gt; 0
     *    - zoom out when direction &lt;= 0
     *
     * The scaling is centered around point (x, y).
     */
    function zoom(direction, x, y) {
        player.stop();
        display.zoom(direction &gt; 0 ? SCALE_FACTOR : 1 / SCALE_FACTOR, x, y);
    }
    
    /*
     * Rotate the display in the given direction.
     *
     * Only the sign of direction is used:
     *    - rotate anticlockwise when direction &gt; 0
     *    - rotate clockwise when direction &lt;= 0
     */
    function rotate(direction) {
        player.stop();
        display.rotate(direction &gt; 0 ? ROTATE_STEP : -ROTATE_STEP);
    }
    
    /*
     * Show/hide the frame list.
     *
     * The presentation stops when the frame list is showed,
     * and restarts when the frame list is hidden.
     */
    function toggleFrameList() {
        if (sozi.framelist.isVisible()) {
            sozi.framelist.hide();
            player.restart();
        } else {
            player.stop();
            sozi.framelist.show();
        }
    }

    /*
     * Event handler: mouse down.
     *
     * When the left button is pressed, we register the current coordinates
     * in case the mouse will be dragged. Flag &quot;dragButtonIsDown&quot; is set until
     * the button is released (onMouseUp). This flag is used by onMouseMove.
     *
     * When the middle button is pressed, the table of contents is shown or hidden.
     */
    function onMouseDown(evt) {
        if (evt.button === DRAG_BUTTON) {
            dragButtonIsDown = true;
            dragged = false;
            dragClientX = evt.clientX;
            dragClientY = evt.clientY;
        } else if (evt.button === TOC_BUTTON) {
            toggleFrameList();
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse move.
     *
     * If the left mouse button is down, then the mouse move is a drag action.
     * This method computes the displacement since the button was pressed or
     * since the last move, and updates the reference coordinates for the next move.
     */
    function onMouseMove(evt) {
        if (dragButtonIsDown) {
            player.stop();
            dragged = true;
            sozi.events.fire(&quot;cleanup&quot;);
            display.drag(evt.clientX - dragClientX, evt.clientY - dragClientY);
            dragClientX = evt.clientX;
            dragClientY = evt.clientY;
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse up.
     *
     * Releasing the left button resets the &quot;dragButtonIsDown&quot; flag.
     */
    function onMouseUp(evt) {
        if (evt.button === DRAG_BUTTON) {
            dragButtonIsDown = false;
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: context menu (i.e. right click).
     *
     * Right click goes one frame back.
     *
     * There is no &quot;click&quot; for the right mouse button and the menu can't
     * be prevented in &quot;onMouseDown&quot;.
     */
    function onContextMenu(evt) {
        player.moveToPrevious();
        evt.stopPropagation();
        evt.preventDefault();
    }

    /*
     * Event handler: mouse click.
     *
     * Left-click moves the presentation to the next frame.
     *
     * No &quot;click&quot; event is generated for the middle button in Firefox.
     * See &quot;onMouseDown&quot; for middle click handling.
     *
     * Dragging the mouse produces a &quot;click&quot; event when the button is released.
     * If flag &quot;dragged&quot; was set by &quot;onMouseMove&quot;, then the click event is the result
     * of a drag action.
     */
    function onClick(evt) {
        if (!dragged &amp;&amp; evt.button !== TOC_BUTTON) {
            player.moveToNext();
        }
        evt.stopPropagation();
    }

    /*
     * Event handler: mouse wheel.
     *
     * Rolling the mouse wheel stops the presentation and zooms the current display.
     */
    function onWheel(evt) {
        var delta = 0;
        if (!evt) {
            evt = window.event;
        }
        if (evt.wheelDelta) { // IE and Opera
            delta = evt.wheelDelta; 
            if (window.opera) { // Opera
                delta = -delta;
            }
        } else if (evt.detail) { // Mozilla
            delta = -evt.detail;
        }

        if (delta !== 0) {
            if (evt.shiftKey) {
                rotate(delta);
            } else {
                zoom(delta, evt.clientX, evt.clientY);
            }
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /*
     * Event handler: key press.
     *
     * Keyboard handling is split into two methods: onKeyPress and onKeyDown
     * in order to get the same behavior in Mozilla and Webkit.
     *
     * This method handles character keys &quot;+&quot;, &quot;-&quot;, &quot;=&quot;, &quot;F&quot; and &quot;T&quot;.
     */
    function onKeyPress(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.charCode) {
        case 43: // +
            zoom(1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 45: // -
            zoom(-1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 61: // =
            player.moveToCurrent();
            break;
        case 70: // F
        case 102: // f
            player.showAll();
            break;
        case 84: // T
        case 116: // t
            toggleFrameList();
            break;
        case 82: // R
            rotate(-1);
            break;
        case 114: // r
            rotate(1);
            break;
        }

        evt.stopPropagation();
    }

    /*
     * Event handler: key down.
     *
     * Keyboard handling is split into two methods: onKeyPress and onKeyDown
     * in order to get the same behavior in Mozilla and Webkit.
     *
     * This method handles navigation keys (arrows, page up/down, home, end)
     * and the space and enter keys.
     */
    function onKeyDown(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.keyCode) {
        case 36: // Home
            player.moveToFirst();
            break;
        case 35: // End
            player.moveToLast();
            break;
        case 38: // Arrow up
            player.jumpToPrevious();
            break;
        case 33: // Page up
        case 37: // Arrow left
            player.moveToPrevious();
            break;
        case 40: // Arrow down
            player.jumpToNext();
            break;
        case 34: // Page down
        case 39: // Arrow right
        case 13: // Enter
        case 32: // Space
            player.moveToNext();
            break;
        }
        evt.stopPropagation();
    }

    function onLoad() {
        var svgRoot = document.documentElement;

        // TODO also use shift-click as an alternative for middle-click
        svgRoot.addEventListener(&quot;click&quot;, onClick, false);
        svgRoot.addEventListener(&quot;mousedown&quot;, onMouseDown, false);
        svgRoot.addEventListener(&quot;mouseup&quot;, onMouseUp, false);
        svgRoot.addEventListener(&quot;mousemove&quot;, onMouseMove, false);
        svgRoot.addEventListener(&quot;keypress&quot;, onKeyPress, false);
        svgRoot.addEventListener(&quot;keydown&quot;, onKeyDown, false);
        svgRoot.addEventListener(&quot;contextmenu&quot;, onContextMenu, false);
        svgRoot.addEventListener(&quot;DOMMouseScroll&quot;, onWheel, false); // Mozilla
        window.onmousewheel = onWheel;
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2012 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
* 
* See http://sozi.baierouge.fr/wiki/en:license for details.
*
* @depend module.js
* @depend events.js
*/

/*global module:true sozi:true */

module(&quot;sozi.document&quot;, function (exports) {
    var window = this,
        document = window.document,
        SOZI_NS = &quot;http://sozi.baierouge.fr&quot;,
        DEFAULTS = {
            &quot;title&quot;: &quot;Untitled&quot;,
            &quot;sequence&quot;: &quot;0&quot;,
            &quot;hide&quot;: &quot;true&quot;,
            &quot;clip&quot;: &quot;true&quot;,
            &quot;timeout-enable&quot;: &quot;false&quot;,
            &quot;timeout-ms&quot;: &quot;5000&quot;,
            &quot;transition-duration-ms&quot;: &quot;1000&quot;,
            &quot;transition-zoom-percent&quot;: &quot;0&quot;,
            &quot;transition-profile&quot;: &quot;linear&quot;
        };

    exports.frames = [];
    exports.idLayerList = [];
    
    /*
    * Returns the value of an attribute of a given Sozi SVG element.
    *
    * If the attribute is not set, then a default value is returned.
    * See DEFAULTS.
    */
    function readAttribute(soziElement, attr) {
        var value = soziElement.getAttributeNS(SOZI_NS, attr);
        return value === &quot;&quot; ? DEFAULTS[attr] : value;
    }

    function readLayerProperties(frame, idLayer, soziElement) {
        var layer = frame.layers[idLayer] = frame.layers[idLayer] || {
                idLayer: idLayer, // FIXME never used
                geometry: {
                    clip: DEFAULTS.clip
                }
            },
            clip = layer.geometry.clip,
            svgElement;
        
        if (typeof layer.hide === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;hide&quot;)) {
            layer.hide = readAttribute(soziElement, &quot;hide&quot;) === &quot;true&quot;;
        }

        if (typeof layer.transitionZoomPercent === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-zoom-percent&quot;)) {
            layer.transitionZoomPercent = parseInt(readAttribute(soziElement, &quot;transition-zoom-percent&quot;), 10);
        }

        if (typeof layer.transitionProfile === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-profile&quot;)) {
            layer.transitionProfile = sozi.animation.profiles[readAttribute(soziElement, &quot;transition-profile&quot;) || &quot;linear&quot;];
        }
        
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;refid&quot;)) {
            // The previous value of the &quot;clip&quot; attribute will be preserved
            // when setting the new geometry object.
            svgElement = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;refid&quot;));
            if (svgElement) {
                if (layer.hide) {
                    svgElement.style.visibility = &quot;hidden&quot;;
                }
                layer.geometry = sozi.display.getElementGeometry(svgElement);
                layer.geometry.clip = clip;
            }
        }
            
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;clip&quot;)) {
            layer.geometry.clip = readAttribute(soziElement, &quot;clip&quot;) === &quot;true&quot;;
        }
    }
    
    /*
    * Builds the list of frames from the current document.
    *
    * This method collects all elements with tag &quot;sozi:frame&quot; and
    * retrieves their geometrical and animation attributes.
    * SVG elements that should be hidden during the presentation are hidden.
    *
    * The resulting list is available in frames, sorted by frame indices.
    */
    function readFrames() {
        var soziFrameList, soziLayerList,
            svgWrapper, svgElementList,
            svgRoot = document.documentElement,
            SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

        // Collect all group ids of &lt;layer&gt; elements
        soziLayerList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
        soziLayerList.forEach(function (soziLayer) {
            var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
            if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) === -1 &amp;&amp; document.getElementById(idLayer)) {
                exports.idLayerList.push(idLayer);
            }
        });

        // If at least one &lt;frame&gt; element has a refid attribute,
        // reorganize the document, grouping objects that do not belong
        // to a group referenced in &lt;layer&gt; elements
        soziFrameList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;frame&quot;));
        if (soziFrameList.some(function (soziFrame) {
                return soziFrame.hasAttributeNS(SOZI_NS, &quot;refid&quot;);
            }))
        {
            // Create the first wrapper group
            svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);

            // For each child of the root SVG element
            svgElementList = Array.prototype.slice.call(svgRoot.childNodes);
            svgElementList.forEach(function (svgElement, index) {
                if (!svgElement.getAttribute) {
                    // Remove text elements
                    svgRoot.removeChild(svgElement);
                }
                else if (exports.idLayerList.indexOf(svgElement.getAttribute(&quot;id&quot;)) === -1) {
                    // If the current element is not a referenced layer,
                    // move it to the current wrapper element
                    // FIXME move graphic elements only
                    svgRoot.removeChild(svgElement);
                    svgWrapper.appendChild(svgElement);
                }
                else if (svgWrapper.firstChild) {
                    // If the current element is a referenced layer,
                    // and if there were other non-referenced elements before it,
                    // insert the wrapper group before the current element
                    svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + index);
                    exports.idLayerList.push(&quot;sozi-wrapper-&quot; + index);
                    svgRoot.insertBefore(svgWrapper, svgElement);
                    
                    // Prepare a new wrapper element                
                    svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
                }
            });

            // Append last wrapper if needed
            if (svgWrapper.firstChild) {
                svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + svgElementList.length);
                exports.idLayerList.push(&quot;sozi-wrapper-&quot; + svgElementList.length);
                svgRoot.appendChild(svgWrapper);
            }            
        }

        // Analyze &lt;frame&gt; elements
        soziFrameList.forEach(function (soziFrame) {
            var idLayer,
                newFrame = {
                    id: soziFrame.getAttribute(&quot;id&quot;),
                    title: readAttribute(soziFrame, &quot;title&quot;),
                    sequence: parseInt(readAttribute(soziFrame, &quot;sequence&quot;), 10),
                    timeoutEnable: readAttribute(soziFrame, &quot;timeout-enable&quot;) === &quot;true&quot;,
                    timeoutMs: parseInt(readAttribute(soziFrame, &quot;timeout-ms&quot;), 10),
                    transitionDurationMs: parseInt(readAttribute(soziFrame, &quot;transition-duration-ms&quot;), 10),
                    layers: {}
                };

            // The &lt;frame&gt; element defines default properties for all layers
            exports.idLayerList.forEach(function (idLayer) {
                readLayerProperties(newFrame, idLayer, soziFrame);
            });

            // Collect and analyze &lt;layer&gt; elements in the current &lt;frame&gt; element
            soziLayerList = Array.prototype.slice.call(soziFrame.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
            soziLayerList.forEach(function (soziLayer) {
                var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
                if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) !== -1) {
                    readLayerProperties(newFrame, idLayer, soziLayer);
                }
            });
            
            // If the &lt;frame&gt; element has at least one valid layer,
            // add it to the frame list
            for (idLayer in newFrame.layers) {
                if (newFrame.layers.hasOwnProperty(idLayer)) {
                    exports.frames.push(newFrame);
                    break;
                }
            }
        });
        
        exports.frames.sort(
            function (a, b) {
                return a.sequence - b.sequence;
            }
        );
    }

    /*
    * Event handler: document load.
    *
    * This function reads the frames from the document.
    */
    function onLoad() {
        document.documentElement.removeAttribute(&quot;viewBox&quot;);
        readFrames();
        sozi.events.fire(&quot;documentready&quot;);
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

/*global module:true sozi:true */

module(&quot;sozi.location&quot;, function (exports) {
    var window = this,
        changedFromWithin = false;
    
    /*
     * Returns the frame index given in the URL hash.
     *
     * In the URL, the frame index starts a 1.
     * This method converts it into a 0-based index.
     *
     * If the URL hash is not a positive integer, then 0 is returned.
     * It the URL hash is an integer greater than the last frame index, then
     * the last frame index is returned.
     */
    exports.getFrameIndex = function () {
        var index = window.location.hash ?
            parseInt(window.location.hash.slice(1), 10) - 1 : 0;
        if (isNaN(index) || index &lt; 0) {
            return 0;
        } else if (index &gt;= sozi.document.frames.length) {
            return sozi.document.frames.length - 1;
        } else {
            return index;
        }
    };

    /*
     * Event handler: hash change.
     *
     * This function is called when the URL hash is changed.
     * If the hash was changed manually in the address bar, and if it corresponds to
     * a valid frame number, then the presentation moves to that frame.
     *
     * The hashchange event can be triggered externally, by the user modifying the URL,
     * or internally, by the script modifying window.location.hash.
     */
    function onHashChange() {
        var index = exports.getFrameIndex();
        if (!changedFromWithin) {
            sozi.player.moveToFrame(index);
        }
        changedFromWithin = false;
    }
    
    /*
     * Event handler: frame change.
     *
     * This function is called when the presentation has reached a
     * new frame.
     * The URL hash is changed based on the provided frame index.
     */
    function onFrameChange(index) {
        changedFromWithin = true;
        window.location.hash = &quot;#&quot; + (index + 1);
    }

	/*
	 * Event handler: document load.
	 *
	 * This function registers the &quot;framechange&quot; handler.
	 */
    function onLoad() {
        sozi.events.listen(&quot;framechange&quot;, onFrameChange);        
    }
    
    window.addEventListener(&quot;hashchange&quot;, onHashChange, false);        
    window.addEventListener(&quot;load&quot;, onLoad, false);        
});

/*
    @depend framenumber.js
    @depend framelist.js
    @depend actions.js
    @depend player.js
    @depend display.js
    @depend document.js
    @depend location.js
*/

</script>
  <style
     ns1:version="12.03-18171759"
     id="sozi-style">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

#sozi-toc text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}

#sozi-toc text:hover {
   fill: #0cf;
   cursor: pointer;
}

#sozi-toc text.sozi-toc-current {
   fill: #fa4;
}

#sozi-toc-background {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 10;
   fill: #222;
   fill-opacity: 0.9;
}

.sozi-toc-arrow {
   fill: #eff;
   fill-opacity: 0.75;
   stroke: none;
}

.sozi-toc-arrow:hover {
   fill: #0cf;
}

#sozi-framenumber circle {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 4;
   fill: #222;
   fill-opacity: 0.9;
}

#sozi-framenumber text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}

</style>
  <script
     ns1:version="12.03-18171759"
     id="sozi-extras-addvideo-script">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

this.addEventListener(&quot;load&quot;, function () {
	var	svgNs = &quot;http://www.w3.org/2000/svg&quot;,
	    soziNs = &quot;http://sozi.baierouge.fr&quot;,
		xhtmlNs = &quot;http://www.w3.org/1999/xhtml&quot;,
		window = this,
		document = window.document,
		mediaSources = [],
		mediaList, i, j, k, rect, foreignObject,
		html, htmlMedia, htmlSource;
	
    function clickHandler(evt) {
        evt.stopPropagation();
    }
    
    function registerFrameChangeHandler(htmlMedia, startFrame, stopFrame) {
        sozi.events.listen(&quot;framechange&quot;, function(index) {
            var frameId = sozi.document.frames[index].id;
		    if (frameId === startFrame) {
		        htmlMedia.play();
			}
            else if (frameId === stopFrame) {
                htmlMedia.pause();
            }
		});
    }
    
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;video&quot;));
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;audio&quot;));

	mediaList = [];
	for (k = 0; k &lt; mediaSources.length; k += 1) {
	    for (i = 0; i &lt; mediaSources[k].length; i += 1) {
		    rect = mediaSources[k][i].parentNode;
	
		    // Create HTML media source element
		    htmlSource = document.createElementNS(xhtmlNs, &quot;source&quot;);
		    htmlSource.setAttribute(&quot;type&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;type&quot;));
		    htmlSource.setAttribute(&quot;src&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;src&quot;));

		    for (j = 0; j &lt; mediaList.length; j += 1) {
			    if (mediaList[j].rect === rect) {
				    break;
			    }
		    }
	
		    if (j === mediaList.length) {
		        rect.setAttribute(&quot;visibility&quot;, &quot;hidden&quot;);
		        
			    // Create HTML media element
			    htmlMedia = document.createElementNS(xhtmlNs, mediaSources[k][i].tagName);
			    // htmlMedia.setAttribute(&quot;poster&quot;, &quot;__dummy__.png&quot;);
			    htmlMedia.setAttribute(&quot;controls&quot;, &quot;controls&quot;);
			    if (mediaSources[k][i].tagName === &quot;video&quot;) {
			        htmlMedia.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			        htmlMedia.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    }
		        htmlMedia.addEventListener(&quot;click&quot;, clickHandler, false);
		        htmlMedia.addEventListener(&quot;contextmenu&quot;, clickHandler, false);
		        
			    // Create HTML root element
			    html = document.createElementNS(xhtmlNs, &quot;html&quot;);
			    html.appendChild(htmlMedia);
		
			    // Create SVG foreign object
			    foreignObject = document.createElementNS(svgNs, &quot;foreignObject&quot;);
			    foreignObject.setAttribute(&quot;x&quot;, rect.getAttribute(&quot;x&quot;));
			    foreignObject.setAttribute(&quot;y&quot;, rect.getAttribute(&quot;y&quot;));
			    foreignObject.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			    foreignObject.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    foreignObject.appendChild(html);
				
			    rect.parentNode.insertBefore(foreignObject, rect.nextSibling);
			
			    if (mediaSources[k][i].hasAttributeNS(soziNs, &quot;start-frame&quot;)) {
			        registerFrameChangeHandler(htmlMedia,
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;start-frame&quot;),
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;stop-frame&quot;)
			         );
			    }
			
			    mediaList.push({
				    rect: mediaSources[k][i].parentNode,
				    htmlMedia: htmlMedia
			    });
		    }
	    }
	    
		// Append HTML source element to current HTML media element
		mediaList[j].htmlMedia.appendChild(htmlSource);
	}				
}, false);

</script>
</svg>
