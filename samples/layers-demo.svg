<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="http://sozi.baierouge.fr"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="2125.9841"
   height="1062.9921"
   id="svg2"
   version="1.1"
   inkscape:version="0.48.3.1 r9886"
   sodipodi:docname="layers-demo.svg">
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.98994949"
     inkscape:cx="436.35671"
     inkscape:cy="715.19648"
     inkscape:document-units="px"
     inkscape:current-layer="layer3"
     showgrid="true"
     units="mm"
     inkscape:window-width="1280"
     inkscape:window-height="963"
     inkscape:window-x="0"
     inkscape:window-y="27"
     inkscape:window-maximized="1"
     inkscape:snap-grids="true">
    <inkscape:grid
       spacingy="1mm"
       spacingx="1mm"
       units="mm"
       snapvisiblegridlinesonly="true"
       enabled="true"
       visible="true"
       empspacing="5"
       id="grid2985"
       type="xygrid" />
  </sodipodi:namedview>
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     style="display:none"
     inkscape:label="Fond"
     id="layer3"
     inkscape:groupmode="layer">
    <rect
       y="35.43301"
       x="70.866142"
       height="637.79529"
       width="690.94489"
       id="rect3037"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
  </g>
  <g
     style="display:inline"
     transform="translate(0,10.629915)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Ciel">
    <rect
       inkscape:label="#rect2987"
       y="42.519665"
       x="159.44882"
       height="106.29921"
       width="141.73228"
       id="ciel"
       style="fill:#87cdde;stroke:none" />
    <path
       transform="matrix(0.79999999,0,0,0.79999999,42.519693,19.133854)"
       d="m 283.46456,69.094467 c 0,4.892286 -3.96598,8.858268 -8.85827,8.858268 -4.89228,0 -8.85827,-3.965982 -8.85827,-8.858268 0,-4.892286 3.96599,-8.858268 8.85827,-8.858268 4.89229,0 8.85827,3.965982 8.85827,8.858268 z"
       sodipodi:ry="8.8582678"
       sodipodi:rx="8.8582678"
       sodipodi:cy="69.094467"
       sodipodi:cx="274.60629"
       id="path2989"
       style="fill:#ffff00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       sodipodi:type="arc" />
  </g>
  <g
     style="display:inline"
     inkscape:label="Nuages"
     id="layer2"
     inkscape:groupmode="layer">
    <path
       sodipodi:nodetypes="cscscscscsc"
       inkscape:connector-curvature="0"
       id="path2997"
       d="m 343.70079,205.51175 c 0,0 0,-7.08661 10.62992,-7.08661 7.08661,0 10.62992,7.08661 10.62992,7.08661 0,0 3.54331,-3.5433 10.62992,-3.5433 7.08661,0 10.47294,6.64499 10.47294,6.64499 0,0 7.2436,0.44162 7.2436,3.98493 0,7.08661 -10.62993,7.08661 -10.62993,7.08661 0,0 -7.08661,7.08662 -17.71653,7.08662 -21.25984,0 -24.80315,-7.08662 -24.80315,-7.08662 0,0 -7.08661,0 -7.08661,-7.08661 0,-7.08662 10.62992,-7.08662 10.62992,-7.08662 z"
       style="fill:#ffffff;stroke:none" />
    <path
       style="fill:#ffffff;stroke:none"
       d="m 187.79527,209.05507 c 0,0 3.54331,-3.5433 7.08662,-3.54331 7.08661,-1e-5 7.08661,3.5433 7.08661,3.5433 0,0 1e-5,-3.5433 7.08662,-3.5433 7.08661,0 7.08661,7.08662 7.08661,7.08662 0,0 5.12792,3.91738 3.54331,7.08661 -3.54331,7.08661 -14.17323,3.54331 -14.17323,3.54331 0,0 0,3.5433 -10.62992,3.5433 -10.62992,0 -10.62992,-7.08661 -10.62992,-7.08661 0,0 -10.62993,0 -7.08662,-7.08661 3.54331,-7.08662 10.62992,-3.54331 10.62992,-3.54331 z"
       id="path3003"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="cscscscscsc" />
    <rect
       inkscape:label="#rect3039"
       style="fill:none;stroke:#ff6600"
       id="nuages-depart"
       width="141.73228"
       height="106.29921"
       x="159.44882"
       y="166.53539"
       transform="translate(0,10.629915)" />
    <rect
       inkscape:label="#rect3041"
       y="166.53539"
       x="304.7244"
       height="106.29921"
       width="141.73228"
       id="nuages-arrivee"
       style="fill:none;stroke:#ff6600"
       transform="translate(0,10.629915)" />
  </g>
  <g
     style="display:inline"
     inkscape:label="Arbres"
     id="layer4"
     inkscape:groupmode="layer">
    <path
       sodipodi:nodetypes="csczczccscscsczcscccccsccccc"
       inkscape:connector-curvature="0"
       id="path3059"
       d="m 159.44882,372.04718 c 0,0 3.54331,-10.62992 14.17323,-10.62992 6.36043,0 10.62992,3.54331 10.62992,3.54331 0,0 3.54331,-10.62992 14.17323,-10.62992 10.62992,0 14.17323,14.17323 14.17323,14.17323 0,0 10.62992,-3.54331 17.71653,0 7.08661,3.5433 10.62992,17.71653 10.62992,17.71653 0,0 3.54331,-10.62992 21.25984,-10.62992 3.54331,-14.17323 10.62992,-21.25986 24.80315,-21.25985 14.17323,10e-6 21.25985,10.62993 21.25985,10.62993 0,0 10.62992,-14.17323 28.34645,-14.17323 10.62992,0 17.71654,3.54331 17.71654,3.54331 0,0 3.54331,-7.08662 17.71653,-7.08662 14.17323,0 17.71654,14.17323 17.71654,14.17323 0,0 7.08661,-3.5433 17.71653,-3.5433 10.62993,0 17.71654,14.17322 17.71654,14.17322 0,0 7.8128,-3.5433 14.17323,-3.5433 14.17323,0 21.25984,17.71653 21.25984,17.71653 0,0 21.25984,0 21.25984,21.25984 l 14.17323,0 c 0,0 3.54331,-17.71653 21.25984,-17.71653 0,-10.62992 14.17323,-14.17323 21.25985,-10.62992 0,0 0,-17.71654 17.71653,-17.71654 10.62992,0 14.17323,7.08662 14.17323,7.08662 0,0 3.54331,-17.71654 21.25984,-17.71654 0,0 0,42.16252 0,56.69291 l -432.28346,0 z"
       style="fill:#5fd35f;stroke:none" />
    <rect
       inkscape:label="#rect3049"
       y="301.18103"
       x="159.44882"
       height="106.29921"
       width="141.73228"
       id="arbres-depart"
       style="fill:none;stroke:#ff6600;display:inline" />
    <rect
       inkscape:label="#rect3053"
       y="301.18103"
       x="450"
       height="106.29921"
       width="141.73228"
       id="arbres-arrivee"
       style="fill:none;stroke:#ff6600;display:inline" />
    <path
       style="fill:#2da52d;fill-opacity:1;stroke:none"
       d="m 510.23622,389.76372 c 0,0 -0.64527,-9.60897 -11.95116,-9.60897 -3.77313,0 -6.30588,2.10196 -6.30588,2.10196 0,0 -2.10196,-6.30588 -8.40785,-6.30588 -6.30588,0 -8.76818,10.26958 -8.76818,10.26958 -3.54331,0 -10.62992,3.54331 -10.62992,10.62992 -7.08662,0 -7.08662,10.62992 -7.08662,10.62992 0,0 -28.34645,0 -35.43307,0 0,-10.62992 -20.92884,-18.91765 -25.58388,-18.91765 -2.10196,-8.40785 -6.30588,-12.61179 -14.71373,-12.61178 -8.40785,10e-6 -12.61178,6.30589 -12.61178,6.30589 0,0 -6.30588,-8.40785 -16.81569,-8.40785 -6.30588,0 -10.50981,2.10197 -10.50981,2.10197 0,0 -2.10196,-4.20393 -10.5098,-4.20393 -8.40785,0 -10.50982,8.40785 -10.50982,8.40785 0,0 -4.20392,-2.10196 -10.5098,-2.10196 -6.30589,0 -10.50981,8.40784 -10.50981,8.40784 0,0 -4.63472,-2.10196 -8.40785,-2.10196 -8.40785,0 -12.61177,10.50981 -12.61177,10.50981 0,0 -12.61177,0 -12.61177,12.61177 l -49.54624,0 c 0,0 -2.10196,-10.50981 -12.61177,-10.50981 0,-6.30588 -8.40785,-8.40784 -12.61178,-6.30588 0,0 0,-10.50981 -10.5098,-10.50981 -6.30589,0 -8.40785,4.20392 -8.40785,4.20392 0,0 -2.10196,-10.50981 -12.61177,-10.50981 0,0 0,25.01167 0,33.63139 l 361.41732,0 c 0,-17.71653 -10.62992,-17.71653 -10.62992,-17.71653 z"
       id="path4352"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="csczcccccscscsczcscccccsccccc" />
  </g>
  <g
     style="display:inline"
     inkscape:label="Maisons"
     id="layer5"
     inkscape:groupmode="layer">
    <rect
       inkscape:label="#rect3061"
       style="fill:none;stroke:#ff6600;display:inline"
       id="maisons-depart"
       width="141.73228"
       height="106.29921"
       x="159.44882"
       y="425.19681" />
    <rect
       inkscape:label="#rect3069"
       y="425.19678"
       x="595.27557"
       height="106.29921"
       width="141.73228"
       id="maisons-arrivee"
       style="fill:none;stroke:#ff6600;display:inline" />
    <rect
       y="478.34641"
       x="212.59842"
       height="53.149605"
       width="35.433071"
       id="rect3071"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3073"
       width="53.149582"
       height="35.433064"
       x="251.5748"
       y="496.06293" />
    <rect
       y="488.97632"
       x="354.33072"
       height="42.519672"
       width="60.23621"
       id="rect3075"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3077"
       width="53.149612"
       height="53.149597"
       x="425.19684"
       y="478.34641" />
    <rect
       y="478.34641"
       x="481.88977"
       height="53.149597"
       width="35.433064"
       id="rect3079"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3081"
       width="35.433083"
       height="35.433071"
       x="549.21259"
       y="496.06293" />
    <rect
       y="492.51962"
       x="602.36218"
       height="38.976376"
       width="53.149628"
       id="rect3083"
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3085"
       width="53.149628"
       height="56.692917"
       x="673.22833"
       y="474.8031" />
    <path
       inkscape:connector-curvature="0"
       id="path3087"
       d="m 212.59843,478.3464 17.71653,-21.25985 17.71654,21.25985 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none" />
    <path
       sodipodi:nodetypes="ccccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 251.57481,496.06294 14.17322,-17.71654 24.80315,0 14.17323,17.71653 z"
       id="path3857"
       inkscape:connector-curvature="0" />
    <path
       inkscape:connector-curvature="0"
       id="path3859"
       d="m 354.33072,488.97632 14.17322,-17.71654 31.88976,0 14.17323,17.71654 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="ccccc" />
    <path
       sodipodi:nodetypes="ccccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 425.19686,478.3464 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       id="path3861"
       inkscape:connector-curvature="0" />
    <path
       inkscape:connector-curvature="0"
       id="path3863"
       d="m 481.88977,478.3464 17.71653,-24.80315 17.71653,24.80315 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="cccc" />
    <path
       sodipodi:nodetypes="cccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 549.2126,496.06293 17.71653,-24.80315 17.71653,24.80315 z"
       id="path3865"
       inkscape:connector-curvature="0" />
    <path
       sodipodi:nodetypes="ccccc"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       d="m 673.22835,474.80309 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       id="path3869"
       inkscape:connector-curvature="0" />
    <rect
       y="513.77948"
       x="219.68504"
       height="17.716536"
       width="3.543303"
       id="rect3871"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3873"
       width="3.5433049"
       height="17.716536"
       x="283.46457"
       y="513.77948" />
    <rect
       y="513.77948"
       x="382.67715"
       height="17.716536"
       width="3.5433178"
       id="rect3875"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3877"
       width="3.5432966"
       height="17.716536"
       x="435.82678"
       y="513.77948" />
    <rect
       y="513.77948"
       x="499.60629"
       height="17.716536"
       width="3.5433135"
       id="rect3879"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3881"
       width="3.5433254"
       height="17.716536"
       x="556.29919"
       y="513.77948" />
    <rect
       y="513.77948"
       x="637.79529"
       height="17.716536"
       width="3.5432947"
       id="rect3883"
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#552200;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect3885"
       width="3.5432985"
       height="17.716536"
       x="683.85828"
       y="513.77948" />
    <g
       id="g4376">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect3891"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4374"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4392"
       transform="translate(42.519681,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4394"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4396"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(145.27559,24.803149)"
       id="g4433">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4435"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4437"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4439"
       transform="translate(180.70866,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4441"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4443"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(216.14173,-9.6118356e-7)"
       id="g4445">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4447"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4449"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4451"
       transform="translate(240.94488,-9.6118356e-7)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4453"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4455"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(240.94488,24.803149)"
       id="g4457">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4459"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4461"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4463"
       transform="translate(269.29133,-9.6118356e-7)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4465"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4467"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(350.7874,24.803149)"
       id="g4469">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4471"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4473"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4475"
       transform="translate(393.30708,24.803149)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4477"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4479"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(464.17322,3.5433061)"
       id="g4481">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4483"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4485"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4487"
       transform="translate(488.97637,3.5433061)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4489"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4491"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(488.97637,24.803149)"
       id="g4493">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4495"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4497"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       transform="matrix(1,0,0,0.68739202,393.30708,163.48782)"
       id="g4499">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4501"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4503"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <g
       id="g4505"
       transform="matrix(1,0,0,0.68739202,418.11023,163.48782)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4507"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4509"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       id="g4511"
       transform="matrix(1,0,0,0.68739202,148.81889,159.94451)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4513"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4515"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="matrix(1,0,0,0.68739202,177.16535,159.94451)"
       id="g4517">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4519"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4521"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.50000000000000000;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;display:inline"
       id="rect4547"
       width="3.5433071"
       height="10.629921"
       x="258.66141"
       y="513.77948" />
    <rect
       y="513.77948"
       x="269.29135"
       height="10.629921"
       width="3.5433071"
       id="rect4568"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       y="513.77948"
       x="240.94489"
       height="10.629921"
       width="3.5433071"
       id="rect4570"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4572"
       width="3.5433071"
       height="10.629921"
       x="230.31496"
       y="513.77948" />
    <rect
       y="488.97632"
       x="240.94489"
       height="10.629921"
       width="3.5433071"
       id="rect4574"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4576"
       width="3.5433071"
       height="10.629921"
       x="230.31496"
       y="488.97632" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4580"
       width="3.5433071"
       height="10.629921"
       x="223.22835"
       y="488.97632" />
    <g
       id="g4380"
       transform="translate(14.173224,-9.6118356e-7)">
      <rect
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="rect4382"
         width="7.0866208"
         height="10.629909"
         x="219.68504"
         y="488.97632" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         id="path4384"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
    </g>
    <g
       transform="translate(14.173224,24.803149)"
       id="g4386">
      <rect
         y="488.97632"
         x="219.68504"
         height="10.629909"
         width="7.0866208"
         id="rect4388"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4390"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.98967 c 0,0 -6.44448,-0.16179 -6.46708,3.49866 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
    </g>
    <rect
       y="488.97632"
       x="216.14174"
       height="10.629921"
       width="3.5433071"
       id="rect4578"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4582"
       width="3.5433071"
       height="10.629921"
       x="361.41733"
       y="513.77948" />
    <rect
       y="513.77948"
       x="407.48032"
       height="10.629921"
       width="3.5433071"
       id="rect4584"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4586"
       width="3.5433071"
       height="10.629921"
       x="432.28348"
       y="488.97632" />
    <rect
       y="488.97632"
       x="442.91339"
       height="10.629921"
       width="3.5433071"
       id="rect4588"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4590"
       width="3.5433071"
       height="10.629921"
       x="457.08661"
       y="488.97632" />
    <rect
       y="488.97632"
       x="467.71652"
       height="10.629921"
       width="3.5433071"
       id="rect4592"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4594"
       width="3.5433071"
       height="10.629921"
       x="467.71652"
       y="513.77948" />
    <rect
       y="513.77948"
       x="457.08661"
       height="10.629921"
       width="3.5433071"
       id="rect4596"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4598"
       width="3.5433071"
       height="10.629921"
       x="496.06299"
       y="488.97632" />
    <rect
       y="513.77948"
       x="577.55908"
       height="10.629921"
       width="3.5433071"
       id="rect4600"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4602"
       width="3.5433071"
       height="10.629921"
       x="609.44879"
       y="513.77948" />
    <rect
       y="513.77948"
       x="620.07874"
       height="10.629921"
       width="3.5433071"
       id="rect4604"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4606"
       width="3.5433071"
       height="10.629921"
       x="680.31494"
       y="492.51962" />
    <rect
       y="492.51962"
       x="715.74805"
       height="10.629921"
       width="3.5433071"
       id="rect4608"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4610"
       width="3.5433071"
       height="10.629921"
       x="715.74805"
       y="513.77948" />
    <rect
       y="492.51962"
       x="708.66144"
       height="10.629921"
       width="3.5433071"
       id="rect4612"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline"
       id="rect4614"
       width="3.5433071"
       height="10.629921"
       x="705.1181"
       y="513.77948" />
    <rect
       y="492.51962"
       x="690.94489"
       height="10.629921"
       width="3.5433071"
       id="rect4616"
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none;display:inline" />
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4618"
       width="60.236221"
       height="3.5433071"
       x="354.33072"
       y="488.97632" />
    <rect
       y="478.34641"
       x="425.19684"
       height="3.5433071"
       width="53.149609"
       id="rect4620"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4622"
       width="35.433064"
       height="3.5433071"
       x="481.88977"
       y="478.34641" />
    <rect
       y="496.06293"
       x="549.21259"
       height="3.5433071"
       width="35.433064"
       id="rect4624"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <g
       transform="translate(343.70078,4.4848057e-6)"
       id="g4523">
      <path
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         id="path4525"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4527"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
      <path
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         id="path4529"
         inkscape:connector-curvature="0" />
    </g>
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4626"
       width="53.149628"
       height="3.5433071"
       x="602.36218"
       y="492.51962" />
    <rect
       y="474.8031"
       x="673.22833"
       height="3.5433071"
       width="53.149628"
       id="rect4628"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <g
       id="g4531"
       transform="translate(464.25653,-17.716538)">
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4533"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         id="path4535"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         inkscape:connector-curvature="0"
         id="path4537"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    </g>
    <g
       transform="translate(489.05968,-17.716538)"
       id="g4539">
      <path
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         id="path4541"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4543"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
      <path
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         id="path4545"
         inkscape:connector-curvature="0" />
    </g>
    <rect
       y="496.06293"
       x="251.5748"
       height="3.5433071"
       width="53.149612"
       id="rect4630"
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <g
       transform="translate(46.146299,-9.6118356e-7)"
       id="g4398">
      <path
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         id="rect4400"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4402"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         style="fill:#87cdde;fill-opacity:1;stroke:none" />
      <path
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         id="path4405"
         inkscape:connector-curvature="0" />
    </g>
    <g
       id="g4425"
       transform="translate(63.862834,-2.6018088e-6)">
      <path
         sodipodi:nodetypes="cccccc"
         inkscape:connector-curvature="0"
         id="path4427"
         d="m 219.68504,492.51963 3.46,-3.54331 3.62662,3.54331 0,7.0866 -7.08662,0 z"
         style="fill:#16444f;fill-opacity:1;fill-rule:nonzero;stroke:none" />
      <path
         style="fill:#87cdde;fill-opacity:1;stroke:none"
         d="m 219.94748,495.79507 -0.0392,3.49867 6.50896,-0.008 -0.003,-6.76611 c 0,0 -6.44448,-0.38535 -6.46708,3.2751 z"
         id="path4429"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccc" />
      <path
         inkscape:connector-curvature="0"
         id="path4431"
         d="m 219.68505,492.51962 3.5433,-3.5433 3.54331,3.5433 0,0"
         style="fill:none;stroke:#552200;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    </g>
    <rect
       style="fill:#cccccc;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4632"
       width="35.433079"
       height="3.5433071"
       x="212.59842"
       y="478.34641" />
    <rect
       y="513.77948"
       x="687.40161"
       height="17.716536"
       width="3.5432985"
       id="rect4634"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4636"
       width="3.5432985"
       height="17.716536"
       x="641.33856"
       y="513.77948" />
    <rect
       y="513.77948"
       x="559.84253"
       height="17.716536"
       width="3.5432985"
       id="rect4638"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4640"
       width="3.5432985"
       height="17.716536"
       x="503.14963"
       y="513.77948" />
    <rect
       y="513.77948"
       x="439.37009"
       height="17.716536"
       width="3.5432985"
       id="rect4642"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4644"
       width="3.5432985"
       height="17.716536"
       x="386.22046"
       y="513.77948" />
    <rect
       y="513.77948"
       x="287.00787"
       height="17.716536"
       width="3.5432985"
       id="rect4646"
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none" />
    <rect
       style="fill:#722d00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4648"
       width="3.5432985"
       height="17.716536"
       x="223.22835"
       y="513.77948" />
    <path
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       d="m 527.95276,524.40936 3.5433,-3.54328 3.54331,3.54328 0,7.08661 -7.08661,0 z"
       id="rect4650"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="cccccc" />
    <path
       inkscape:connector-curvature="0"
       id="path4652"
       d="m 527.95276,524.40939 3.5433,-3.54331 3.54331,3.54331"
       style="fill:none;stroke:#ff3c00;stroke-opacity:1"
       sodipodi:nodetypes="ccc" />
    <path
       style="fill:#000000;stroke:none"
       d="m 529.72442,531.496 0,-3.5433 c 0,-3.54331 3.5433,-3.54331 3.5433,0 l 0,3.5433 z"
       id="path4655"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <rect
       style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4657"
       width="7.0866141"
       height="14.173228"
       x="644.8819"
       y="474.8031" />
    <path
       inkscape:connector-curvature="0"
       id="path3867"
       d="m 602.36221,492.51963 14.17322,-17.71654 24.80315,0 14.17323,17.71654 z"
       style="fill:#ff3c00;fill-opacity:1;stroke:none"
       sodipodi:nodetypes="ccccc" />
    <rect
       style="fill:#ff3c00;fill-opacity:1;fill-rule:nonzero;stroke:none"
       id="rect4659"
       width="7.0866141"
       height="1.5790213"
       x="644.8819"
       y="474.8031" />
  </g>
  <g
     inkscape:label="Voiture"
     id="layer6"
     inkscape:groupmode="layer">
    <rect
       inkscape:label="#rect3939"
       y="549.21252"
       x="159.44882"
       height="106.29921"
       width="141.73228"
       id="voiture-depart"
       style="display:inline;fill:none;stroke:#ff6600" />
    <rect
       inkscape:label="#rect3952"
       style="fill:none;stroke:#ff6600;display:inline"
       id="voiture-arrivee"
       width="141.73228"
       height="106.29921"
       x="88.58268"
       y="549.21252" />
    <g
       id="g4362"
       transform="matrix(0.6800487,0,0,0.6800487,56.684284,209.73184)">
      <path
         sodipodi:nodetypes="sssss"
         inkscape:connector-curvature="0"
         id="path4354"
         d="m 177.16535,648.42514 c 3.18898,3.54331 19.13387,3.54329 28.7008,3.5433 3.18897,0 3.18897,-1.87297 3.18897,-3.5433 0,-3.54331 -9.56693,-14.17323 -22.32283,-14.17323 -6.80648,0 -14.37984,8.82556 -9.56694,14.17323 z"
         style="fill:#ff39d6;fill-opacity:1;stroke:none" />
      <path
         style="fill:#ff80e5;stroke:none"
         d="m 179.76357,647.16621 c 2.8354,3.15045 17.01244,3.15044 25.51865,3.15044 2.8354,0 3.68361,-0.81709 3.68361,-2.30223 0,-3.15045 -9.57764,-13.8518 -22.12461,-13.71787 -6.05148,0.0646 -11.35693,8.1149 -7.07765,12.86966 z"
         id="path3948"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="sssss" />
      <path
         sodipodi:type="arc"
         style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="path3942"
         sodipodi:cx="209.05511"
         sodipodi:cy="651.96844"
         sodipodi:rx="3.5433071"
         sodipodi:ry="3.5433071"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         transform="translate(-24.803146,0)" />
      <path
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         sodipodi:ry="3.5433071"
         sodipodi:rx="3.5433071"
         sodipodi:cy="651.96844"
         sodipodi:cx="209.05511"
         id="path3944"
         style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none"
         sodipodi:type="arc"
         transform="translate(-7.0866072,0)" />
      <path
         style="fill:#916f6f;stroke:none"
         d="m 195.19756,636.97447 c -2.64102,0 -4.86864,3.45106 -3.48017,5.69765 1.24189,2.00941 9.76685,2.51449 11.95575,1.13642 2.23498,-1.40708 -5.83456,-6.83407 -8.47558,-6.83407 z"
         id="path3950"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="zssz" />
      <path
         sodipodi:nodetypes="zssz"
         inkscape:connector-curvature="0"
         id="path4356"
         d="m 195.51211,637.24233 c -2.40094,0 -4.42605,3.06641 -3.1638,5.06259 1.12899,1.78545 8.87899,2.23423 10.86891,1.00976 2.03181,-1.25025 -5.30417,-6.07235 -7.70511,-6.07235 z"
         style="fill:#7b5d5d;fill-opacity:1;stroke:none" />
      <path
         transform="matrix(0.52123015,0,0,0.52123015,75.286139,312.14283)"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         sodipodi:ry="3.5433071"
         sodipodi:rx="3.5433071"
         sodipodi:cy="651.96844"
         sodipodi:cx="209.05511"
         id="path4358"
         style="fill:#444444;fill-opacity:1;fill-rule:nonzero;stroke:none"
         sodipodi:type="arc" />
      <path
         sodipodi:type="arc"
         style="fill:#444444;fill-opacity:1;fill-rule:nonzero;stroke:none"
         id="path4360"
         sodipodi:cx="209.05511"
         sodipodi:cy="651.96844"
         sodipodi:rx="3.5433071"
         sodipodi:ry="3.5433071"
         d="m 212.59842,651.96844 c 0,1.95692 -1.58639,3.54331 -3.54331,3.54331 -1.95691,0 -3.5433,-1.58639 -3.5433,-3.54331 0,-1.95691 1.58639,-3.5433 3.5433,-3.5433 1.95692,0 3.54331,1.58639 3.54331,3.5433 z"
         transform="matrix(0.52123015,0,0,0.52123015,93.002678,312.14283)" />
    </g>
  </g>
  <ns1:frame
     id="frame1"
     ns1:clip="true"
     ns1:hide="true"
     ns1:transition-zoom-percent="0"
     ns1:transition-profile="linear"
     ns1:sequence="1"
     ns1:title="Départ"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1000"
     ns1:transition-duration-ms="1000">
    <ns1:layer
       ns1:group="layer1"
       ns1:refid="ciel"
       ns1:hide="false" />
    <ns1:layer
       ns1:group="layer2"
       ns1:refid="nuages-depart" />
    <ns1:layer
       ns1:group="layer4"
       ns1:refid="arbres-depart" />
    <ns1:layer
       ns1:group="layer5"
       ns1:refid="maisons-depart" />
    <ns1:layer
       ns1:group="layer6"
       ns1:refid="voiture-depart" />
  </ns1:frame>
  <ns1:frame
     id="frame2"
     ns1:clip="true"
     ns1:hide="true"
     ns1:transition-zoom-percent="0"
     ns1:transition-profile="linear"
     ns1:sequence="2"
     ns1:title="Arrivée"
     ns1:timeout-enable="true"
     ns1:timeout-ms="1000"
     ns1:transition-duration-ms="7000">
    <ns1:layer
       ns1:group="layer1"
       ns1:refid="ciel"
       ns1:hide="false" />
    <ns1:layer
       ns1:group="layer2"
       ns1:refid="nuages-arrivee" />
    <ns1:layer
       ns1:group="layer4"
       ns1:refid="arbres-arrivee" />
    <ns1:layer
       ns1:group="layer5"
       ns1:refid="maisons-arrivee" />
    <ns1:layer
       ns1:group="layer6"
       ns1:refid="voiture-arrivee" />
  </ns1:frame>
  <script
     ns1:version="12.05-12194453"
     id="sozi-script">
/**
 * Create or augment a module.
 *
 * &lt;p&gt;A typical use of this function is:&lt;/p&gt;
 *
 * &lt;pre&gt;
 * module(this, &quot;a.b.c&quot;, function (exports, globals) {
 *     exports.foo = function (x) {
 *         ...
 *     };
 * });
 * &lt;/pre&gt;
 *
 * &lt;p&gt;where &lt;code&gt;this&lt;/code&gt; is the global object.&lt;/p&gt;
 *
 * &lt;p&gt;In this example, function &lt;code&gt;foo&lt;/code&gt; is exported and can be
 * called as &lt;code&gt;a.b.c.foo(someValue)&lt;/code&gt;.&lt;/p&gt;
 *
 * @memberOf _global_
 * @param globals The global object
 * @param {String} path The dot-separated path to the module
 * @param {Function} body A function to execute in the context of the module
 */
function module(globals, path, body) {
    &quot;use strict&quot;;
    
    // Start name lookup in the global object
	var current = globals;
	
	// For each name in the given path
	path.split(&quot;.&quot;).forEach(function (name) {
	    // If the current path element does not exist
	    // in the current namespace, create a new sub-namespace
		if (typeof current[name] === &quot;undefined&quot;) {
			current[name] = {};
		}
		
		// Move to the namespace for the current path element
		current = current[name];
	});
	
	// Execute the module body in the last namespace
	body(current, globals);
}

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

/**
 * @name sozi.events
 * @namespace A simple event system for Sozi.
 */
module(this, &quot;sozi.events&quot;, function (exports) {
    /** @lends sozi.events */

    &quot;use strict&quot;;
    
    /**
     * A registry of callback functions for each event type.
     *
     * &lt;p&gt;Call {@link sozi.events.listen} to add a new listener.&lt;/p&gt;
     */
    var listenerRegistry = {};

    /**
     * Adds a listener for a given event type.
     *
     * @memberOf sozi.events
     * @name listen
     * @function
     * @param {String} key The identifier of the event type to listen
     * @param {Function} handler The function to call when a corresponding event is fired
     */
    exports.listen = function (key, handler) {
        if (!listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key] = [];
        }
        listenerRegistry[key].push(handler);
    };
    
    /**
     * Fire an event of a given type.
     *
     * &lt;p&gt;All event handlers added for the given event type are
     * executed.&lt;/p&gt;
     *
     * &lt;p&gt;Additional arguments provided to this function are passed
     * to the event handlers.&lt;/p&gt;
     *
     * @memberOf sozi.events
     * @name fire
     * @function
     * @param {String} key The identifier of the event type to fire
     */
    exports.fire = function (key) {
        var args = Array.prototype.slice.call(arguments, 1);
        if (listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key].forEach(function (listener) {
                listener.apply(null, args);
            });
        }
    };
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

module(this, &quot;sozi.framenumber&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
    var document = window.document;
    
    // The SVG group containing the frame number
    var svgGroup;
    
    // The SVG text element and its text node containing the frame number
    var svgText, svgTextNode;
    
    // The SVG circle enclosing the frame number
    var svgCircle;
    
    // Constant: the SVG namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    
    function adjust() {
        var textBBox = svgText.getBBox(),
            d = Math.max(textBBox.width, textBBox.height) * 0.75,
            t = d * 1.25;
        svgCircle.setAttribute(&quot;r&quot;, d);
        svgGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + t + &quot;,&quot; + t + &quot;)&quot;);
    }
    
    function onDisplayReady() {
        svgGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgText = document.createElementNS(SVG_NS, &quot;text&quot;);
        svgCircle = document.createElementNS(SVG_NS, &quot;circle&quot;);
        
        svgGroup.setAttribute(&quot;id&quot;, &quot;sozi-framenumber&quot;);

        svgCircle.setAttribute(&quot;cx&quot;, 0);
        svgCircle.setAttribute(&quot;cy&quot;, 0);
        svgGroup.appendChild(svgCircle);
        
        svgTextNode = document.createTextNode(sozi.location.getFrameIndex() + 1);
        svgText.setAttribute(&quot;text-anchor&quot;, &quot;middle&quot;);
        svgText.setAttribute(&quot;dominant-baseline&quot;, &quot;central&quot;);
        svgText.setAttribute(&quot;x&quot;, 0);
        svgText.setAttribute(&quot;y&quot;, 0);
        svgText.appendChild(svgTextNode);
        svgGroup.appendChild(svgText);
        
        document.documentElement.appendChild(svgGroup);
        
        adjust();
    }

    function onFrameChange(index) {
        svgTextNode.nodeValue = index + 1;
    }
    
	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

module(this, &quot;sozi.framelist&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
	var document = window.document;
	
    // Constant: the margin around the text of the frame list
    var MARGIN = 5;
    
	// The SVG group that will contain the frame list
    var svgTocGroup;
    
    // The SVG group that will contain the frame titles
    var svgTitlesGroup;
    
    // The current height of the frame list,
    // computed during the initialization
    var tocHeight = 0;
    
    // The X coordinate of the frame list in its hidden state
    var translateXHidden;
    
    // The X coordinate of the frame list when it is completely visible
    var translateXVisible;
    
    // The initial X coordinate of the frame list before starting an animation.
    // This variable is set before showing/hiding the frame list.
    var translateXStart;
    
    // The final X coordinate of the frame list for the starting animation.
    // This variable is set before showing/hiding the frame list.
    var translateXEnd;
    
    // The current X coordinate of the frame list for the running animation.
    // This variable is updated on each animation step.
    var translateX;
    
    // The animator object that will manage animations of the frame list
    var animator;
    
    // Constant: the duration of the showing/hiding animation, in milliseconds
    var ANIMATION_TIME_MS = 300;
    
    // Constant: the acceleration profile of the showing/hiding animation
    var ANIMATION_PROFILE = &quot;decelerate&quot;;
    
    // Constant: the SVG namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

	function onMouseOut(evt) {
        var rel = evt.relatedTarget,
            svgRoot = document.documentElement;
        while (rel &amp;&amp; rel !== svgTocGroup &amp;&amp; rel !== svgRoot) {
            rel = rel.parentNode;
        }
        if (rel !== svgTocGroup) {
            exports.hide();
            sozi.player.restart();
            evt.stopPropagation();
        }
    }

	function onClickArrowUp(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty &lt;= -window.innerHeight / 2) {
            ty += window.innerHeight / 2;
        } else if (ty &lt; 0) {
            ty = 0;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
	}

	function onClickArrowDown(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty + tocHeight &gt;= window.innerHeight * 3 / 2) {
            ty -= window.innerHeight / 2;
        } else if (ty + tocHeight &gt; window.innerHeight + 2 * MARGIN) {
            ty = window.innerHeight - tocHeight - 4 * MARGIN;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
    }

    /*
     * Create a function that responds to clicks on frame list entries.
     */
    function makeClickHandler(index) {
        return function (evt) {
            sozi.player.previewFrame(index);
            evt.stopPropagation();
        };
    }
    
    /*
     * The default event handler, to prevent event propagation
     * through the frame list.
     */
    function defaultEventHandler(evt) {
	    evt.stopPropagation();
    }
    
    /*
     * Adds a table of contents to the document.
     *
     * The table of contents is a rectangular region with the list of frame titles.
     * Clicking on a title moves the presentation to the corresponding frame.
     *
     * The table of contents is hidden by default.
     */
    function onDisplayReady() {
        svgTocGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgTocGroup.setAttribute(&quot;id&quot;, &quot;sozi-toc&quot;);
        document.documentElement.appendChild(svgTocGroup);

        svgTitlesGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgTocGroup.appendChild(svgTitlesGroup);
    
        // The background rectangle of the frame list
        var tocBackground = document.createElementNS(SVG_NS, &quot;rect&quot;);
        tocBackground.setAttribute(&quot;id&quot;, &quot;sozi-toc-background&quot;);
        tocBackground.setAttribute(&quot;x&quot;, MARGIN);
        tocBackground.setAttribute(&quot;y&quot;, MARGIN);
        tocBackground.setAttribute(&quot;rx&quot;, MARGIN);
        tocBackground.setAttribute(&quot;ry&quot;, MARGIN);
        tocBackground.addEventListener(&quot;click&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mouseout&quot;, onMouseOut, false);
        svgTitlesGroup.appendChild(tocBackground);

        var tocWidth = 0;
        var currentFrameIndex = sozi.location.getFrameIndex();
        sozi.document.frames.forEach(function (frame, frameIndex) {
            var text = document.createElementNS(SVG_NS, &quot;text&quot;);
            text.appendChild(document.createTextNode(frame.title));
            svgTitlesGroup.appendChild(text);

            if (frameIndex === currentFrameIndex) {
                text.setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
            }
                     
            var textWidth = text.getBBox().width;
            tocHeight += text.getBBox().height;
            if (textWidth &gt; tocWidth) {
                tocWidth = textWidth;
            }

            text.setAttribute(&quot;x&quot;, 2 * MARGIN);
            text.setAttribute(&quot;y&quot;, tocHeight + MARGIN);
            text.addEventListener(&quot;click&quot;, makeClickHandler(frameIndex), false);
            text.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        });

        // The &quot;up&quot; button
        var tocUp = document.createElementNS(SVG_NS, &quot;path&quot;);
        tocUp.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocUp.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (5 * MARGIN) +
                           &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                           &quot; l-&quot; + (2 * MARGIN) + &quot;,-&quot; + (3 * MARGIN) +
                           &quot; z&quot;);
        tocUp.addEventListener(&quot;click&quot;, onClickArrowUp, false);
        tocUp.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        svgTocGroup.appendChild(tocUp);

        // The &quot;down&quot; button
        var tocDown = document.createElementNS(SVG_NS, &quot;path&quot;);
        tocDown.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocDown.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (7 * MARGIN) +
                             &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                             &quot; l-&quot; + (2 * MARGIN) + &quot;,&quot; + (3 * MARGIN) +
                             &quot; z&quot;);
        tocDown.addEventListener(&quot;click&quot;, onClickArrowDown, false);
        tocDown.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        svgTocGroup.appendChild(tocDown);

        tocBackground.setAttribute(&quot;width&quot;, tocWidth + 7 * MARGIN);
        tocBackground.setAttribute(&quot;height&quot;, tocHeight + 2 * MARGIN);
        
        translateXHidden = -tocWidth - 9 * MARGIN;
        translateXVisible = 0;
        translateX = translateXEnd = translateXHidden;
        
        svgTocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateXHidden + &quot;,0)&quot;);
        animator = sozi.animation.Animator.instance().augment({
            onStep: function (progress) {
                var profileProgress = sozi.animation.profiles[ANIMATION_PROFILE](progress),
                    remaining = 1 - profileProgress;
                translateX = translateXEnd * profileProgress + translateXStart * remaining;
                svgTocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,0)&quot;);
            }
        });
    }

	/*
	 * Highlight the current frame title in the frame list.
	 *
	 * This handler is called on each frame change,
	 * even when the frame list is hidden.
	 */
    function onFrameChange(index) {
        var currentElementList = Array.prototype.slice.call(document.getElementsByClassName(&quot;sozi-toc-current&quot;));
        currentElementList.forEach(function (svgElement) {
            svgElement.removeAttribute(&quot;class&quot;);
        });

        var textElements = svgTitlesGroup.getElementsByTagName(&quot;text&quot;);
        textElements[index].setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
    }
    
    /*
     * Makes the table of contents visible.
     */
    exports.show = function () {
        translateXStart = translateX;
        translateXEnd = translateXVisible;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Makes the table of contents invisible.
     */
    exports.hide = function () {
        translateXStart = translateX;
        translateXEnd = translateXHidden;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Returns true if the table of contents is visible, false otherwise.
     */
    exports.isVisible = function () {
        return translateXEnd === translateXVisible;
    };

	sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
	sozi.events.listen(&quot;cleanup&quot;, exports.hide);
	sozi.events.listen(&quot;framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 */

module(this, &quot;sozi.proto&quot;, function (exports) {
    &quot;use strict&quot;;
    
    exports.Object = {
        installConstructors: function () {
            function InstanceConstructor() {}
            InstanceConstructor.prototype = this;
            
            this.instance = function () {
                var result = new InstanceConstructor();
                result.construct.apply(result, arguments);
                return result;
            };
            
            this.subtype = function (anObject) {
                var result = new InstanceConstructor();
                result.augment(anObject);
                result.installConstructors();
                return result;
            };
        },
        
        construct: function () {},
        
        augment: function (anObject) {
            for (var attr in anObject) {
                if (anObject.hasOwnProperty(attr)) {
                    this[attr] = anObject[attr];
                }
            }
            return this;
        },
        
        bind: function (aFunction) {
            var self = this;
            return function () {
                return aFunction.apply(self, arguments);
            }
        }
    };
    
    // Bootstrap the root object
    exports.Object.installConstructors();
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend proto.js
 */

/**
 * @name sozi.animation
 * @namespace A general-purpose animation controller.
 */
module(this, &quot;sozi.animation&quot;, function (exports, window) {
    /** @lends sozi.animation */
    
    &quot;use strict&quot;;
    
    /**
     * The browser-specific function to request an animation frame.
     *
     * @function
     */
    var requestAnimationFrame =
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame;

    /**
     * The default time step.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     *
     * @constant
     * @type Number
     */
    var TIME_STEP_MS = 40;
    
    /**
     * The handle provided by &lt;code&gt;setInterval()&lt;/code&gt;.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     */
    var timer;
    
    /**
     * The list of running animators.
     *
     * @type Array
     */
    var animatorList = [];
    
    /**
     * The main animation loop.
     *
     * &lt;p&gt;This function is called periodically and triggers the
     * animation steps in all animators managed by this module.&lt;/p&gt;
     *
     * &lt;p&gt;If all animators are removed from the list of animators
     * managed by this module, then the periodic calling is disabled.&lt;/p&gt;
     *
     * &lt;p&gt;This function can be called either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     *
     * @param {Number} timestamp The current time.
     */
    function loop(timestamp) {
        if (animatorList.length &gt; 0) {
            // If there is at least one animator,
            // and if the browser provides animation frames,
            // schedule this function to be called again in the next frame.
            if (requestAnimationFrame) {
                requestAnimationFrame(loop);
            }

            // Step all animators
            animatorList.forEach(function (animator) {
                animator.step(timestamp);
            });
        }
        else {
            // If all animators have been removed,
            // and if this function is called periodically
            // through setInterval, disable the periodic calling.
            if (!requestAnimationFrame) {
                window.clearInterval(timer);
            }
        }
    }
    
    /**
     * Start the animation loop.
     *
     * &lt;p&gt;This function delegates the periodic update of all animators
     * to the {@link sozi.animation-loop} function, either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     */
    function start() {
        if (requestAnimationFrame) {
            requestAnimationFrame(loop);
        }
        else {
            timer = window.setInterval(function () {
                loop(Date.now());
            }, TIME_STEP_MS);
        }
    }
    
    /**
     * Add a new animator object to the list of animators managed
     * by this module.
     *
     * &lt;p&gt;If the animator list was empty before calling this function,
     * then the animation loop is started.&lt;/p&gt;
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function addAnimator(animator) {
        animatorList.push(animator);
        if (animatorList.length === 1) {
            start();
        }
    }
    
    /**
     * Remove the given animator from the list of animators
     * managed by this module.
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function removeAnimator(animator) {
        animatorList.splice(animatorList.indexOf(animator), 1);
    }
    
    /**
     * @class
     *
     * An animator provides the logic for animating other objects.
     *
     * &lt;p&gt;The main purpose of an animator is to schedule the update
     * operations in the animated objects.&lt;/p&gt;
     *
     * @memberOf sozi.animation
     * @name Animator
     */
    exports.Animator = sozi.proto.Object.subtype({
        /** @lends sozi.animation.Animator */
        
        /**
         * Construct a new animator.
         */
        construct: function () {
            /**
             * The animation duration, in milliseconds.
             * @type Number
             */
            this.durationMs = 0;
            
            /**
             * A &quot;payload&quot; object that can be used by {@link sozi.animation.Animator.onStep}
             * and {@link sozi.animation.Animator.onDone}.
             */
            this.data = null;
            
            /**
             * The start time of the animation.
             * @type Number
             */
            this.initialTime = 0;
            
            /**
             * The current state of this animator.
             * @type Boolean
             */
            this.started = false;
        },

        /**
         * Start the current animator.
         *
         * &lt;p&gt;The current animator is added to the list of animators managed
         * by this module and is put in the &quot;started&quot; state.
         * It will be removed from the list automatically when the given duration
         * has elapsed.&lt;/p&gt;
         *
         * &lt;p&gt;Method {@link sozi.animation.Animator.onStep} is called once before starting the animation.&lt;/p&gt;
         *
         * @param {Number} durationMs The animation duration, in milliseconds
         * @param data Some data that can be used in {@link sozi.animation.Animator.onStep}
         * and {@link sozi.animation.Animator.onDone}
         */
        start: function (durationMs, data) {
            this.durationMs = durationMs;
            this.data = data;
            this.initialTime = Date.now();
            this.onStep(0);

            if (!this.started) {
                this.started = true;
                addAnimator(this);
            }
        },

        /**
         * Stop the current animator.
         *
         * &lt;p&gt;The current animator is removed from the list of animators managed
         * by this module and is put in the &quot;stopped&quot; state.&lt;/p&gt;
         */
        stop: function () {
            if (this.started) {
                removeAnimator(this);
                this.started = false;
            }
        },

        /**
         * Perform one animation step.
         *
         * &lt;p&gt;This function is called automatically by the {@link sozi.animation-loop} function.
         * It calls {@link sozi.animation.Animator.onStep}.
         * If the animation duration has elapsed, {@link sozi.animation.Animator.onDone} is called.&lt;/p&gt;
         *
         * @param {Number} timestamp The current time
         */
        step: function (timestamp) {
            var elapsedTime = timestamp - this.initialTime;
            if (elapsedTime &gt;= this.durationMs) {
                this.stop();
                this.onStep(1);
                this.onDone();
            } else {
                this.onStep(elapsedTime / this.durationMs);
            }
        },
        
        /**
         * This method is called automatically on each animation step.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         *
         * @param {Number} progress The elapsed fraction of the total duration (comprised between 0 and 1 included).
         */
        onStep: function (progress) {
            // Do nothing
        },
        
        /**
         * This method is called automatically when the animation ends.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         */
        onDone: function () {
            // Do nothing
        }
    });

    /*
     * The acceleration profiles.
     *
     * Each profile is a function that operates in the interval [0, 1]
     * and produces a result in the same interval.
     *
     * These functions are meant to be called in {@link sozi.animation.Animator.onStep}
     * to transform the progress indicator according to the desired
     * acceleration effect.
     */
    exports.profiles = {
        &quot;linear&quot;: function (x) {
            return x;
        },

        &quot;accelerate&quot;: function (x) {
            return Math.pow(x, 3);
        },

        &quot;strong-accelerate&quot;: function (x) {
            return Math.pow(x, 5);
        },

        &quot;decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 3);
        },

        &quot;strong-decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 5);
        },

        &quot;accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 3) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 5) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 2)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 3)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        }
    };
});


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend proto.js
 * @depend events.js
 */

module(this, &quot;sozi.display&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // The global document object
    var document = window.document;
    
    // The initial bounding box of the whole document,
    // assigned in onDocumentReady()
    var initialBBox;
    
    // Constant: the Sozi namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

    var XLINK_NS = &quot;http://www.w3.org/1999/xlink&quot;;
    
    exports.CameraState = sozi.proto.Object.subtype({
        construct : function () {
            // Center coordinates
            this.cx = this.cy = 0;
            
            // Dimensions
            this.width = this.height = 1;
            
            // Rotation angle, in degrees
            this.angle = 0;
            
            // Clipping
            this.clipped = true;
        },

        setCenter: function (cx, cy) {
            this.cx = cx;
            this.cy = cy;
            return this;
        },
        
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        
        setClipped: function (clipped) {
            this.clipped = clipped;
            return this;
        },
        
        /*
         * Set the angle of the current camera state.
         * The angle of the current state is normalized
         * in the interval [-180 ; 180]
         */
        setAngle: function (angle) {
            this.angle = (angle + 180) % 360 - 180;
            return this;
        },
        
        setRawAngle: function (angle) {
            this.angle = angle;
            return this;
        },
        
        /*
         * Set the current camera's properties to the given SVG element.
         *
         * If the element is a rectangle, the properties of the frames are based
         * on the geometrical properties of the rectangle.
         * Otherwise, the properties of the frame are based on the bounding box
         * of the given element.
         *
         * Parameters:
         *    - svgElement: an element from the SVG DOM
         */
        setAtElement: function (svgElement) {
            // Read the raw bounding box of the given SVG element
            var x, y, w, h;
            if (svgElement.nodeName === &quot;rect&quot;) {
                x = svgElement.x.baseVal.value;
                y = svgElement.y.baseVal.value;
                w = svgElement.width.baseVal.value;
                h = svgElement.height.baseVal.value;
            } else {
                var b = svgElement.getBBox();
                x = b.x;
                y = b.y;
                w = b.width;
                h = b.height;
            }

            // Compute the raw coordinates of the center
            // of the given SVG element
            var c = document.documentElement.createSVGPoint();
            c.x = x + w / 2;
            c.y = y + h / 2;
            
            // Compute the coordinates of the center of the given SVG element
            // after its current transformation
            var matrix = svgElement.getCTM();
            c = c.matrixTransform(matrix);

            // Compute the scaling factor applied to the given SVG element
            var scale = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
            
            // Update the camera to match the bounding box information of the
            // given SVG element after its current transformation
            return this.setCenter(c.x, c.y)
                .setSize(w * scale, h * scale)
                .setAngle(Math.atan2(matrix.b, matrix.a) * 180 / Math.PI);
        },

        setAtState: function (other) {
            return this.setCenter(other.cx, other.cy)
                .setSize(other.width, other.height)
                .setAngle(other.angle)
                .setClipped(other.clipped);
        },
        
        interpolatableAttributes: [&quot;cx&quot;, &quot;cy&quot;, &quot;width&quot;, &quot;height&quot;, &quot;angle&quot;],
        
        interpolate: function (initialState, finalState, ratio) {
            var remaining = 1 - ratio;
            for (var i = 0; i &lt; this.interpolatableAttributes.length; i += 1) {
                var attr = this.interpolatableAttributes[i];
                this[attr] = finalState[attr] * ratio + initialState[attr] * remaining;
            }
        }
    });
    
    exports.Camera = exports.CameraState.subtype({
        construct: function (viewPort, svgLayer) {
            exports.CameraState.construct.call(this);
            
            this.viewPort = viewPort;
            
            // Clipping rectangle
            this.svgClipRect = document.createElementNS(SVG_NS, &quot;rect&quot;);
        
            // Layer element (typically a &quot;g&quot; element)
            this.svgLayer = svgLayer;
        },
        
        setAtState: function (other) {
            return exports.CameraState.setAtState.call(this, other).update();
        },
        
        getScale: function () {
            return Math.min(this.viewPort.width / this.width, this.viewPort.height / this.height);
        },
        
        rotate: function (angle) {
            return this.setAngle(this.angle + angle).update();
        },

        zoom: function (factor, x, y) {
            return this.setSize(this.width / factor, this.height / factor)
                       .drag(
                            (1 - factor) * (x - this.viewPort.width / 2),
                            (1 - factor) * (y - this.viewPort.height / 2)
                        );
        },
        
        drag: function (deltaX, deltaY) {
            var scale = this.getScale();
            var angleRad = this.angle * Math.PI / 180;
            var si = Math.sin(angleRad);
            var co = Math.cos(angleRad);
            return this.setCenter(
                    this.cx - (deltaX * co - deltaY * si) / scale,
                    this.cy - (deltaX * si + deltaY * co) / scale
                ).setClipped(false).update();
        },

        update: function () {
            var scale = this.getScale();
                    
            // Compute the size and location of the frame on the screen
            var width = this.width  * scale;
            var height = this.height * scale;
            var x = (this.viewPort.width - width) / 2;
            var y = (this.viewPort.height - height) / 2;

            // Adjust the location and size of the clipping rectangle and the frame rectangle
            this.svgClipRect.setAttribute(&quot;x&quot;, this.clipped ? x : 0);
            this.svgClipRect.setAttribute(&quot;y&quot;, this.clipped ? y : 0);
            this.svgClipRect.setAttribute(&quot;width&quot;,  this.clipped ? width  : this.viewPort.width);
            this.svgClipRect.setAttribute(&quot;height&quot;, this.clipped ? height : this.viewPort.height);
                    
            // Compute and apply the geometrical transformation to the layer group
            var translateX = -this.cx + this.width / 2  + x / scale;
            var translateY = -this.cy + this.height / 2 + y / scale;

            this.svgLayer.setAttribute(&quot;transform&quot;,
                &quot;scale(&quot; + scale + &quot;)&quot; +
                &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot; +
                &quot;rotate(&quot; + (-this.angle) + ',' + this.cx + &quot;,&quot; + this.cy + &quot;)&quot;
            );
            
            return this;
        }
    });
    
    exports.ViewPort = sozi.proto.Object.subtype({
        construct: function (idLayerList) {
            var svgRoot = document.documentElement;
            
            this.svgGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            svgRoot.appendChild(this.svgGroup);

            this.setLocation(0, 0).setSize(window.innerWidth, window.innerHeight);
            
            this.cameras = {};
            
            for (var i = 0; i &lt; idLayerList.length; i += 1) {
                var idLayer = idLayerList[i];
                
                // Create a &lt;use&gt; element for the current layer in the current viewport
                var svgUse = document.createElementNS(SVG_NS, &quot;use&quot;);
                svgUse.setAttributeNS(XLINK_NS, &quot;href&quot;, &quot;#&quot; + idLayer);
                
                // Create a new camera for the current layer
                var camera = this.cameras[idLayer] = new exports.Camera.instance(this, svgUse);

                // Add a clipping path
                var svgClipPath = document.createElementNS(SVG_NS, &quot;clipPath&quot;);
                svgClipPath.setAttribute(&quot;id&quot;, &quot;sozi-clip-path-&quot; + idLayer);
                svgClipPath.appendChild(camera.svgClipRect);
                this.svgGroup.appendChild(svgClipPath);

                // Create a group that will support the clipping operation
                // and move the layer group into that new group
                var svgClippedGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
                svgClippedGroup.setAttribute(&quot;clip-path&quot;, &quot;url(#sozi-clip-path-&quot; + idLayer + &quot;)&quot;);
                
                // Adding the layer group to the clipped group must preserve layer ordering
                this.svgGroup.appendChild(svgClippedGroup);
                svgClippedGroup.appendChild(svgUse);
            }
        },
        
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        
        setLocation: function (x, y) {
            this.x = x;
            this.y = y;
            return this;
        },

        /*
         * Returns the geometrical properties of the SVG document
         *
         * Returns:
         *    - The default size, translation and rotation for the document's bounding box
         */
        getDocumentState: function () {
            // This object defines the bounding box of the whole document
            var camera = new exports.CameraState.instance()
                .setCenter(initialBBox.x + initialBBox.width / 2,
                           initialBBox.y + initialBBox.height / 2)
                .setSize(initialBBox.width, initialBBox.height)
                .setClipped(false);
            
            // Copy the document's bounding box to all layers
            var result = {};
            for (var idLayer in this.cameras) {
                result[idLayer] = camera;
            }
            return result;
        },

        /*
         * Apply geometrical transformations to the image according to the current
         * geometrical attributes of this Display.
         *
         * This method is called automatically when the window is resized.
         */
        update: function () {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].update();
            }
        },

        /*
         * Transform the SVG document to show the given frame.
         *
         * Parameters:
         *    - frame: the frame to show
         */
        showFrame: function (frame) {
            for (var idLayer in frame.states) {
                this.cameras[idLayer].setAtState(frame.states[idLayer]);
            }
        },

        /*
         * Apply an additional translation to the SVG document based on onscreen coordinates.
         *
         * Parameters:
         *    - deltaX: the horizontal displacement, in pixels
         *    - deltaY: the vertical displacement, in pixels
         */
        drag: function (deltaX, deltaY) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].drag(deltaX, deltaY);
            }
        },

        /*
         * Zooms the display with the given factor.
         *
         * The zoom is centered around (x, y) with respect to the center of the display area.
         */
        zoom: function (factor, x, y) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].zoom(factor, x, y);
            }
        },

        /*
         * Rotate the display with the given angle.
         *
         * The rotation is centered around the center of the display area.
         */
        rotate: function (angle) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].rotate(angle);
            }
        }
    });
    
    /*
     * Initializes the current Display.
     *
     * This method prepares the DOM representation of the current SVG document.
     * All the image is embedded into a global &quot;g&quot; element on which transformations will be applied.
     * A clipping rectangle is added.
     *
     * This method must be called when the document is ready to be manipulated.
     */
    function onDocumentReady() {
        var svgRoot = document.documentElement; // TODO check SVG tag
        
        // Save the initial bounding box of the document
        // and force its dimensions to the browser window
        initialBBox = svgRoot.getBBox();
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        
        exports.viewPort = new exports.ViewPort.instance(sozi.document.idLayerList);
        
        sozi.events.fire(&quot;displayready&quot;);
    }

    /*
     * Resizes the SVG document to fit the browser window.
     */
    function resize() {
        var svgRoot = document.documentElement;
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        exports.viewPort.setSize(window.innerWidth, window.innerHeight).update();
    }
    
    sozi.events.listen(&quot;documentready&quot;, onDocumentReady);
    window.addEventListener(&quot;resize&quot;, resize, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 * @depend animation.js
 * @depend display.js
 */

module(this, &quot;sozi.player&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the Sozi display module
    var display = sozi.display;
    
    // The animator object used to animate transitions
    var animator;
    
    // The handle returned by setTimeout() for frame timeout
    var nextFrameTimeout;
    
    // Constants: default animation properties
    // for out-of-sequence transitions
    var DEFAULT_DURATION_MS = 500;
    var DEFAULT_ZOOM_PERCENT = -10;
    var DEFAULT_PROFILE = &quot;linear&quot;;
    
    // The source frame index for the current transition
    var sourceFrameIndex = 0;
    
    // The index of the visible frame
    var currentFrameIndex = 0;
    
    // The state of the presentation.
    // If false, no automatic transition will be fired.
    var playing = false;
    
    // The state of the current frame.
    // If true, an automatic transition will be fired after the current timeout.
    var waiting = false;

    /*
     * Starts waiting before moving to the next frame.
     *
     * It the current frame has a timeout set, this method
     * will register a timer to move to the next frame automatically
     * after the specified time.
     *
     * If the current frame is the last, the presentation will
     * move to the first frame.
     */
    function waitTimeout() {
        if (sozi.document.frames[currentFrameIndex].timeoutEnable) {
            waiting = true;
            var index = (currentFrameIndex + 1) % sozi.document.frames.length;
            nextFrameTimeout = window.setTimeout(function () {
                    exports.moveToFrame(index);
                },
                sozi.document.frames[currentFrameIndex].timeoutMs
            );
        }
    }

    /*
     * Starts the presentation from the given frame index (0-based).
     *
     * This method sets the &quot;playing&quot; flag, shows the desired frame
     * and calls waitTimeout.
     */
    exports.startFromIndex = function (index) {
        playing = true;
        waiting = false;
        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.viewPort.showFrame(sozi.document.frames[index]);
        waitTimeout();
    };

    exports.restart = function () {
        exports.startFromIndex(currentFrameIndex);
    };

    /*
     * Stops the presentation.
     *
     * This method clears the &quot;playing&quot;.
     * If the presentation was in &quot;waiting&quot; mode due to a timeout
     * in the current frame, then it stops waiting.
     * The current animation is stopped in its current state.
     */
    exports.stop = function () {
        animator.stop();
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        playing = false;
        sourceFrameIndex = currentFrameIndex;
    };

    function getZoomData(zoomPercent, s0, s1) {
        var result = {
            ss: ((zoomPercent &lt; 0) ? Math.max(s0, s1) : Math.min(s0, s1)) * (100 - zoomPercent) / 100,
            ts: 0.5,
            k: 0
        };

        if (zoomPercent !== 0) {
            var a = s0 - s1;
            var b = s0 - result.ss;
            var c = s1 - result.ss;

            if (a !== 0) {
                var d = Math.sqrt(b * c);

                var u = (b - d) / a;
                var v = (b + d) / a;

                result.ts = (u &gt; 0 &amp;&amp; u &lt;= 1) ? u : v;
            }

            result.k = b / result.ts / result.ts;
        }

        return result;
    }

    /*
     * Jump to a frame with the given index (0-based).
     *
     * This method does not animate the transition from the current
     * state of the display to the desired frame.
     *
     * The presentation is stopped: if a timeout has been set for the
     * target frame, it will be ignored.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.jumpToFrame = function (index) {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);

        sourceFrameIndex = index;
        currentFrameIndex = index;
        display.viewPort.showFrame(sozi.document.frames[index]);

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Returns an associative array where keys are layer names
     * and values are objects in the form { initialState: finalState: profile: zoomWidth: zoomHeight:}
     */
    function getAnimationData(initialState, finalState, zoomPercent, profile) {
        var data = {};
        
        for (var idLayer in initialState) {
            data[idLayer] = {
                initialState: sozi.display.CameraState.instance(),
                finalState: sozi.display.CameraState.instance()
            };
            
            data[idLayer].profile = profile || finalState[idLayer].transitionProfile;
            data[idLayer].initialState.setAtState(initialState[idLayer]);

            // If the current layer is referenced in final state, copy the final properties
            // else, copy initial state to final state for the current layer.
            if (finalState.hasOwnProperty(idLayer)) {
                data[idLayer].finalState.setAtState(finalState[idLayer]);
            }
            else {
                data[idLayer].finalState.setAtState(initialState[idLayer]);
            }

            // Keep the smallest angle difference between initial state and final state
            // TODO this should be handled in the interpolation function
            if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &gt; 180) {
                data[idLayer].finalState.setRawAngle(data[idLayer].finalState.angle - 360);
            }
            else if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &lt; -180) {
                data[idLayer].initialState.setRawAngle(data[idLayer].initialState.angle - 360);
            }

            var zp = zoomPercent || finalState[idLayer].transitionZoomPercent;
            
            if (zp &amp;&amp; finalState.hasOwnProperty(idLayer)) {
                data[idLayer].zoomWidth = getZoomData(zp,
                    initialState[idLayer].width,
                    finalState[idLayer].width);
                data[idLayer].zoomHeight = getZoomData(zp,
                    initialState[idLayer].height,
                    finalState[idLayer].height);
            }
        }
        
        return data;
    }
    
    exports.previewFrame = function (index) {
        currentFrameIndex = index;
        animator.start(DEFAULT_DURATION_MS,
            getAnimationData(display.viewPort.cameras, sozi.document.frames[index].states,
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]));
        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to a frame with the given index (0-based).
     *
     * This method animates the transition from the current
     * state of the display to the desired frame.
     *
     * If the given frame index corresponds to the next frame in the list,
     * the transition properties of the next frame are used.
     * Otherwise, default transition properties are used.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.moveToFrame = function (index) {
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }

        var durationMs, zoomPercent, profile;
        if (index === (currentFrameIndex + 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[index].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
        }
        else {
            durationMs = DEFAULT_DURATION_MS;
            zoomPercent = DEFAULT_ZOOM_PERCENT;
            profile = sozi.animation.profiles[DEFAULT_PROFILE];
        }

        sozi.events.fire(&quot;cleanup&quot;);

        playing = true;
        currentFrameIndex = index;

        animator.start(durationMs, getAnimationData(display.viewPort.cameras, sozi.document.frames[index].states, zoomPercent, profile));

        sozi.events.fire(&quot;framechange&quot;, index);
    };

    /*
     * Moves to the first frame of the presentation.
     */
    exports.moveToFirst = function () {
        exports.moveToFrame(0);
    };

    /*
     * Jumps to the previous frame
     */
    exports.jumpToPrevious = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &lt;= currentFrameIndex) {
            index -= 1;
        }
        if (index &gt;= 0) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the previous frame.
     */
    exports.moveToPrevious = function () {
        for (var index = currentFrameIndex - 1; index &gt;= 0; index -= 1) {
            var frame = sozi.document.frames[index];
            if (!frame.timeoutEnable || frame.timeoutMs !== 0) {
                exports.moveToFrame(index);
                break;
            }
        }
    };

    /*
     * Jumps to the next frame
     */
    exports.jumpToNext = function () {
        var index = currentFrameIndex;
        if (!animator.started || sourceFrameIndex &gt;= currentFrameIndex) {
            index += 1;
        }
        if (index &lt; sozi.document.frames.length) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the next frame.
     */
    exports.moveToNext = function () {
        if (currentFrameIndex &lt; sozi.document.frames.length - 1 || sozi.document.frames[currentFrameIndex].timeoutEnable) {
            exports.moveToFrame((currentFrameIndex + 1) % sozi.document.frames.length);
        }
    };

    /*
     * Moves to the last frame of the presentation.
     */
    exports.moveToLast = function () {
        exports.moveToFrame(sozi.document.frames.length - 1);
    };

    /*
     * Restores the current frame.
     *
     * This method restores the display to fit the current frame,
     * e.g. after the display has been zoomed or dragged.
     */
    exports.moveToCurrent = function () {
        exports.moveToFrame(currentFrameIndex);
    };

    /*
     * Shows all the document in the browser window.
     */
    exports.showAll = function () {
        exports.stop();
        sozi.events.fire(&quot;cleanup&quot;);
        animator.start(DEFAULT_DURATION_MS,
            getAnimationData(display.viewPort.cameras, display.viewPort.getDocumentState(),
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]
            )
        );
    };

    /*
     * Event handler: display ready.
     */
    function onDisplayReady() {
        exports.startFromIndex(sozi.location.getFrameIndex());

        // Hack to fix the blank screen bug in Chrome/Chromium
        // See https://github.com/senshu/Sozi/issues/109
        window.setTimeout(display.viewPort.bind(display.viewPort.update), 1);
    }

    animator = sozi.animation.Animator.instance().augment({
        /*
         * Event handler: animation step.
         *
         * This method is called periodically by animator after the animation
         * has been started, and until the animation time is elapsed.
         *
         * Parameter data provides the following information:
         *    - initialState and finalState contain the geometrical properties of the display
         *      at the start and end of the animation.
         *    - profile is a reference to the speed profile function to use.
         *    - zoomWidth and zoomHeight are the parameters of the zooming polynomial if the current
         *      animation has a non-zero zooming effect.
         *
         * Parameter progress is a float number between 0 (start of the animation)
         * and 1 (end of the animation).
         *
         * TODO move the zoom code to display.js
         */
        onStep: function (progress) {
            for (var idLayer in this.data) {
                var camera = display.viewPort.cameras[idLayer];
                
                camera.interpolate(
                    this.data[idLayer].initialState,
                    this.data[idLayer].finalState,
                    this.data[idLayer].profile(progress)
                );

                var ps;
                if (this.data[idLayer].zoomWidth &amp;&amp; this.data[idLayer].zoomWidth.k !== 0) {
                    ps = progress - this.data[idLayer].zoomWidth.ts;
                    camera.width = this.data[idLayer].zoomWidth.k * ps * ps + this.data[idLayer].zoomWidth.ss;
                }

                if (this.data[idLayer].zoomHeight &amp;&amp; this.data[idLayer].zoomHeight.k !== 0) {
                    ps = progress - this.data[idLayer].zoomHeight.ts;
                    camera.height = this.data[idLayer].zoomHeight.k * ps * ps + this.data[idLayer].zoomHeight.ss;
                }

                camera.setClipped(this.data[idLayer].finalState.clipped);
            }
            
            display.viewPort.update();
        },
        
        /*
         * Event handler: animation done.
         *
         * This method is called by animator when the current animation is finished.
         *
         * If the animation was a transition in the normal course of the presentation,
         * then we call the waitTimeout method to process the timeout property of the current frame.
         */
        onDone: function () {
            sourceFrameIndex = currentFrameIndex;
            if (playing) {
                waitTimeout();
            }
        }
    });

    sozi.events.listen(&quot;displayready&quot;, onDisplayReady);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend player.js
 * @depend display.js
 */

/**
 * @name sozi.actions
 * @namespace Callback functions for DOM event handlers
 */
module(this, &quot;sozi.actions&quot;, function (exports, window) {
    /** @lends sozi.actions */
    
    &quot;use strict&quot;;
    
    // Module aliases
    var player = sozi.player;
    var display = sozi.display;
    
    // The global document object
    var document = window.document;
    
    // Constants: mouse button numbers
    var DRAG_BUTTON = 0;    // Left button
    var TOC_BUTTON = 1;     // Middle button
    
    // Constants: increments for zooming and rotating
    var SCALE_FACTOR = 1.05;
    var ROTATE_STEP = 5;
    
    /**
     * The status of the current drag operation.
     *
     * @type Boolean
     */
    var mouseDragged = false;
    
    /**
     * The X coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastX = 0;

    /**
     * The Y coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastY = 0;
    
    /**
     * Zooms the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;zoom in when &lt;code&gt;direction &gt; 0&lt;/code&gt;&lt;/li&gt;
     *  &lt;li&gt;zoom out when &lt;code&gt;direction &lt;= 0&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;The scaling is centered around point (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt;
     *
     * @param {Number} direction The direction of the scaling operation
     * @param {Number} x The X coordinate of the scaling center
     * @param {Number} y The Y coordinate of the scaling center
     */
    function zoom(direction, x, y) {
        player.stop();
        display.viewPort.zoom(direction &gt; 0 ? SCALE_FACTOR : 1 / SCALE_FACTOR, x, y);
    }
    
    /**
     * Rotate the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;rotate anticlockwise when direction &gt; 0&lt;/li&gt;
     *  &lt;li&gt;rotate clockwise when direction &lt;= 0&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param {Number} direction The direction of the rotation
     */
    function rotate(direction) {
        player.stop();
        display.viewPort.rotate(direction &gt; 0 ? ROTATE_STEP : -ROTATE_STEP);
    }
    
    /**
     * Show/hide the frame list.
     *
     * &lt;p&gt;The presentation stops when the frame list is showed,
     * and restarts when the frame list is hidden.&lt;/p&gt;
     */
    function toggleFrameList() {
        if (sozi.framelist.isVisible()) {
            sozi.framelist.hide();
            player.restart();
        } else {
            player.stop();
            sozi.framelist.show();
        }
    }

    /**
     * Event handler: mouse down.
     *
     * &lt;p&gt;When the left button is pressed, we register the current coordinates
     * in case the mouse will be dragged. Handler {@link sozi.actions-onMouseDrag} is set until
     * the button is released ({@link sozi.actions-onMouseUp}).&lt;/p&gt;
     *
     * &lt;p&gt;When the middle button is pressed, the table of contents is shown or hidden.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDown(evt) {
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.addEventListener(&quot;mousemove&quot;, onMouseDrag, false);
            mouseDragged = false;
            mouseLastX = evt.clientX;
            mouseLastY = evt.clientY;
        } else if (evt.button === TOC_BUTTON) {
            toggleFrameList();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse move.
     *
     * &lt;p&gt;If the left mouse button is down, then the mouse move is a drag action.
     * This method computes the displacement since the button was pressed or
     * since the last move, and updates the reference coordinates for the next move.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDrag(evt) {
        player.stop();
        mouseDragged = true;
        sozi.events.fire(&quot;cleanup&quot;);
        display.viewPort.drag(evt.clientX - mouseLastX, evt.clientY - mouseLastY);
        mouseLastX = evt.clientX;
        mouseLastY = evt.clientY;
        evt.stopPropagation();
    }

    /**
     * Event handler: mouse up.
     *
     * &lt;p&gt;Releasing the left button removes the {@link sozi.actions-onMouseDrag} handler.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseUp(evt) {
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.removeEventListener(&quot;mousemove&quot;, onMouseDrag, false);
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: context menu (i.e right click).
     *
     * &lt;p&gt;Right click goes one frame back.&lt;/p&gt;
     *
     * &lt;p&gt;There is no &quot;click&quot; event for the right mouse button and the menu
     * can't be disabled in {@link sozi.actions-onMouseDown}.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onContextMenu(evt) {
        player.moveToPrevious();
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse click.
     *
     * &lt;p&gt;Left-click moves the presentation to the next frame.&lt;/p&gt;
     *
     * &lt;p&gt;No &quot;click&quot; event is generated for the middle button in Firefox.
     * See {@link sozi.actions-onMouseDown} for middle click handling.&lt;/p&gt;
     *
     * &lt;p&gt;Dragging the mouse produces a &quot;click&quot; event when the button is released.
     * If flag {@link sozi.actions-mouseDragged} was set by {@link sozi.actions-onMouseDrag},
     * then the click event is the result of a drag action.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onClick(evt) {
        if (!mouseDragged &amp;&amp; evt.button !== TOC_BUTTON) {
            player.moveToNext();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse wheel.
     *
     * &lt;p&gt;Rolling the mouse wheel stops the presentation and zooms the current display.&lt;/p&gt;
     *
     * FIXME shift key does not work in Opera
     *
     * @param {Event} evt The DOM event object
     */
    function onWheel(evt) {
        if (!evt) {
            evt = window.event;
        }

        var delta = 0;
        if (evt.wheelDelta) { // IE and Opera
            delta = evt.wheelDelta;
        }
        else if (evt.detail) { // Mozilla
            delta = -evt.detail;
        }
        
        if (delta !== 0) {
            if (evt.shiftKey) {
                rotate(delta);
            }
            else {
                zoom(delta, evt.clientX, evt.clientY);
            }
        }
        
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: key press.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles character keys &quot;+&quot;, &quot;-&quot;, &quot;=&quot;, &quot;F&quot; and &quot;T&quot;.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyPress(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.charCode || evt.keyCode) {
        case 43: // +
            zoom(1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 45: // -
            zoom(-1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 61: // =
            player.moveToCurrent();
            break;
        case 70: // F
        case 102: // f
            player.showAll();
            break;
        case 84: // T
        case 116: // t
            toggleFrameList();
            break;
        case 82: // R
            rotate(-1);
            break;
        case 114: // r
            rotate(1);
            break;
        }

        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: key down.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles navigation keys (arrows, page up/down, home, end)
     * and the space and enter keys.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyDown(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.keyCode) {
        case 36: // Home
            player.moveToFirst();
            break;
        case 35: // End
            player.moveToLast();
            break;
        case 38: // Arrow up
            player.jumpToPrevious();
            break;
        case 33: // Page up
        case 37: // Arrow left
            player.moveToPrevious();
            break;
        case 40: // Arrow down
            player.jumpToNext();
            break;
        case 34: // Page down
        case 39: // Arrow right
        case 13: // Enter
        case 32: // Space
            player.moveToNext();
            break;
        }
        
        evt.stopPropagation();
        
        // In Chrome/Chromium, preventDefault() inhibits the &quot;keypress&quot; event
    }

    /**
     * Dummy event handler: stop event propagation.
     *
     * @param {Event} evt The DOM event object
     */
    function stopEvent(evt) {
        evt.stopPropagation();
    }

    /**
     * Event handler: document load.
     *
     * &lt;p&gt;This function sets up all other event handlers for this module.&lt;/p&gt;
     */
    function onLoad() {
        // Prevent event propagation when clicking on a link
        var links = document.getElementsByTagName(&quot;a&quot;);
        for (var i = 0; i &lt; links.length; i += 1) {
            links[i].addEventListener(&quot;click&quot;, stopEvent, false);
            links[i].addEventListener(&quot;contextmenu&quot;, stopEvent, false);
        }
        
        // TODO also use shift-click as an alternative for middle-click
        var svgRoot = document.documentElement;
        svgRoot.addEventListener(&quot;click&quot;, onClick, false);
        svgRoot.addEventListener(&quot;mousedown&quot;, onMouseDown, false);
        svgRoot.addEventListener(&quot;mouseup&quot;, onMouseUp, false);
        svgRoot.addEventListener(&quot;keypress&quot;, onKeyPress, false);
        svgRoot.addEventListener(&quot;keydown&quot;, onKeyDown, false);
        svgRoot.addEventListener(&quot;contextmenu&quot;, onContextMenu, false);
        svgRoot.addEventListener(&quot;DOMMouseScroll&quot;, onWheel, false); // Mozilla
        window.onmousewheel = onWheel;
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2012 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
*
* See http://sozi.baierouge.fr/wiki/en:license for details.
*
* @depend module.js
* @depend events.js
*/

module(this, &quot;sozi.document&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
    var document = window.document;
    
    // Constant: the Sozi namespace
    var SOZI_NS = &quot;http://sozi.baierouge.fr&quot;;
    
    // Constant: the default frame properties, if missing in the SVG document
    var DEFAULTS = {
        &quot;title&quot;: &quot;Untitled&quot;,
        &quot;sequence&quot;: &quot;0&quot;,
        &quot;hide&quot;: &quot;true&quot;,
        &quot;clip&quot;: &quot;true&quot;,
        &quot;timeout-enable&quot;: &quot;false&quot;,
        &quot;timeout-ms&quot;: &quot;5000&quot;,
        &quot;transition-duration-ms&quot;: &quot;1000&quot;,
        &quot;transition-zoom-percent&quot;: &quot;0&quot;,
        &quot;transition-profile&quot;: &quot;linear&quot;
    };

    var DRAWABLE_TAGS = [ &quot;g&quot;, &quot;image&quot;, &quot;path&quot;, &quot;rect&quot;, &quot;circle&quot;,
        &quot;ellipse&quot;, &quot;line&quot;, &quot;polyline&quot;, &quot;polygon&quot;, &quot;text&quot;, &quot;clippath&quot; ];

    // The definitions of all valid frames in the current document
    exports.frames = [];
    
    // The list of layer ids managed by Sozi
    exports.idLayerList = [];
    
    /*
    * Returns the value of an attribute of a given Sozi SVG element.
    *
    * If the attribute is not set, then a default value is returned.
    * See DEFAULTS.
    */
    function readAttribute(soziElement, attr) {
        var value = soziElement.getAttributeNS(SOZI_NS, attr);
        return value === &quot;&quot; ? DEFAULTS[attr] : value;
    }

    function readStateForLayer(frame, idLayer, soziElement) {
        var state = frame.states[idLayer] =
            frame.states[idLayer] || sozi.display.CameraState.instance();
        
        if (typeof state.hide === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;hide&quot;)) {
            state.hide = readAttribute(soziElement, &quot;hide&quot;) === &quot;true&quot;;
        }

        if (typeof state.transitionZoomPercent === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-zoom-percent&quot;)) {
            state.transitionZoomPercent = parseInt(readAttribute(soziElement, &quot;transition-zoom-percent&quot;), 10);
        }

        if (typeof state.transitionProfile === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-profile&quot;)) {
            state.transitionProfile = sozi.animation.profiles[readAttribute(soziElement, &quot;transition-profile&quot;) || &quot;linear&quot;];
        }
        
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;refid&quot;)) {
            // The previous value of the &quot;clip&quot; attribute will be preserved
            // when setting the new geometry object.
            var svgElement = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;refid&quot;));
            if (svgElement) {
                if (state.hide) {
                    svgElement.style.visibility = &quot;hidden&quot;;
                }
                state.setAtElement(svgElement);
            }
        }
            
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;clip&quot;)) {
            state.setClipped(readAttribute(soziElement, &quot;clip&quot;) === &quot;true&quot;);
        }
    }
    
    /*
    * Builds the list of frames from the current document.
    *
    * This method collects all elements with tag &quot;sozi:frame&quot; and
    * retrieves their geometrical and animation attributes.
    * SVG elements that should be hidden during the presentation are hidden.
    *
    * The resulting list is available in frames, sorted by frame indices.
    */
    function readFrames() {
        // Collect all group ids of &lt;layer&gt; elements
        var soziLayerList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
        soziLayerList.forEach(function (soziLayer) {
            var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
            if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) === -1 &amp;&amp; document.getElementById(idLayer)) {
                exports.idLayerList.push(idLayer);
            }
        });

        // Reorganize the document, grouping objects that do not belong
        // to a group referenced in &lt;layer&gt; elements
        var svgRoot = document.documentElement;
        var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

        // All drawable elements will be moved to a &lt;defs&gt; element
        var svgDefs = document.createElementNS(SVG_NS, &quot;defs&quot;);

        // Create the first wrapper group
        var svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);

        // For each child of the root SVG element
        var svgElementList = Array.prototype.slice.call(svgRoot.childNodes);
        svgElementList.forEach(function (svgElement, index) {
            if (!svgElement.getAttribute) {
                // Remove text elements
                svgRoot.removeChild(svgElement);
            }
            else if (exports.idLayerList.indexOf(svgElement.getAttribute(&quot;id&quot;)) !== -1) {
                // If the current element is a referenced layer ...
                if (svgWrapper.firstChild) {
                    // ... and if there were other non-referenced elements before it,
                    // append the wrapper group to the &lt;defs&gt; element
                    svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + index);
                    exports.idLayerList.push(&quot;sozi-wrapper-&quot; + index);
                    svgDefs.appendChild(svgWrapper);
                    
                    // Prepare a new wrapper element
                    svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
                }
                
                // ... append the current element to the &lt;defs&gt; element
                svgDefs.appendChild(svgElement);
            }
            else if (DRAWABLE_TAGS.indexOf(svgElement.localName) !== -1) {
                // If the current element is not a referenced layer
                // and is drawable, move it to the current wrapper element
                svgRoot.removeChild(svgElement);
                svgWrapper.appendChild(svgElement);
            }
        });

        // Append last wrapper if needed
        if (svgWrapper.firstChild) {
            svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + svgElementList.length);
            exports.idLayerList.push(&quot;sozi-wrapper-&quot; + svgElementList.length);
            svgDefs.appendChild(svgWrapper);
        }

        // Finally, append the &lt;defs&gt; element
        svgRoot.appendChild(svgDefs);
        
        // Analyze &lt;frame&gt; elements
        var soziFrameList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;frame&quot;));
        soziFrameList.forEach(function (soziFrame, indexFrame) {
            var newFrame = {
                id: soziFrame.getAttribute(&quot;id&quot;),
                title: readAttribute(soziFrame, &quot;title&quot;),
                sequence: parseInt(readAttribute(soziFrame, &quot;sequence&quot;), 10),
                timeoutEnable: readAttribute(soziFrame, &quot;timeout-enable&quot;) === &quot;true&quot;,
                timeoutMs: parseInt(readAttribute(soziFrame, &quot;timeout-ms&quot;), 10),
                transitionDurationMs: parseInt(readAttribute(soziFrame, &quot;transition-duration-ms&quot;), 10),
                states: {}
            };

            // Get the default properties for all layers, either from
            // the current &lt;frame&gt; element or from the corresponding
            // layer in the previous frame.
            // Those properties can later be overriden by &lt;layer&gt; elements
            exports.idLayerList.forEach(function (idLayer) {
                if (indexFrame === 0 || idLayer.search(&quot;sozi-wrapper-[0-9]+&quot;) !== -1) {
                    // In the first frame, or in wrapper layers,
                    // read layer attributes from the &lt;frame&gt; element
                    readStateForLayer(newFrame, idLayer, soziFrame);
                }
                else {
                    // After the first frame, in referenced layers,
                    // copy attributes from the corresponding layer in the previous frame
                    var currentState = newFrame.states[idLayer] = sozi.display.CameraState.instance();
                    var previousState = exports.frames[exports.frames.length - 1].states[idLayer];
                    currentState.setAtState(previousState);
                }
            });

            // Collect and analyze &lt;layer&gt; elements in the current &lt;frame&gt; element
            var soziLayerList = Array.prototype.slice.call(soziFrame.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
            soziLayerList.forEach(function (soziLayer) {
                var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
                if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) !== -1) {
                    readStateForLayer(newFrame, idLayer, soziLayer);
                }
            });
            
            // If the &lt;frame&gt; element has at least one valid layer,
            // add it to the frame list
            for (var idLayer in newFrame.states) {
                if (newFrame.states.hasOwnProperty(idLayer)) {
                    exports.frames.push(newFrame);
                    break;
                }
            }
        });
        
        // Sort frames by sequence index
        exports.frames.sort(
            function (a, b) {
                return a.sequence - b.sequence;
            }
        );
    }

    /*
    * Event handler: document load.
    *
    * This function reads the frames from the document and fires
    * the &quot;documentready&quot; event.
    */
    function onLoad() {
        document.documentElement.removeAttribute(&quot;viewBox&quot;);
        readFrames();
        sozi.events.fire(&quot;documentready&quot;);
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 *
 * @depend module.js
 * @depend events.js
 */

module(this, &quot;sozi.location&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    var changedFromWithin = false;
    
    /*
     * Returns the frame index given in the URL hash.
     *
     * In the URL, the frame index starts a 1.
     * This method converts it into a 0-based index.
     *
     * If the URL hash is not a positive integer, then 0 is returned.
     * It the URL hash is an integer greater than the last frame index, then
     * the last frame index is returned.
     */
    exports.getFrameIndex = function () {
        var index = window.location.hash ?
            parseInt(window.location.hash.slice(1), 10) - 1 : 0;
        if (isNaN(index) || index &lt; 0) {
            return 0;
        } else if (index &gt;= sozi.document.frames.length) {
            return sozi.document.frames.length - 1;
        } else {
            return index;
        }
    };

    /*
     * Event handler: hash change.
     *
     * This function is called when the URL hash is changed.
     * If the hash was changed manually in the address bar, and if it corresponds to
     * a valid frame number, then the presentation moves to that frame.
     *
     * The hashchange event can be triggered externally, by the user modifying the URL,
     * or internally, by the script modifying window.location.hash.
     */
    function onHashChange() {
        var index = exports.getFrameIndex();
        if (!changedFromWithin) {
            sozi.player.moveToFrame(index);
        }
        changedFromWithin = false;
    }
    
    /*
     * Event handler: frame change.
     *
     * This function is called when the presentation has reached a
     * new frame.
     * The URL hash is changed based on the provided frame index.
     */
    function onFrameChange(index) {
        changedFromWithin = true;
        window.location.hash = &quot;#&quot; + (index + 1);
    }

	/*
	 * Event handler: document load.
	 *
	 * This function registers the &quot;framechange&quot; handler.
	 */
    function onLoad() {
        sozi.events.listen(&quot;framechange&quot;, onFrameChange);
    }
    
    window.addEventListener(&quot;hashchange&quot;, onHashChange, false);
    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
    @depend framenumber.js
    @depend framelist.js
    @depend actions.js
    @depend player.js
    @depend display.js
    @depend document.js
    @depend location.js
*/

</script>
  <style
     ns1:version="12.05-12194453"
     id="sozi-style">#sozi-toc text{fill:#eff;font-family:Verdana,sans-serif;font-size:12pt}#sozi-toc text:hover{fill:#0cf;cursor:pointer}#sozi-toc text.sozi-toc-current{fill:#fa4}#sozi-toc-background{stroke:#222;stroke-opacity:.1;stroke-width:10;fill:#222;fill-opacity:.9}.sozi-toc-arrow{fill:#eff;fill-opacity:.75;stroke:none}.sozi-toc-arrow:hover{fill:#0cf}#sozi-framenumber circle{stroke:#222;stroke-opacity:.1;stroke-width:4;fill:#222;fill-opacity:.9}#sozi-framenumber text{fill:#eff;font-family:Verdana,sans-serif;font-size:12pt}</style>
  <script
     ns1:version="12.05-12194453"
     id="sozi-extras-addvideo-script">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2012 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

this.addEventListener(&quot;load&quot;, function () {
	var	svgNs = &quot;http://www.w3.org/2000/svg&quot;,
	    soziNs = &quot;http://sozi.baierouge.fr&quot;,
		xhtmlNs = &quot;http://www.w3.org/1999/xhtml&quot;,
		window = this,
		document = window.document,
		mediaSources = [],
		mediaList, i, j, k, rect, foreignObject,
		html, htmlMedia, htmlSource;
	
    function clickHandler(evt) {
        evt.stopPropagation();
    }
    
    function registerFrameChangeHandler(htmlMedia, startFrame, stopFrame) {
        sozi.events.listen(&quot;framechange&quot;, function(index) {
            var frameId = sozi.document.frames[index].id;
		    if (frameId === startFrame) {
		        htmlMedia.play();
			}
            else if (frameId === stopFrame) {
                htmlMedia.pause();
            }
		});
    }
    
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;video&quot;));
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;audio&quot;));

	mediaList = [];
	for (k = 0; k &lt; mediaSources.length; k += 1) {
	    for (i = 0; i &lt; mediaSources[k].length; i += 1) {
		    rect = mediaSources[k][i].parentNode;
	
		    // Create HTML media source element
		    htmlSource = document.createElementNS(xhtmlNs, &quot;source&quot;);
		    htmlSource.setAttribute(&quot;type&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;type&quot;));
		    htmlSource.setAttribute(&quot;src&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;src&quot;));

		    for (j = 0; j &lt; mediaList.length; j += 1) {
			    if (mediaList[j].rect === rect) {
				    break;
			    }
		    }
	
		    if (j === mediaList.length) {
		        rect.setAttribute(&quot;visibility&quot;, &quot;hidden&quot;);
		        
			    // Create HTML media element
			    htmlMedia = document.createElementNS(xhtmlNs, mediaSources[k][i].localName);
			    htmlMedia.setAttribute(&quot;controls&quot;, &quot;controls&quot;);
			    if (mediaSources[k][i].localName === &quot;video&quot;) {
			        htmlMedia.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			        htmlMedia.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    }
		        htmlMedia.addEventListener(&quot;click&quot;, clickHandler, false);
		        htmlMedia.addEventListener(&quot;contextmenu&quot;, clickHandler, false);
		        
			    // Create HTML root element
			    html = document.createElementNS(xhtmlNs, &quot;html&quot;);
			    html.appendChild(htmlMedia);
		
			    // Create SVG foreign object
			    foreignObject = document.createElementNS(svgNs, &quot;foreignObject&quot;);
			    foreignObject.setAttribute(&quot;x&quot;, rect.getAttribute(&quot;x&quot;));
			    foreignObject.setAttribute(&quot;y&quot;, rect.getAttribute(&quot;y&quot;));
			    foreignObject.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			    foreignObject.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    foreignObject.appendChild(html);
				
			    rect.parentNode.insertBefore(foreignObject, rect.nextSibling);
			
			    if (mediaSources[k][i].hasAttributeNS(soziNs, &quot;start-frame&quot;)) {
			        registerFrameChangeHandler(htmlMedia,
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;start-frame&quot;),
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;stop-frame&quot;)
			         );
			    }
			
			    mediaList.push({
				    rect: mediaSources[k][i].parentNode,
				    htmlMedia: htmlMedia
			    });
		    }
	    
    		// Append HTML source element to current HTML media element
    		mediaList[j].htmlMedia.appendChild(htmlSource);
	    }
	}				
}, false);

</script>
</svg>
